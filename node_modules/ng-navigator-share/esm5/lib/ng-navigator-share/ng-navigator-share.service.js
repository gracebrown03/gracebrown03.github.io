import { __awaiter, __decorate, __generator, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
var NgNavigatorShareService = /** @class */ (function () {
    function NgNavigatorShareService() {
        this.webNavigator = null;
        this.webNavigator = window.navigator;
    }
    NgNavigatorShareService.prototype.canShare = function () {
        return this.webNavigator !== null && this.webNavigator.share !== undefined;
    };
    NgNavigatorShareService.prototype.share = function (_a) {
        var _this = this;
        var title = _a.title, text = _a.text, url = _a.url;
        return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
            var isShared, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this.webNavigator !== null && this.webNavigator.share !== undefined)) return [3 /*break*/, 5];
                        if (!((text === undefined || text === null) &&
                            (url === undefined || url === null))) return [3 /*break*/, 1];
                        console.warn("text and url both can't be empty, at least provide either text or url");
                        return [3 /*break*/, 4];
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.webNavigator.share({
                                title: title,
                                text: text,
                                url: url,
                            })];
                    case 2:
                        isShared = _a.sent();
                        resolve({
                            shared: true
                        });
                        return [3 /*break*/, 4];
                    case 3:
                        error_1 = _a.sent();
                        reject({
                            shared: false,
                            error: error_1
                        });
                        return [3 /*break*/, 4];
                    case 4: return [3 /*break*/, 6];
                    case 5:
                        reject({
                            shared: false,
                            error: "This service/api is not supported in your Browser"
                        });
                        _a.label = 6;
                    case 6: return [2 /*return*/];
                }
            });
        }); });
    };
    NgNavigatorShareService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgNavigatorShareService_Factory() { return new NgNavigatorShareService(); }, token: NgNavigatorShareService, providedIn: "root" });
    NgNavigatorShareService = __decorate([
        Injectable({
            providedIn: 'root'
        }),
        __metadata("design:paramtypes", [])
    ], NgNavigatorShareService);
    return NgNavigatorShareService;
}());
export { NgNavigatorShareService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctbmF2aWdhdG9yLXNoYXJlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1uYXZpZ2F0b3Itc2hhcmUvIiwic291cmNlcyI6WyJsaWIvbmctbmF2aWdhdG9yLXNoYXJlL25nLW5hdmlnYXRvci1zaGFyZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUszQztJQUVFO1FBREEsaUJBQVksR0FBUSxJQUFJLENBQUM7UUFFdkIsSUFBSSxDQUFDLFlBQVksR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDO0lBQ3ZDLENBQUM7SUFFRCwwQ0FBUSxHQUFSO1FBQ0UsT0FBTyxJQUFJLENBQUMsWUFBWSxLQUFLLElBQUksSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssS0FBSyxTQUFTLENBQUM7SUFDN0UsQ0FBQztJQUVELHVDQUFLLEdBQUwsVUFBTSxFQUFvRTtRQUExRSxpQkFnQ0M7WUFoQ08sZ0JBQUssRUFBRSxjQUFJLEVBQUUsWUFBRztRQUN0QixPQUFPLElBQUksT0FBTyxDQUFDLFVBQU8sT0FBTyxFQUFFLE1BQU07Ozs7OzZCQUNuQyxDQUFBLElBQUksQ0FBQyxZQUFZLEtBQUssSUFBSSxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxLQUFLLFNBQVMsQ0FBQSxFQUFuRSx3QkFBbUU7NkJBRW5FLENBQUEsQ0FBQyxJQUFJLEtBQUssU0FBUyxJQUFJLElBQUksS0FBSyxJQUFJLENBQUM7NEJBQ3JDLENBQUMsR0FBRyxLQUFLLFNBQVMsSUFBSSxHQUFHLEtBQUssSUFBSSxDQUFDLENBQUEsRUFEbkMsd0JBQ21DO3dCQUVuQyxPQUFPLENBQUMsSUFBSSxDQUFDLHVFQUF1RSxDQUFDLENBQUM7Ozs7d0JBR25FLHFCQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDO2dDQUM3QyxLQUFLLEVBQUUsS0FBSztnQ0FDWixJQUFJLEVBQUUsSUFBSTtnQ0FDVixHQUFHLEVBQUUsR0FBRzs2QkFDVCxDQUFDLEVBQUE7O3dCQUpJLFFBQVEsR0FBRyxTQUlmO3dCQUNGLE9BQU8sQ0FBQzs0QkFDTixNQUFNLEVBQUUsSUFBSTt5QkFDYixDQUFDLENBQUM7Ozs7d0JBRUgsTUFBTSxDQUFDOzRCQUNMLE1BQU0sRUFBRSxLQUFLOzRCQUNiLEtBQUssRUFBRSxPQUFLO3lCQUNiLENBQUMsQ0FBQzs7Ozt3QkFJUCxNQUFNLENBQUM7NEJBQ0wsTUFBTSxFQUFFLEtBQUs7NEJBQ2IsS0FBSyxFQUFFLG1EQUFtRDt5QkFDM0QsQ0FBQyxDQUFDOzs7OzthQUVOLENBQUMsQ0FBQztJQUNMLENBQUM7O0lBMUNVLHVCQUF1QjtRQUhuQyxVQUFVLENBQUM7WUFDVixVQUFVLEVBQUUsTUFBTTtTQUNuQixDQUFDOztPQUNXLHVCQUF1QixDQTJDbkM7a0NBaEREO0NBZ0RDLEFBM0NELElBMkNDO1NBM0NZLHVCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIE5nTmF2aWdhdG9yU2hhcmVTZXJ2aWNlIHtcclxuICB3ZWJOYXZpZ2F0b3I6IGFueSA9IG51bGw7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLndlYk5hdmlnYXRvciA9IHdpbmRvdy5uYXZpZ2F0b3I7XHJcbiAgfVxyXG5cclxuICBjYW5TaGFyZSgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLndlYk5hdmlnYXRvciAhPT0gbnVsbCAmJiB0aGlzLndlYk5hdmlnYXRvci5zaGFyZSAhPT0gdW5kZWZpbmVkO1xyXG4gIH1cclxuXHJcbiAgc2hhcmUoeyB0aXRsZSwgdGV4dCwgdXJsIH06IHsgdGl0bGU6IHN0cmluZywgdGV4dD86IHN0cmluZywgdXJsPzogc3RyaW5nIH0pIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShhc3luYyAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIGlmICh0aGlzLndlYk5hdmlnYXRvciAhPT0gbnVsbCAmJiB0aGlzLndlYk5hdmlnYXRvci5zaGFyZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgKHRleHQgPT09IHVuZGVmaW5lZCB8fCB0ZXh0ID09PSBudWxsKSAmJlxyXG4gICAgICAgICAgKHVybCA9PT0gdW5kZWZpbmVkIHx8IHVybCA9PT0gbnVsbClcclxuICAgICAgICApIHtcclxuICAgICAgICAgIGNvbnNvbGUud2FybihgdGV4dCBhbmQgdXJsIGJvdGggY2FuJ3QgYmUgZW1wdHksIGF0IGxlYXN0IHByb3ZpZGUgZWl0aGVyIHRleHQgb3IgdXJsYCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGlzU2hhcmVkID0gYXdhaXQgdGhpcy53ZWJOYXZpZ2F0b3Iuc2hhcmUoe1xyXG4gICAgICAgICAgICAgIHRpdGxlOiB0aXRsZSxcclxuICAgICAgICAgICAgICB0ZXh0OiB0ZXh0LFxyXG4gICAgICAgICAgICAgIHVybDogdXJsLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmVzb2x2ZSh7XHJcbiAgICAgICAgICAgICAgc2hhcmVkOiB0cnVlXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgcmVqZWN0KHtcclxuICAgICAgICAgICAgICBzaGFyZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgIGVycm9yOiBlcnJvclxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmVqZWN0KHtcclxuICAgICAgICAgIHNoYXJlZDogZmFsc2UsXHJcbiAgICAgICAgICBlcnJvcjogYFRoaXMgc2VydmljZS9hcGkgaXMgbm90IHN1cHBvcnRlZCBpbiB5b3VyIEJyb3dzZXJgXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iXX0=