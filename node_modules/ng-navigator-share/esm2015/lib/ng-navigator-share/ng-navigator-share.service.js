import { __awaiter, __decorate, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
let NgNavigatorShareService = class NgNavigatorShareService {
    constructor() {
        this.webNavigator = null;
        this.webNavigator = window.navigator;
    }
    canShare() {
        return this.webNavigator !== null && this.webNavigator.share !== undefined;
    }
    share({ title, text, url }) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            if (this.webNavigator !== null && this.webNavigator.share !== undefined) {
                if ((text === undefined || text === null) &&
                    (url === undefined || url === null)) {
                    console.warn(`text and url both can't be empty, at least provide either text or url`);
                }
                else {
                    try {
                        const isShared = yield this.webNavigator.share({
                            title: title,
                            text: text,
                            url: url,
                        });
                        resolve({
                            shared: true
                        });
                    }
                    catch (error) {
                        reject({
                            shared: false,
                            error: error
                        });
                    }
                }
            }
            else {
                reject({
                    shared: false,
                    error: `This service/api is not supported in your Browser`
                });
            }
        }));
    }
};
NgNavigatorShareService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgNavigatorShareService_Factory() { return new NgNavigatorShareService(); }, token: NgNavigatorShareService, providedIn: "root" });
NgNavigatorShareService = __decorate([
    Injectable({
        providedIn: 'root'
    }),
    __metadata("design:paramtypes", [])
], NgNavigatorShareService);
export { NgNavigatorShareService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctbmF2aWdhdG9yLXNoYXJlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1uYXZpZ2F0b3Itc2hhcmUvIiwic291cmNlcyI6WyJsaWIvbmctbmF2aWdhdG9yLXNoYXJlL25nLW5hdmlnYXRvci1zaGFyZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUszQyxJQUFhLHVCQUF1QixHQUFwQyxNQUFhLHVCQUF1QjtJQUVsQztRQURBLGlCQUFZLEdBQVEsSUFBSSxDQUFDO1FBRXZCLElBQUksQ0FBQyxZQUFZLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQztJQUN2QyxDQUFDO0lBRUQsUUFBUTtRQUNOLE9BQU8sSUFBSSxDQUFDLFlBQVksS0FBSyxJQUFJLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLEtBQUssU0FBUyxDQUFDO0lBQzdFLENBQUM7SUFFRCxLQUFLLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBa0Q7UUFDeEUsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFPLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUMzQyxJQUFJLElBQUksQ0FBQyxZQUFZLEtBQUssSUFBSSxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxLQUFLLFNBQVMsRUFBRTtnQkFDdkUsSUFDRSxDQUFDLElBQUksS0FBSyxTQUFTLElBQUksSUFBSSxLQUFLLElBQUksQ0FBQztvQkFDckMsQ0FBQyxHQUFHLEtBQUssU0FBUyxJQUFJLEdBQUcsS0FBSyxJQUFJLENBQUMsRUFDbkM7b0JBQ0EsT0FBTyxDQUFDLElBQUksQ0FBQyx1RUFBdUUsQ0FBQyxDQUFDO2lCQUN2RjtxQkFBTTtvQkFDTCxJQUFJO3dCQUNGLE1BQU0sUUFBUSxHQUFHLE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUM7NEJBQzdDLEtBQUssRUFBRSxLQUFLOzRCQUNaLElBQUksRUFBRSxJQUFJOzRCQUNWLEdBQUcsRUFBRSxHQUFHO3lCQUNULENBQUMsQ0FBQzt3QkFDSCxPQUFPLENBQUM7NEJBQ04sTUFBTSxFQUFFLElBQUk7eUJBQ2IsQ0FBQyxDQUFDO3FCQUNKO29CQUFDLE9BQU8sS0FBSyxFQUFFO3dCQUNkLE1BQU0sQ0FBQzs0QkFDTCxNQUFNLEVBQUUsS0FBSzs0QkFDYixLQUFLLEVBQUUsS0FBSzt5QkFDYixDQUFDLENBQUM7cUJBQ0o7aUJBQ0Y7YUFDRjtpQkFBTTtnQkFDTCxNQUFNLENBQUM7b0JBQ0wsTUFBTSxFQUFFLEtBQUs7b0JBQ2IsS0FBSyxFQUFFLG1EQUFtRDtpQkFDM0QsQ0FBQyxDQUFDO2FBQ0o7UUFDSCxDQUFDLENBQUEsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGLENBQUE7O0FBM0NZLHVCQUF1QjtJQUhuQyxVQUFVLENBQUM7UUFDVixVQUFVLEVBQUUsTUFBTTtLQUNuQixDQUFDOztHQUNXLHVCQUF1QixDQTJDbkM7U0EzQ1ksdUJBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgTmdOYXZpZ2F0b3JTaGFyZVNlcnZpY2Uge1xyXG4gIHdlYk5hdmlnYXRvcjogYW55ID0gbnVsbDtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMud2ViTmF2aWdhdG9yID0gd2luZG93Lm5hdmlnYXRvcjtcclxuICB9XHJcblxyXG4gIGNhblNoYXJlKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMud2ViTmF2aWdhdG9yICE9PSBudWxsICYmIHRoaXMud2ViTmF2aWdhdG9yLnNoYXJlICE9PSB1bmRlZmluZWQ7XHJcbiAgfVxyXG5cclxuICBzaGFyZSh7IHRpdGxlLCB0ZXh0LCB1cmwgfTogeyB0aXRsZTogc3RyaW5nLCB0ZXh0Pzogc3RyaW5nLCB1cmw/OiBzdHJpbmcgfSkge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGFzeW5jIChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgaWYgKHRoaXMud2ViTmF2aWdhdG9yICE9PSBudWxsICYmIHRoaXMud2ViTmF2aWdhdG9yLnNoYXJlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICAodGV4dCA9PT0gdW5kZWZpbmVkIHx8IHRleHQgPT09IG51bGwpICYmXHJcbiAgICAgICAgICAodXJsID09PSB1bmRlZmluZWQgfHwgdXJsID09PSBudWxsKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgY29uc29sZS53YXJuKGB0ZXh0IGFuZCB1cmwgYm90aCBjYW4ndCBiZSBlbXB0eSwgYXQgbGVhc3QgcHJvdmlkZSBlaXRoZXIgdGV4dCBvciB1cmxgKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgaXNTaGFyZWQgPSBhd2FpdCB0aGlzLndlYk5hdmlnYXRvci5zaGFyZSh7XHJcbiAgICAgICAgICAgICAgdGl0bGU6IHRpdGxlLFxyXG4gICAgICAgICAgICAgIHRleHQ6IHRleHQsXHJcbiAgICAgICAgICAgICAgdXJsOiB1cmwsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXNvbHZlKHtcclxuICAgICAgICAgICAgICBzaGFyZWQ6IHRydWVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICByZWplY3Qoe1xyXG4gICAgICAgICAgICAgIHNoYXJlZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgZXJyb3I6IGVycm9yXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZWplY3Qoe1xyXG4gICAgICAgICAgc2hhcmVkOiBmYWxzZSxcclxuICAgICAgICAgIGVycm9yOiBgVGhpcyBzZXJ2aWNlL2FwaSBpcyBub3Qgc3VwcG9ydGVkIGluIHlvdXIgQnJvd3NlcmBcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==