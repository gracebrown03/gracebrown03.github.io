{"ast":null,"code":"import { __awaiter } from 'tslib';\nimport { InjectionToken, Injectable, Inject, Optional, PLATFORM_ID, NgZone, ɵɵdefineInjectable, ɵɵinject, NgModuleFactory, ComponentFactoryResolver, Injector, INJECTOR, NgModule } from '@angular/core';\nimport { of, empty, Observable, from } from 'rxjs';\nimport { isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport { observeOn, switchMap, map, tap, shareReplay, filter, withLatestFrom, groupBy, mergeMap, startWith, pairwise } from 'rxjs/operators';\nimport { ɵAngularFireSchedulers, ɵfirebaseAppFactory, ɵlazySDKProxy, FIREBASE_OPTIONS, FIREBASE_APP_NAME } from '@angular/fire';\nimport { ActivationEnd, NavigationEnd, ROUTES, Router } from '@angular/router';\nimport { Title } from '@angular/platform-browser';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @record\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/router';\nimport * as ɵngcc2 from '@angular/platform-browser';\n\nfunction Config() {}\n\n;\n/** @type {?} */\n\nconst COLLECTION_ENABLED = new InjectionToken('angularfire2.analytics.analyticsCollectionEnabled');\n/** @type {?} */\n\nconst APP_VERSION = new InjectionToken('angularfire2.analytics.appVersion');\n/** @type {?} */\n\nconst APP_NAME = new InjectionToken('angularfire2.analytics.appName');\n/** @type {?} */\n\nconst DEBUG_MODE = new InjectionToken('angularfire2.analytics.debugMode');\n/** @type {?} */\n\nconst CONFIG = new InjectionToken('angularfire2.analytics.config');\n/** @type {?} */\n\nconst APP_NAME_KEY = 'app_name';\n/** @type {?} */\n\nconst APP_VERSION_KEY = 'app_version';\n/** @type {?} */\n\nconst DEBUG_MODE_KEY = 'debug_mode';\n/** @type {?} */\n\nconst ANALYTICS_ID_FIELD = 'measurementId';\n/** @type {?} */\n\nconst GTAG_CONFIG_COMMAND = 'config';\n/** @type {?} */\n\nconst GTAG_FUNCTION_NAME = 'gtag';\n/** @type {?} */\n\nconst DATA_LAYER_NAME = 'dataLayer'; // WARNING: interface has both a type and a value, skipping emit\n\n;\n/** @type {?} */\n\nlet gtag;\n/** @type {?} */\n\nlet analyticsInitialized;\n/** @type {?} */\n\nconst analyticsInstanceCache = {};\n\nclass AngularFireAnalytics {\n  /**\n   * @param {?} options\n   * @param {?} nameOrConfig\n   * @param {?} analyticsCollectionEnabled\n   * @param {?} providedAppVersion\n   * @param {?} providedAppName\n   * @param {?} debugModeEnabled\n   * @param {?} providedConfig\n   * @param {?} platformId\n   * @param {?} zone\n   */\n  constructor(options, nameOrConfig, analyticsCollectionEnabled, providedAppVersion, providedAppName, debugModeEnabled, providedConfig, platformId, zone) {\n    this.options = options;\n\n    if (!analyticsInitialized) {\n      if (isPlatformBrowser(platformId)) {\n        gtag = window[GTAG_FUNCTION_NAME] ||\n        /**\n        * @return {?}\n        */\n        function () {\n          window[DATA_LAYER_NAME].push(arguments);\n        };\n\n        window[DATA_LAYER_NAME] = window[DATA_LAYER_NAME] || [];\n        analyticsInitialized = zone.runOutsideAngular(\n        /**\n        * @return {?}\n        */\n        () => new Promise(\n        /**\n        * @param {?} resolve\n        * @return {?}\n        */\n        resolve => {\n          window[GTAG_FUNCTION_NAME] =\n          /**\n          * @param {...?} args\n          * @return {?}\n          */\n          (...args) => {\n            if (args[0] == 'js') {\n              resolve();\n            }\n\n            gtag(...args);\n          };\n        }));\n      } else {\n        gtag =\n        /**\n        * @return {?}\n        */\n        () => {};\n\n        analyticsInitialized = Promise.resolve();\n      }\n    }\n    /** @type {?} */\n\n\n    let analytics = analyticsInstanceCache[options[ANALYTICS_ID_FIELD]];\n\n    if (!analytics) {\n      analytics = of(undefined).pipe(observeOn(new ɵAngularFireSchedulers(zone).outsideAngular), switchMap(\n      /**\n      * @return {?}\n      */\n      () => isPlatformBrowser(platformId) ? import('firebase/analytics') : empty()), map(\n      /**\n      * @return {?}\n      */\n      () => ɵfirebaseAppFactory(options, zone, nameOrConfig)), map(\n      /**\n      * @param {?} app\n      * @return {?}\n      */\n      app => app.analytics()), tap(\n      /**\n      * @param {?} analytics\n      * @return {?}\n      */\n      analytics => {\n        if (analyticsCollectionEnabled === false) {\n          analytics.setAnalyticsCollectionEnabled(false);\n        }\n      }), shareReplay({\n        bufferSize: 1,\n        refCount: false\n      }));\n      analyticsInstanceCache[options[ANALYTICS_ID_FIELD]] = analytics;\n    }\n\n    if (providedConfig) {\n      this.updateConfig(providedConfig);\n    }\n\n    if (providedAppName) {\n      this.updateConfig({\n        [APP_NAME_KEY]: providedAppName\n      });\n    }\n\n    if (providedAppVersion) {\n      this.updateConfig({\n        [APP_VERSION_KEY]: providedAppVersion\n      });\n    }\n\n    if (debugModeEnabled) {\n      this.updateConfig({\n        [DEBUG_MODE_KEY]: 1\n      });\n    }\n\n    return ɵlazySDKProxy(this, analytics, zone);\n  }\n  /**\n   * @param {?} config\n   * @return {?}\n   */\n\n\n  updateConfig(config) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield analyticsInitialized;\n      gtag(GTAG_CONFIG_COMMAND, this.options[ANALYTICS_ID_FIELD], Object.assign(Object.assign({}, config), {\n        update: true\n      }));\n    });\n  }\n\n}\n\nAngularFireAnalytics.ɵfac = function AngularFireAnalytics_Factory(t) {\n  return new (t || AngularFireAnalytics)(ɵngcc0.ɵɵinject(FIREBASE_OPTIONS), ɵngcc0.ɵɵinject(FIREBASE_APP_NAME, 8), ɵngcc0.ɵɵinject(COLLECTION_ENABLED, 8), ɵngcc0.ɵɵinject(APP_VERSION, 8), ɵngcc0.ɵɵinject(APP_NAME, 8), ɵngcc0.ɵɵinject(DEBUG_MODE, 8), ɵngcc0.ɵɵinject(CONFIG, 8), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n};\n/** @nocollapse */\n\n\nAngularFireAnalytics.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [FIREBASE_OPTIONS]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [FIREBASE_APP_NAME]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [COLLECTION_ENABLED]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [APP_VERSION]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [APP_NAME]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [DEBUG_MODE]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [CONFIG]\n  }]\n}, {\n  type: Object,\n  decorators: [{\n    type: Inject,\n    args: [PLATFORM_ID]\n  }]\n}, {\n  type: NgZone\n}];\n/** @nocollapse */\n\n\nAngularFireAnalytics.ɵprov = ɵɵdefineInjectable({\n  factory: function AngularFireAnalytics_Factory() {\n    return new AngularFireAnalytics(ɵɵinject(FIREBASE_OPTIONS), ɵɵinject(FIREBASE_APP_NAME, 8), ɵɵinject(COLLECTION_ENABLED, 8), ɵɵinject(APP_VERSION, 8), ɵɵinject(APP_NAME, 8), ɵɵinject(DEBUG_MODE, 8), ɵɵinject(CONFIG, 8), ɵɵinject(PLATFORM_ID), ɵɵinject(NgZone));\n  },\n  token: AngularFireAnalytics,\n  providedIn: \"any\"\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AngularFireAnalytics, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'any'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [FIREBASE_OPTIONS]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [FIREBASE_APP_NAME]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [COLLECTION_ENABLED]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [APP_VERSION]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [APP_NAME]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DEBUG_MODE]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [CONFIG]\n      }]\n    }, {\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, null);\n})();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  AngularFireAnalytics.prototype.options;\n  /* Skipping unhandled member: ;*/\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nconst FIREBASE_EVENT_ORIGIN_KEY = 'firebase_event_origin';\n/** @type {?} */\n\nconst FIREBASE_PREVIOUS_SCREEN_CLASS_KEY = 'firebase_previous_class';\n/** @type {?} */\n\nconst FIREBASE_PREVIOUS_SCREEN_INSTANCE_ID_KEY = 'firebase_previous_id';\n/** @type {?} */\n\nconst FIREBASE_PREVIOUS_SCREEN_NAME_KEY = 'firebase_previous_screen';\n/** @type {?} */\n\nconst FIREBASE_SCREEN_CLASS_KEY = 'firebase_screen_class';\n/** @type {?} */\n\nconst FIREBASE_SCREEN_INSTANCE_ID_KEY = 'firebase_screen_id';\n/** @type {?} */\n\nconst FIREBASE_SCREEN_NAME_KEY = 'firebase_screen';\n/** @type {?} */\n\nconst OUTLET_KEY = 'outlet';\n/** @type {?} */\n\nconst PAGE_PATH_KEY = 'page_path';\n/** @type {?} */\n\nconst PAGE_TITLE_KEY = 'page_title';\n/** @type {?} */\n\nconst SCREEN_CLASS_KEY = 'screen_class';\n/** @type {?} */\n\nconst SCREEN_NAME_KEY = 'screen_name';\n/** @type {?} */\n\nconst SCREEN_VIEW_EVENT = 'screen_view';\n/** @type {?} */\n\nconst EVENT_ORIGIN_AUTO = 'auto';\n/** @type {?} */\n\nconst DEFAULT_SCREEN_CLASS = '???';\n/** @type {?} */\n\nconst NG_PRIMARY_OUTLET = 'primary';\n/** @type {?} */\n\nconst SCREEN_INSTANCE_DELIMITER = '#';\n/** @type {?} */\n\nconst ANNOTATIONS = '__annotations__';\n\nclass ScreenTrackingService {\n  /**\n   * @param {?} analytics\n   * @param {?} router\n   * @param {?} title\n   * @param {?} componentFactoryResolver\n   * @param {?} platformId\n   * @param {?} debugModeEnabled\n   * @param {?} zone\n   * @param {?} injector\n   */\n  constructor(analytics, router, title, componentFactoryResolver, platformId, debugModeEnabled, zone, injector) {\n    if (!router || !isPlatformBrowser(platformId)) {\n      return this;\n    }\n\n    zone.runOutsideAngular(\n    /**\n    * @return {?}\n    */\n    () => {\n      /** @type {?} */\n      const activationEndEvents = router.events.pipe(filter(\n      /**\n      * @param {?} e\n      * @return {?}\n      */\n      e => e instanceof ActivationEnd));\n      /** @type {?} */\n\n      const navigationEndEvents = router.events.pipe(filter(\n      /**\n      * @param {?} e\n      * @return {?}\n      */\n      e => e instanceof NavigationEnd));\n      this.disposable = navigationEndEvents.pipe(withLatestFrom(activationEndEvents), switchMap(\n      /**\n      * @param {?} __0\n      * @return {?}\n      */\n      ([navigationEnd, activationEnd]) => {\n        // SEMVER: start using optional chains and nullish coalescing once we support newer typescript\n\n        /** @type {?} */\n        const page_path = navigationEnd.url;\n        /** @type {?} */\n\n        const screen_name = activationEnd.snapshot.routeConfig && activationEnd.snapshot.routeConfig.path || page_path;\n        /** @type {?} */\n\n        const params = {\n          [SCREEN_NAME_KEY]: screen_name,\n          [PAGE_PATH_KEY]: page_path,\n          [FIREBASE_EVENT_ORIGIN_KEY]: EVENT_ORIGIN_AUTO,\n          [FIREBASE_SCREEN_NAME_KEY]: screen_name,\n          [OUTLET_KEY]: activationEnd.snapshot.outlet\n        };\n\n        if (title) {\n          params[PAGE_TITLE_KEY] = title.getTitle();\n        }\n        /** @type {?} */\n\n\n        const component = activationEnd.snapshot.component;\n        /** @type {?} */\n\n        const routeConfig = activationEnd.snapshot.routeConfig;\n        /** @type {?} */\n\n        const loadChildren = routeConfig && routeConfig.loadChildren; // TODO figure out how to handle minification\n\n        if (typeof loadChildren === \"string\") {\n          // SEMVER: this is the older lazy load style \"./path#ClassName\", drop this when we drop old ng\n          // TODO is it worth seeing if I can look up the component factory selector from the module name?\n          // it's lazy so it's not registered with componentFactoryResolver yet... seems a pain for a depreciated style\n          return of(Object.assign(Object.assign({}, params), {\n            [SCREEN_CLASS_KEY]: loadChildren.split('#')[1]\n          }));\n        } else if (typeof component === 'string') {\n          return of(Object.assign(Object.assign({}, params), {\n            [SCREEN_CLASS_KEY]: component\n          }));\n        } else if (component) {\n          /** @type {?} */\n          const componentFactory = componentFactoryResolver.resolveComponentFactory(component);\n          return of(Object.assign(Object.assign({}, params), {\n            [SCREEN_CLASS_KEY]: componentFactory.selector\n          }));\n        } else if (loadChildren) {\n          /** @type {?} */\n          const loadedChildren = loadChildren();\n          /** @type {?} */\n\n          var loadedChildren$ = loadedChildren instanceof Observable ? loadedChildren : from(Promise.resolve(loadedChildren));\n          return loadedChildren$.pipe(map(\n          /**\n          * @param {?} lazyModule\n          * @return {?}\n          */\n          lazyModule => {\n            if (lazyModule instanceof NgModuleFactory) {\n              // AOT create an injector\n\n              /** @type {?} */\n              const moduleRef = lazyModule.create(injector); // INVESTIGATE is this the right way to get at the matching route?\n\n              /** @type {?} */\n\n              const routes = moduleRef.injector.get(ROUTES);\n              /** @type {?} */\n\n              const component = routes[0][0].component;\n\n              try {\n                /** @type {?} */\n                const componentFactory = moduleRef.componentFactoryResolver.resolveComponentFactory(\n                /** @type {?} */\n                component);\n                return Object.assign(Object.assign({}, params), {\n                  [SCREEN_CLASS_KEY]: componentFactory.selector\n                });\n              } catch (_) {\n                return Object.assign(Object.assign({}, params), {\n                  [SCREEN_CLASS_KEY]: DEFAULT_SCREEN_CLASS\n                });\n              }\n            } else {\n              // JIT look at the annotations\n              // INVESTIGATE are there public APIs for this stuff?\n\n              /** @type {?} */\n              const declarations = [].concat.apply([], (lazyModule[ANNOTATIONS] || []).map(\n              /**\n              * @param {?} f\n              * @return {?}\n              */\n              f => f.declarations));\n              /** @type {?} */\n\n              const selectors = [].concat.apply([], declarations.map(\n              /**\n              * @param {?} c\n              * @return {?}\n              */\n              c => (c[ANNOTATIONS] || []).map(\n              /**\n              * @param {?} f\n              * @return {?}\n              */\n              f => f.selector))); // should I just be grabbing the selector like this or should i match against the route component?\n              //   const routerModule = lazyModule.ngInjectorDef.imports.find(i => i.ngModule && ....);\n              //   const route = routerModule.providers[0].find(p => p.provide == ROUTES).useValue[0];\n\n              return Object.assign(Object.assign({}, params), {\n                [SCREEN_CLASS_KEY]: selectors[0] || DEFAULT_SCREEN_CLASS\n              });\n            }\n          }));\n        } else {\n          return of(Object.assign(Object.assign({}, params), {\n            [SCREEN_CLASS_KEY]: DEFAULT_SCREEN_CLASS\n          }));\n        }\n      }), map(\n      /**\n      * @param {?} params\n      * @return {?}\n      */\n      params => Object.assign({\n        [FIREBASE_SCREEN_CLASS_KEY]: params[SCREEN_CLASS_KEY],\n        [FIREBASE_SCREEN_INSTANCE_ID_KEY]: getScreenInstanceID(params)\n      }, params)), tap(\n      /**\n      * @param {?} params\n      * @return {?}\n      */\n      params => {\n        // TODO perhaps I can be smarter about this, bubble events up to the nearest outlet?\n        if (params[OUTLET_KEY] == NG_PRIMARY_OUTLET) {\n          analytics.setCurrentScreen(params[SCREEN_NAME_KEY]);\n          analytics.updateConfig({\n            [PAGE_PATH_KEY]: params[PAGE_PATH_KEY],\n            [SCREEN_CLASS_KEY]: params[SCREEN_CLASS_KEY]\n          });\n\n          if (title) {\n            analytics.updateConfig({\n              [PAGE_TITLE_KEY]: params[PAGE_TITLE_KEY]\n            });\n          }\n        }\n      }), groupBy(\n      /**\n      * @param {?} params\n      * @return {?}\n      */\n      params => params[OUTLET_KEY]), mergeMap(\n      /**\n      * @param {?} group\n      * @return {?}\n      */\n      group => group.pipe(startWith(undefined), pairwise())), map(\n      /**\n      * @param {?} __0\n      * @return {?}\n      */\n      ([prior, current]) => prior ? Object.assign({\n        [FIREBASE_PREVIOUS_SCREEN_CLASS_KEY]: prior[SCREEN_CLASS_KEY],\n        [FIREBASE_PREVIOUS_SCREEN_NAME_KEY]: prior[SCREEN_NAME_KEY],\n        [FIREBASE_PREVIOUS_SCREEN_INSTANCE_ID_KEY]: prior[FIREBASE_SCREEN_INSTANCE_ID_KEY]\n      },\n      /** @type {?} */\n      current) :\n      /** @type {?} */\n      current), tap(\n      /**\n      * @param {?} params\n      * @return {?}\n      */\n      params => debugModeEnabled && console.info(SCREEN_VIEW_EVENT, params)), tap(\n      /**\n      * @param {?} params\n      * @return {?}\n      */\n      params => zone.runOutsideAngular(\n      /**\n      * @return {?}\n      */\n      () => analytics.logEvent(SCREEN_VIEW_EVENT, params)))).subscribe();\n    });\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    if (this.disposable) {\n      this.disposable.unsubscribe();\n    }\n  }\n\n}\n\nScreenTrackingService.ɵfac = function ScreenTrackingService_Factory(t) {\n  return new (t || ScreenTrackingService)(ɵngcc0.ɵɵinject(AngularFireAnalytics), ɵngcc0.ɵɵinject(ɵngcc1.Router, 8), ɵngcc0.ɵɵinject(ɵngcc2.Title, 8), ɵngcc0.ɵɵinject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(DEBUG_MODE, 8), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc0.Injector));\n};\n/** @nocollapse */\n\n\nScreenTrackingService.ctorParameters = () => [{\n  type: AngularFireAnalytics\n}, {\n  type: Router,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: Title,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: ComponentFactoryResolver\n}, {\n  type: Object,\n  decorators: [{\n    type: Inject,\n    args: [PLATFORM_ID]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [DEBUG_MODE]\n  }]\n}, {\n  type: NgZone\n}, {\n  type: Injector\n}];\n/** @nocollapse */\n\n\nScreenTrackingService.ɵprov = ɵɵdefineInjectable({\n  factory: function ScreenTrackingService_Factory() {\n    return new ScreenTrackingService(ɵɵinject(AngularFireAnalytics), ɵɵinject(Router, 8), ɵɵinject(Title, 8), ɵɵinject(ComponentFactoryResolver), ɵɵinject(PLATFORM_ID), ɵɵinject(DEBUG_MODE, 8), ɵɵinject(NgZone), ɵɵinject(INJECTOR));\n  },\n  token: ScreenTrackingService,\n  providedIn: \"any\"\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(ScreenTrackingService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'any'\n    }]\n  }], function () {\n    return [{\n      type: AngularFireAnalytics\n    }, {\n      type: ɵngcc1.Router,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc2.Title,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc0.ComponentFactoryResolver\n    }, {\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DEBUG_MODE]\n      }]\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc0.Injector\n    }];\n  }, null);\n})();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  ScreenTrackingService.prototype.disposable;\n}\n\nclass UserTrackingService {\n  // TODO a user properties injector\n\n  /**\n   * @param {?} analytics\n   * @param {?} zone\n   * @param {?} platformId\n   */\n  constructor(analytics, zone, platformId) {\n    /** @type {?} */\n    const schedulers = new ɵAngularFireSchedulers(zone);\n\n    if (!isPlatformServer(platformId)) {\n      zone.runOutsideAngular(\n      /**\n      * @return {?}\n      */\n      () => {\n        // @ts-ignore zap the import in the UMD\n        this.disposable = from(import('firebase/auth')).pipe(observeOn(schedulers.outsideAngular), switchMap(\n        /**\n        * @return {?}\n        */\n        () => analytics.app), map(\n        /**\n        * @param {?} app\n        * @return {?}\n        */\n        app => app.auth()), switchMap(\n        /**\n        * @param {?} auth\n        * @return {?}\n        */\n        auth => new Observable(auth.onAuthStateChanged.bind(auth))), switchMap(\n        /**\n        * @param {?} user\n        * @return {?}\n        */\n        user => analytics.setUserId(user ? user.uid :\n        /** @type {?} */\n        null))).subscribe();\n      });\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    if (this.disposable) {\n      this.disposable.unsubscribe();\n    }\n  }\n\n}\n\nUserTrackingService.ɵfac = function UserTrackingService_Factory(t) {\n  return new (t || UserTrackingService)(ɵngcc0.ɵɵinject(AngularFireAnalytics), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(PLATFORM_ID));\n};\n/** @nocollapse */\n\n\nUserTrackingService.ctorParameters = () => [{\n  type: AngularFireAnalytics\n}, {\n  type: NgZone\n}, {\n  type: Object,\n  decorators: [{\n    type: Inject,\n    args: [PLATFORM_ID]\n  }]\n}];\n/** @nocollapse */\n\n\nUserTrackingService.ɵprov = ɵɵdefineInjectable({\n  factory: function UserTrackingService_Factory() {\n    return new UserTrackingService(ɵɵinject(AngularFireAnalytics), ɵɵinject(NgZone), ɵɵinject(PLATFORM_ID));\n  },\n  token: UserTrackingService,\n  providedIn: \"any\"\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(UserTrackingService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'any'\n    }]\n  }], function () {\n    return [{\n      type: AngularFireAnalytics\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, null);\n})();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  UserTrackingService.prototype.disposable;\n} // this is an INT64 in iOS/Android but use INT32 cause javascript\n\n/** @type {?} */\n\n\nlet nextScreenInstanceID = Math.floor(Math.random() * (Math.pow(2, 32) - 1)) - Math.pow(2, 31);\n/** @type {?} */\n\nconst knownScreenInstanceIDs = {};\n/** @type {?} */\n\nconst getScreenInstanceID =\n/**\n* @param {?} params\n* @return {?}\n*/\nparams => {\n  // unique the screen class against the outlet name\n\n  /** @type {?} */\n  const screenInstanceKey = [params[SCREEN_CLASS_KEY], params[OUTLET_KEY]].join(SCREEN_INSTANCE_DELIMITER);\n\n  if (knownScreenInstanceIDs.hasOwnProperty(screenInstanceKey)) {\n    return knownScreenInstanceIDs[screenInstanceKey];\n  } else {\n    /** @type {?} */\n    const ret = nextScreenInstanceID++;\n    knownScreenInstanceIDs[screenInstanceKey] = ret;\n    return ret;\n  }\n};\n\nconst ɵ0 = getScreenInstanceID;\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nclass AngularFireAnalyticsModule {\n  /**\n   * @param {?} analytics\n   * @param {?} screenTracking\n   * @param {?} userTracking\n   */\n  constructor(analytics, screenTracking, userTracking) {\n    // calling anything on analytics will eagerly load the SDK\n    analytics.app;\n  }\n\n}\n\nAngularFireAnalyticsModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: AngularFireAnalyticsModule\n});\nAngularFireAnalyticsModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function AngularFireAnalyticsModule_Factory(t) {\n    return new (t || AngularFireAnalyticsModule)(ɵngcc0.ɵɵinject(AngularFireAnalytics), ɵngcc0.ɵɵinject(ScreenTrackingService, 8), ɵngcc0.ɵɵinject(UserTrackingService, 8));\n  },\n  providers: [AngularFireAnalytics]\n});\n/** @nocollapse */\n\nAngularFireAnalyticsModule.ctorParameters = () => [{\n  type: AngularFireAnalytics\n}, {\n  type: ScreenTrackingService,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: UserTrackingService,\n  decorators: [{\n    type: Optional\n  }]\n}];\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AngularFireAnalyticsModule, [{\n    type: NgModule,\n    args: [{\n      providers: [AngularFireAnalytics]\n    }]\n  }], function () {\n    return [{\n      type: AngularFireAnalytics\n    }, {\n      type: ScreenTrackingService,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: UserTrackingService,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { APP_NAME, APP_VERSION, AngularFireAnalytics, AngularFireAnalyticsModule, COLLECTION_ENABLED, CONFIG, DEBUG_MODE, ScreenTrackingService, UserTrackingService };","map":{"version":3,"sources":["ng:/@angular/fire/analytics/analytics.ts","ng:/@angular/fire/analytics/analytics.service.ts","ng:/@angular/fire/analytics/analytics.module.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Inject, Optional, NgZone, InjectionToken, PLATFORM_ID } from '@angular/core';\nimport { of, empty, Observable } from 'rxjs';\nimport { isPlatformBrowser } from '@angular/common';\nimport { map, tap, shareReplay, switchMap, observeOn } from 'rxjs/operators';\nimport { FirebaseAppConfig, FirebaseOptions, ɵAngularFireSchedulers, ɵlazySDKProxy, FIREBASE_OPTIONS, FIREBASE_APP_NAME, ɵfirebaseAppFactory, ɵPromiseProxy } from '@angular/fire';\nimport { analytics } from 'firebase';\n\nexport interface Config {[key:string]: any};\n\nexport const COLLECTION_ENABLED = new InjectionToken<boolean>('angularfire2.analytics.analyticsCollectionEnabled');\nexport const APP_VERSION = new InjectionToken<string>('angularfire2.analytics.appVersion');\nexport const APP_NAME = new InjectionToken<string>('angularfire2.analytics.appName');\nexport const DEBUG_MODE = new InjectionToken<boolean>('angularfire2.analytics.debugMode');\nexport const CONFIG = new InjectionToken<Config>('angularfire2.analytics.config');\n\nconst APP_NAME_KEY = 'app_name';\nconst APP_VERSION_KEY = 'app_version';\nconst DEBUG_MODE_KEY = 'debug_mode';\nconst ANALYTICS_ID_FIELD = 'measurementId';\nconst GTAG_CONFIG_COMMAND = 'config';\nconst GTAG_FUNCTION_NAME = 'gtag';\nconst DATA_LAYER_NAME = 'dataLayer';\n\nexport interface AngularFireAnalytics extends ɵPromiseProxy<analytics.Analytics> {};\n\nlet gtag: (...args: any[]) => void;\nlet analyticsInitialized: Promise<void>;\nconst analyticsInstanceCache: {[key:string]: Observable<analytics.Analytics>} = {};\n\n@Injectable({\n  providedIn: 'any'\n})\nexport class AngularFireAnalytics {\n\n  async updateConfig(config: Config) {\n    await analyticsInitialized;\n    gtag(GTAG_CONFIG_COMMAND, this.options[ANALYTICS_ID_FIELD], { ...config, update: true });\n  };\n\n  constructor(\n    @Inject(FIREBASE_OPTIONS) private options:FirebaseOptions,\n    @Optional() @Inject(FIREBASE_APP_NAME) nameOrConfig:string|FirebaseAppConfig|null|undefined,\n    @Optional() @Inject(COLLECTION_ENABLED) analyticsCollectionEnabled:boolean|null,\n    @Optional() @Inject(APP_VERSION) providedAppVersion:string|null,\n    @Optional() @Inject(APP_NAME) providedAppName:string|null,\n    @Optional() @Inject(DEBUG_MODE) debugModeEnabled:boolean|null,\n    @Optional() @Inject(CONFIG) providedConfig:Config|null,\n    @Inject(PLATFORM_ID) platformId:Object,\n    zone: NgZone\n  ) {\n\n    if (!analyticsInitialized) {\n      if (isPlatformBrowser(platformId)) {\n        gtag = window[GTAG_FUNCTION_NAME] || function() { window[DATA_LAYER_NAME].push(arguments) };\n        window[DATA_LAYER_NAME] = window[DATA_LAYER_NAME] || [];\n        analyticsInitialized = zone.runOutsideAngular(() =>\n          new Promise(resolve => {\n            window[GTAG_FUNCTION_NAME] = (...args: any[]) => {\n              if (args[0] == 'js') { resolve() }\n              gtag(...args);\n            }\n          })\n        );\n      } else {\n        gtag = () => {};\n        analyticsInitialized = Promise.resolve();\n      }\n    }\n\n    let analytics = analyticsInstanceCache[options[ANALYTICS_ID_FIELD]];\n    if (!analytics) {\n      analytics = of(undefined).pipe(\n        observeOn(new ɵAngularFireSchedulers(zone).outsideAngular),\n        switchMap(() => isPlatformBrowser(platformId) ? import('firebase/analytics') : empty()),\n        map(() => ɵfirebaseAppFactory(options, zone, nameOrConfig)),\n        map(app => app.analytics()),\n        tap(analytics => {\n          if (analyticsCollectionEnabled === false) { analytics.setAnalyticsCollectionEnabled(false) }\n        }),\n        shareReplay({ bufferSize: 1, refCount: false }),\n      );\n      analyticsInstanceCache[options[ANALYTICS_ID_FIELD]] = analytics;\n    }\n\n    if (providedConfig)     { this.updateConfig(providedConfig) }\n    if (providedAppName)    { this.updateConfig({ [APP_NAME_KEY]:    providedAppName }) }\n    if (providedAppVersion) { this.updateConfig({ [APP_VERSION_KEY]: providedAppVersion }) }\n    if (debugModeEnabled)   { this.updateConfig({ [DEBUG_MODE_KEY]:  1 }) }\n\n    return ɵlazySDKProxy(this, analytics, zone);\n\n  }\n\n}","import { Injectable, Optional, NgZone, OnDestroy, ComponentFactoryResolver, Inject, PLATFORM_ID, Injector, NgModuleFactory } from '@angular/core';\nimport { Subscription, from, Observable, of } from 'rxjs';\nimport { filter, withLatestFrom, switchMap, map, tap, pairwise, startWith, groupBy, mergeMap, observeOn } from 'rxjs/operators';\nimport { Router, NavigationEnd, ActivationEnd, ROUTES } from '@angular/router';\nimport { ɵAngularFireSchedulers } from '@angular/fire';\nimport { AngularFireAnalytics, DEBUG_MODE } from './analytics';\nimport { User } from 'firebase/app';\nimport { Title } from '@angular/platform-browser';\nimport { isPlatformBrowser, isPlatformServer } from '@angular/common';\n\nconst FIREBASE_EVENT_ORIGIN_KEY = 'firebase_event_origin';\nconst FIREBASE_PREVIOUS_SCREEN_CLASS_KEY = 'firebase_previous_class';\nconst FIREBASE_PREVIOUS_SCREEN_INSTANCE_ID_KEY  = 'firebase_previous_id';\nconst FIREBASE_PREVIOUS_SCREEN_NAME_KEY = 'firebase_previous_screen';\nconst FIREBASE_SCREEN_CLASS_KEY = 'firebase_screen_class';\nconst FIREBASE_SCREEN_INSTANCE_ID_KEY = 'firebase_screen_id';\nconst FIREBASE_SCREEN_NAME_KEY = 'firebase_screen';\nconst OUTLET_KEY = 'outlet';\nconst PAGE_PATH_KEY = 'page_path';\nconst PAGE_TITLE_KEY = 'page_title';\nconst SCREEN_CLASS_KEY = 'screen_class';\nconst SCREEN_NAME_KEY = 'screen_name';\n\nconst SCREEN_VIEW_EVENT = 'screen_view';\nconst EVENT_ORIGIN_AUTO = 'auto';\nconst DEFAULT_SCREEN_CLASS = '???';\nconst NG_PRIMARY_OUTLET = 'primary';\nconst SCREEN_INSTANCE_DELIMITER = '#';\n\nconst ANNOTATIONS = '__annotations__';\n\n@Injectable({\n    providedIn: 'any'\n})\nexport class ScreenTrackingService implements OnDestroy {\n\n    private disposable: Subscription|undefined;\n  \n    constructor(\n      analytics: AngularFireAnalytics,\n      @Optional() router:Router,\n      @Optional() title:Title,\n      componentFactoryResolver: ComponentFactoryResolver,\n      @Inject(PLATFORM_ID) platformId:Object,\n      @Optional() @Inject(DEBUG_MODE) debugModeEnabled:boolean|null,\n      zone: NgZone,\n      injector: Injector\n    ) {\n        if (!router || !isPlatformBrowser(platformId)) { return this }\n        zone.runOutsideAngular(() => {\n            const activationEndEvents = router.events.pipe(filter<ActivationEnd>(e => e instanceof ActivationEnd));\n            const navigationEndEvents = router.events.pipe(filter<NavigationEnd>(e => e instanceof NavigationEnd));\n            this.disposable = navigationEndEvents.pipe(\n                withLatestFrom(activationEndEvents),\n                switchMap(([navigationEnd, activationEnd]) => {\n                    // SEMVER: start using optional chains and nullish coalescing once we support newer typescript\n                    const page_path = navigationEnd.url;\n                    const screen_name = activationEnd.snapshot.routeConfig && activationEnd.snapshot.routeConfig.path || page_path;\n                    const params = {\n                        [SCREEN_NAME_KEY]: screen_name,\n                        [PAGE_PATH_KEY]: page_path,\n                        [FIREBASE_EVENT_ORIGIN_KEY]: EVENT_ORIGIN_AUTO,\n                        [FIREBASE_SCREEN_NAME_KEY]: screen_name,\n                        [OUTLET_KEY]: activationEnd.snapshot.outlet\n                    };\n                    if (title) {\n                        params[PAGE_TITLE_KEY] = title.getTitle()\n                    }\n                    const component = activationEnd.snapshot.component;\n                    const routeConfig = activationEnd.snapshot.routeConfig;\n                    const loadChildren = routeConfig && routeConfig.loadChildren;\n                    // TODO figure out how to handle minification\n                    if (typeof loadChildren === \"string\") {\n                        // SEMVER: this is the older lazy load style \"./path#ClassName\", drop this when we drop old ng\n                        // TODO is it worth seeing if I can look up the component factory selector from the module name?\n                        // it's lazy so it's not registered with componentFactoryResolver yet... seems a pain for a depreciated style\n                        return of({...params, [SCREEN_CLASS_KEY]: loadChildren.split('#')[1]});\n                    } else if (typeof component === 'string') {\n                        return of({...params, [SCREEN_CLASS_KEY]: component });\n                    } else if (component) {\n                        const componentFactory = componentFactoryResolver.resolveComponentFactory(component);\n                        return of({...params, [SCREEN_CLASS_KEY]: componentFactory.selector });\n                    } else if (loadChildren) {\n                        const loadedChildren = loadChildren();\n                        var loadedChildren$: Observable<any> = (loadedChildren instanceof Observable) ? loadedChildren : from(Promise.resolve(loadedChildren));\n                        return loadedChildren$.pipe(\n                          map(lazyModule => {\n                            if (lazyModule instanceof NgModuleFactory) {\n                              // AOT create an injector\n                              const moduleRef = lazyModule.create(injector);\n                              // INVESTIGATE is this the right way to get at the matching route?\n                              const routes = moduleRef.injector.get(ROUTES);\n                              const component = routes[0][0].component; // should i just be grabbing 0-0 here?\n                              try {\n                                const componentFactory = moduleRef.componentFactoryResolver.resolveComponentFactory(component!);\n                                return {...params, [SCREEN_CLASS_KEY]: componentFactory.selector};\n                              } catch(_) {\n                                return {...params, [SCREEN_CLASS_KEY]: DEFAULT_SCREEN_CLASS};\n                              }\n                            } else {\n                              // JIT look at the annotations\n                              // INVESTIGATE are there public APIs for this stuff?\n                              const declarations = [].concat.apply([], (lazyModule[ANNOTATIONS] || []).map((f:any) => f.declarations));\n                              const selectors = [].concat.apply([], declarations.map((c:any) => (c[ANNOTATIONS] || []).map((f:any) => f.selector)));\n                              // should I just be grabbing the selector like this or should i match against the route component?\n                              //   const routerModule = lazyModule.ngInjectorDef.imports.find(i => i.ngModule && ....);\n                              //   const route = routerModule.providers[0].find(p => p.provide == ROUTES).useValue[0];\n                              return {...params, [SCREEN_CLASS_KEY]: selectors[0] || DEFAULT_SCREEN_CLASS};\n                            }\n                          })\n                        );\n                    } else {\n                        return of({...params, [SCREEN_CLASS_KEY]: DEFAULT_SCREEN_CLASS});\n                    }\n                }),\n                map(params => ({\n                    [FIREBASE_SCREEN_CLASS_KEY]: params[SCREEN_CLASS_KEY],\n                    [FIREBASE_SCREEN_INSTANCE_ID_KEY]: getScreenInstanceID(params),\n                    ...params\n                })),\n                tap(params => {\n                    // TODO perhaps I can be smarter about this, bubble events up to the nearest outlet?\n                    if (params[OUTLET_KEY] == NG_PRIMARY_OUTLET) {\n                        analytics.setCurrentScreen(params[SCREEN_NAME_KEY]);\n                        analytics.updateConfig({\n                            [PAGE_PATH_KEY]: params[PAGE_PATH_KEY],\n                            [SCREEN_CLASS_KEY]: params[SCREEN_CLASS_KEY]\n                        });\n                        if (title) {\n                            analytics.updateConfig({ [PAGE_TITLE_KEY]: params[PAGE_TITLE_KEY] })\n                        }\n                    }\n                }),\n                groupBy(params => params[OUTLET_KEY]),\n                mergeMap(group => group.pipe(startWith(undefined), pairwise())),\n                map(([prior, current]) => prior ? {\n                    [FIREBASE_PREVIOUS_SCREEN_CLASS_KEY]: prior[SCREEN_CLASS_KEY],\n                    [FIREBASE_PREVIOUS_SCREEN_NAME_KEY]: prior[SCREEN_NAME_KEY],\n                    [FIREBASE_PREVIOUS_SCREEN_INSTANCE_ID_KEY]: prior[FIREBASE_SCREEN_INSTANCE_ID_KEY],\n                    ...current!\n                } : current!),\n                tap(params => debugModeEnabled && console.info(SCREEN_VIEW_EVENT, params)),\n                tap(params => zone.runOutsideAngular(() => analytics.logEvent(SCREEN_VIEW_EVENT, params)))\n            ).subscribe();\n        });\n    }\n  \n    ngOnDestroy() {\n      if (this.disposable) { this.disposable.unsubscribe(); }\n    }\n  \n}\n\n@Injectable({\n    providedIn: 'any'\n})\nexport class UserTrackingService implements OnDestroy {\n\n    private disposable: Subscription|undefined;\n\n    // TODO a user properties injector\n    constructor(\n        analytics: AngularFireAnalytics,\n        zone: NgZone,\n        @Inject(PLATFORM_ID) platformId:Object\n    ) {\n        const schedulers = new ɵAngularFireSchedulers(zone);\n\n        if (!isPlatformServer(platformId)) {\n            zone.runOutsideAngular(() => {\n                // @ts-ignore zap the import in the UMD\n                this.disposable = from(import('firebase/auth')).pipe(\n                    observeOn(schedulers.outsideAngular),\n                    switchMap(() => analytics.app),\n                    map(app => app.auth()),\n                    switchMap(auth => new Observable<User|null>(auth.onAuthStateChanged.bind(auth))),\n                    switchMap(user => analytics.setUserId(user ? user.uid : null!))\n                ).subscribe();\n            });\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.disposable) { this.disposable.unsubscribe(); }\n    }\n}\n\n// this is an INT64 in iOS/Android but use INT32 cause javascript\nlet nextScreenInstanceID = Math.floor(Math.random() * (2**32 - 1)) - 2**31;\n\nconst knownScreenInstanceIDs: {[key:string]: number} = {};\n\nconst getScreenInstanceID = (params:{[key:string]: any}) => {\n    // unique the screen class against the outlet name\n    const screenInstanceKey = [\n        params[SCREEN_CLASS_KEY],\n        params[OUTLET_KEY]\n    ].join(SCREEN_INSTANCE_DELIMITER);\n    if (knownScreenInstanceIDs.hasOwnProperty(screenInstanceKey)) {\n        return knownScreenInstanceIDs[screenInstanceKey];\n    } else {\n        const ret = nextScreenInstanceID++;\n        knownScreenInstanceIDs[screenInstanceKey] = ret;\n        return ret;\n    }\n}","import { NgModule, Optional } from '@angular/core';\nimport { UserTrackingService, ScreenTrackingService } from './analytics.service';\nimport { AngularFireAnalytics } from './analytics';\n\n@NgModule({\n  providers: [ AngularFireAnalytics ]\n})\nexport class AngularFireAnalyticsModule {\n  constructor(\n    analytics: AngularFireAnalytics,\n    @Optional() screenTracking: ScreenTrackingService,\n    @Optional() userTracking: UserTrackingService\n  ) {\n    // calling anything on analytics will eagerly load the SDK\n    analytics.app;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}