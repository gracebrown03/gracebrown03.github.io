{"ast":null,"code":"import { Injectable } from \"@angular/core\";\nimport { Observable } from \"rxjs\";\nimport { catchError } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DataService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = \"assets/data/\";\n  }\n\n  getExperiences() {\n    return this.http.get(this.baseUrl + \"experiences.json\").pipe(catchError(this.handleError));\n  }\n\n  getAbout() {\n    return this.http.get(this.baseUrl + \"about.json\").pipe(catchError(this.handleError));\n  }\n\n  getPosts() {\n    return this.http.get(this.baseUrl + \"posts.json\").pipe(catchError(this.handleError));\n  }\n\n  handleError(error) {\n    console.error(\"server error:\", error);\n\n    if (error.error instanceof Error) {\n      const errMessage = error.error.message;\n      return Observable.throw(errMessage); // Use the following instead if using lite-server\n      // return Observable.throw(err.text() || \"backend server error\");\n    }\n\n    return Observable.throw(error || \"Node.js server error\");\n  }\n\n}\n\nDataService.ɵfac = function DataService_Factory(t) {\n  return new (t || DataService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nDataService.ɵprov = i0.ɵɵdefineInjectable({\n  token: DataService,\n  factory: DataService.ɵfac\n});\n/*@__PURE__*/\n\n(function () {\n  i0.ɵsetClassMetadata(DataService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1.HttpClient\n    }];\n  }, null);\n})();","map":{"version":3,"sources":["/Users/gracebrown/Desktop/hashtag_cyberstar/gracebrown03.github.io/src/app/core/data.service.ts"],"names":[],"mappings":"AAAA,SAAS,UAAT,QAA2B,eAA3B;AAGA,SAAS,UAAT,QAA2B,MAA3B;AACA,SAAS,UAAT,QAA2B,gBAA3B;;;AAOA,OAAM,MAAO,WAAP,CAAkB;AAIpB,EAAA,WAAA,CAAoB,IAApB,EAAoC;AAAhB,SAAA,IAAA,GAAA,IAAA;AAFpB,SAAA,OAAA,GAAkB,cAAlB;AAEyC;;AAEzC,EAAA,cAAc,GAAA;AACV,WAAO,KAAK,IAAL,CAAU,GAAV,CAA6B,KAAK,OAAL,GAAe,kBAA5C,EACF,IADE,CAEC,UAAU,CAAC,KAAK,WAAN,CAFX,CAAP;AAIH;;AAED,EAAA,QAAQ,GAAA;AACN,WAAO,KAAK,IAAL,CAAU,GAAV,CAAsB,KAAK,OAAL,GAAe,YAArC,EACF,IADE,CAEC,UAAU,CAAC,KAAK,WAAN,CAFX,CAAP;AAID;;AAED,EAAA,QAAQ,GAAA;AACJ,WAAO,KAAK,IAAL,CAAU,GAAV,CAAuB,KAAK,OAAL,GAAe,YAAtC,EACF,IADE,CAEC,UAAU,CAAC,KAAK,WAAN,CAFX,CAAP;AAIH;;AAEO,EAAA,WAAW,CAAC,KAAD,EAAW;AAC5B,IAAA,OAAO,CAAC,KAAR,CAAc,eAAd,EAA+B,KAA/B;;AACA,QAAI,KAAK,CAAC,KAAN,YAAuB,KAA3B,EAAkC;AAC9B,YAAM,UAAU,GAAG,KAAK,CAAC,KAAN,CAAY,OAA/B;AACA,aAAO,UAAU,CAAC,KAAX,CAAiB,UAAjB,CAAP,CAF8B,CAG9B;AACA;AACH;;AACD,WAAO,UAAU,CAAC,KAAX,CAAiB,KAAK,IAAI,sBAA1B,CAAP;AACD;;AApCmB;;;mBAAX,W,EAAW,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,UAAA,C;AAAA,C;;;SAAX,W;AAAW,EAAA,OAAA,EAAX,WAAW,CAAA;;;;;uBAAX,W,EAAW,CAAA;UADvB;AACuB,GAAA,C","sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\n\nimport { Observable } from \"rxjs\";\nimport { catchError } from \"rxjs/operators\";\n\nimport { IExperience } from \"../experience/experience-interfaces\";\nimport { IAbout } from \"../about/about-interfaces\";\nimport { IPost } from \"../posts/posts-interfaces\";\n\n@Injectable()\nexport class DataService {\n\n    baseUrl: string = \"assets/data/\";\n    \n    constructor(private http: HttpClient) { }\n\n    getExperiences() : Observable<IExperience[]> {\n        return this.http.get<IExperience[]>(this.baseUrl + \"experiences.json\")\n            .pipe(\n                catchError(this.handleError)\n            );\n    }\n    \n    getAbout() : Observable<IAbout> {\n      return this.http.get<IAbout>(this.baseUrl + \"about.json\")\n          .pipe(\n              catchError(this.handleError)\n          );\n    }\n\n    getPosts() : Observable<IPost[]> {\n        return this.http.get<IPost[]>(this.baseUrl + \"posts.json\")\n            .pipe(\n                catchError(this.handleError)\n            );\n    }\n\n    private handleError(error: any) {\n      console.error(\"server error:\", error);\n      if (error.error instanceof Error) {\n          const errMessage = error.error.message;\n          return Observable.throw(errMessage);\n          // Use the following instead if using lite-server\n          // return Observable.throw(err.text() || \"backend server error\");\n      }\n      return Observable.throw(error || \"Node.js server error\");\n    }\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}