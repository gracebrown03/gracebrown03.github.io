{"ast":null,"code":"import { __awaiter, __decorate, __metadata } from 'tslib';\nimport { ɵɵdefineInjectable, Injectable } from '@angular/core';\nimport * as ɵngcc0 from '@angular/core';\nlet NgNavigatorShareService = class NgNavigatorShareService {\n  constructor() {\n    this.webNavigator = null;\n    this.webNavigator = window.navigator;\n  }\n\n  canShare() {\n    return this.webNavigator !== null && this.webNavigator.share !== undefined;\n  }\n\n  share({\n    title,\n    text,\n    url\n  }) {\n    return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n      if (this.webNavigator !== null && this.webNavigator.share !== undefined) {\n        if ((text === undefined || text === null) && (url === undefined || url === null)) {\n          console.warn(`text and url both can't be empty, at least provide either text or url`);\n        } else {\n          try {\n            const isShared = yield this.webNavigator.share({\n              title: title,\n              text: text,\n              url: url\n            });\n            resolve({\n              shared: true\n            });\n          } catch (error) {\n            reject({\n              shared: false,\n              error: error\n            });\n          }\n        }\n      } else {\n        reject({\n          shared: false,\n          error: `This service/api is not supported in your Browser`\n        });\n      }\n    }));\n  }\n\n};\n\nNgNavigatorShareService.ɵfac = function NgNavigatorShareService_Factory(t) {\n  return new (t || NgNavigatorShareService)();\n};\n\nNgNavigatorShareService.ɵprov = ɵɵdefineInjectable({\n  factory: function NgNavigatorShareService_Factory() {\n    return new NgNavigatorShareService();\n  },\n  token: NgNavigatorShareService,\n  providedIn: \"root\"\n});\nNgNavigatorShareService = __decorate([__metadata(\"design:paramtypes\", [])], NgNavigatorShareService);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NgNavigatorShareService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n/*\r\n * Public API Surface of ng-navigator-share\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { NgNavigatorShareService };","map":{"version":3,"sources":["ng:/ng-navigator-share/lib/ng-navigator-share/ng-navigator-share.service.ts","ng:/ng-navigator-share/public_api.ts"],"names":[],"mappings":";;;IAKa,uBAAuB,GAApC,MAAa,uBAAb,CAAoC;AAElC,EAAA,WAAA,GAAA;AADA,SAAA,YAAA,GAAoB,IAApB;AAEE,SAAK,YAAL,GAAoB,MAAM,CAAC,SAA3B;AACD;;AAED,EAAA,QAAQ,GAAA;AACN,WAAO,KAAK,YAAL,KAAsB,IAAtB,IAA8B,KAAK,YAAL,CAAkB,KAAlB,KAA4B,SAAjE;AACD;;AAED,EAAA,KAAK,CAAC;AAAE,IAAA,KAAF;AAAS,IAAA,IAAT;AAAe,IAAA;AAAf,GAAD,EAAqE;AACxE,WAAO,IAAI,OAAJ,CAAY,CAAO,OAAP,EAAgB,MAAhB,KAAsB,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AACvC,UAAI,KAAK,YAAL,KAAsB,IAAtB,IAA8B,KAAK,YAAL,CAAkB,KAAlB,KAA4B,SAA9D,EAAyE;AACvE,YACE,CAAC,IAAI,KAAK,SAAT,IAAsB,IAAI,KAAK,IAAhC,MACC,GAAG,KAAK,SAAR,IAAqB,GAAG,KAAK,IAD9B,CADF,EAGE;AACA,UAAA,OAAO,CAAC,IAAR,CAAa,uEAAb;AACD,SALD,MAKO;AACL,cAAI;AACF,kBAAM,QAAQ,GAAG,MAAM,KAAK,YAAL,CAAkB,KAAlB,CAAwB;AAC7C,cAAA,KAAK,EAAE,KADsC;AAE7C,cAAA,IAAI,EAAE,IAFuC;AAG7C,cAAA,GAAG,EAAE;AAHwC,aAAxB,CAAvB;AAKA,YAAA,OAAO,CAAC;AACN,cAAA,MAAM,EAAE;AADF,aAAD,CAAP;AAGD,WATD,CASE,OAAO,KAAP,EAAc;AACd,YAAA,MAAM,CAAC;AACL,cAAA,MAAM,EAAE,KADH;AAEL,cAAA,KAAK,EAAE;AAFF,aAAD,CAAN;AAID;AACF;AACF,OAvBD,MAuBO;AACL,QAAA,MAAM,CAAC;AACL,UAAA,MAAM,EAAE,KADH;AAEL,UAAA,KAAK,EAAE;AAFF,SAAD,CAAN;AAID;AACF,KA9BwC,CAAlC,CAAP;AA+BD;;AA1CiC,C;;;;AA2CnC,C;;;;;;;;;AA3CY,uBAAuB,GAAA,UAAA,CAAhC,CAHH,UAAA,CAAA,mBAAA,EACC,EADD,CAGG,CAAgC,EAFhB,uBAEgB,CAAvB;;;;;;;;;;;;AA4Cb,C;ACjDA;;;;AAAA","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NgNavigatorShareService {\r\n  webNavigator: any = null;\r\n  constructor() {\r\n    this.webNavigator = window.navigator;\r\n  }\r\n\r\n  canShare(): boolean {\r\n    return this.webNavigator !== null && this.webNavigator.share !== undefined;\r\n  }\r\n\r\n  share({ title, text, url }: { title: string, text?: string, url?: string }) {\r\n    return new Promise(async (resolve, reject) => {\r\n      if (this.webNavigator !== null && this.webNavigator.share !== undefined) {\r\n        if (\r\n          (text === undefined || text === null) &&\r\n          (url === undefined || url === null)\r\n        ) {\r\n          console.warn(`text and url both can't be empty, at least provide either text or url`);\r\n        } else {\r\n          try {\r\n            const isShared = await this.webNavigator.share({\r\n              title: title,\r\n              text: text,\r\n              url: url,\r\n            });\r\n            resolve({\r\n              shared: true\r\n            });\r\n          } catch (error) {\r\n            reject({\r\n              shared: false,\r\n              error: error\r\n            });\r\n          }\r\n        }\r\n      } else {\r\n        reject({\r\n          shared: false,\r\n          error: `This service/api is not supported in your Browser`\r\n        });\r\n      }\r\n    });\r\n  }\r\n}\r\n","/*\r\n * Public API Surface of ng-navigator-share\r\n */\r\n\r\nexport * from './lib/ng-navigator-share/ng-navigator-share.service';\r\n"]},"metadata":{},"sourceType":"module"}