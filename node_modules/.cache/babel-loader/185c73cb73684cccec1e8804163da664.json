{"ast":null,"code":"import { Directive, Input } from \"@angular/core\";\nimport { LOCALE_ID, Inject } from \"@angular/core\";\nimport { EllipsisPipe } from \"../pipe/ellipsis.pipe\";\nimport * as i0 from \"@angular/core\";\nexport class InternationalizationDirective {\n  constructor(el, locale) {\n    this.el = el;\n    this.locale = locale;\n    this._data = [];\n  }\n\n  get data() {\n    return this._data;\n  }\n\n  set data(value) {\n    if (value) {\n      this._data = value;\n      this.el.nativeElement.innerHTML = this.retrievePropertyValueByLocation();\n    }\n  }\n\n  ngOnInit() {}\n\n  retrievePropertyValueByLocation() {\n    if (this._data) {\n      const value = this._data.filter(element => element.language === (this.locale || \"en\")).map(element => element[this.property]) || [\"\"];\n      return this.ellipsis > 0 ? new EllipsisPipe().transform(value[0], this.ellipsis) : value;\n    }\n  }\n\n}\n\nInternationalizationDirective.ɵfac = function InternationalizationDirective_Factory(t) {\n  return new (t || InternationalizationDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(LOCALE_ID));\n};\n\nInternationalizationDirective.ɵdir = i0.ɵɵdefineDirective({\n  type: InternationalizationDirective,\n  selectors: [[\"\", \"internationalization\", \"\"]],\n  inputs: {\n    property: \"property\",\n    data: \"data\",\n    ellipsis: \"ellipsis\"\n  }\n});\n/*@__PURE__*/\n\n(function () {\n  i0.ɵsetClassMetadata(InternationalizationDirective, [{\n    type: Directive,\n    args: [{\n      selector: \"[internationalization]\"\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [LOCALE_ID]\n      }]\n    }];\n  }, {\n    property: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    ellipsis: [{\n      type: Input\n    }]\n  });\n})();","map":{"version":3,"sources":["/Users/gracebrown/Desktop/hashtag_cyberstar/gracebrown03.github.io/src/app/core/directive/internationalization.directive.ts"],"names":[],"mappings":"AAAA,SAAS,SAAT,EAAgC,KAAhC,QAAoD,eAApD;AACA,SAAS,SAAT,EAAoB,MAApB,QAAkC,eAAlC;AACA,SAAS,YAAT,QAA6B,uBAA7B;;AAGA,OAAM,MAAO,6BAAP,CAAoC;AAYtC,EAAA,WAAA,CACY,EADZ,EAE8B,MAF9B,EAE4C;AADhC,SAAA,EAAA,GAAA,EAAA;AACkB,SAAA,MAAA,GAAA,MAAA;AAZtB,SAAA,KAAA,GAAe,EAAf;AAaJ;;AATJ,MAAa,IAAb,GAAiB;AACb,WAAO,KAAK,KAAZ;AACH;;AASD,MAAI,IAAJ,CAAS,KAAT,EAAqB;AACjB,QAAG,KAAH,EAAU;AACN,WAAK,KAAL,GAAa,KAAb;AACA,WAAK,EAAL,CAAQ,aAAR,CAAsB,SAAtB,GAAkC,KAAK,+BAAL,EAAlC;AACH;AACJ;;AAED,EAAA,QAAQ,GAAA,CAAW;;AAEX,EAAA,+BAA+B,GAAA;AAEnC,QAAG,KAAK,KAAR,EAAe;AAEX,YAAM,KAAK,GAAa,KAAK,KAAL,CACnB,MADmB,CACZ,OAAO,IAAI,OAAO,CAAC,QAAR,MAAsB,KAAK,MAAL,IAAe,IAArC,CADC,EAEnB,GAFmB,CAEf,OAAO,IAAI,OAAO,CAAC,KAAK,QAAN,CAFH,KAEuB,CAAC,EAAD,CAF/C;AAIA,aAAO,KAAK,QAAL,GAAgB,CAAhB,GAAoB,IAAI,YAAJ,GAAmB,SAAnB,CAA6B,KAAK,CAAC,CAAD,CAAlC,EAAuC,KAAK,QAA5C,CAApB,GAA4E,KAAnF;AAEH;AACJ;;AArCqC;;;mBAA7B,6B,EAA6B,EAAA,CAAA,iBAAA,CAAA,EAAA,CAAA,UAAA,C,EAAA,EAAA,CAAA,iBAAA,CAc1B,SAd0B,C;AAcjB,C;;;QAdZ,6B;AAA6B,EAAA,SAAA,EAAA,CAAA,CAAA,EAAA,EAAA,sBAAA,EAAA,EAAA,CAAA,C;AAAA,EAAA,MAAA,EAAA;AAAA,IAAA,QAAA,EAAA,UAAA;AAAA,IAAA,IAAA,EAAA,MAAA;AAAA,IAAA,QAAA,EAAA;AAAA;;;;;uBAA7B,6B,EAA6B,CAAA;UADzC,SACyC;WAD/B;AAAE,MAAA,QAAQ,EAAE;AAAZ,K;AAC+B,GAAA,C;;;;;;cAcjC,M;eAAO,S;;;;;YAVX;;;YAEA;;;YAIA","sourcesContent":["import { Directive, ElementRef, Input, OnInit} from \"@angular/core\";\nimport { LOCALE_ID, Inject } from \"@angular/core\";\nimport { EllipsisPipe } from \"../pipe/ellipsis.pipe\";\n\n@Directive({ selector: \"[internationalization]\" })\nexport class InternationalizationDirective implements OnInit{\n\n    private _data: any[] = [];\n\n    @Input() property :string;\n    \n    @Input() get data(): any[] {\n        return this._data;\n    }\n\n    @Input() ellipsis :number;\n\n    constructor(\n        private el: ElementRef,\n        @Inject(LOCALE_ID) public locale: string\n    ) {}\n\n    set data(value: any[]) {\n        if(value) {\n            this._data = value;\n            this.el.nativeElement.innerHTML = this.retrievePropertyValueByLocation();\n        }\n    }\n\n    ngOnInit(): void {}\n\n    private retrievePropertyValueByLocation(): any {\n        \n        if(this._data) {\n\n            const value: string[] = this._data\n                .filter(element => element.language === (this.locale || \"en\"))\n                .map(element => element[this.property]) || [\"\"];\n\n            return this.ellipsis > 0 ? new EllipsisPipe().transform(value[0], this.ellipsis) : value;\n\n        }\n    }\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}