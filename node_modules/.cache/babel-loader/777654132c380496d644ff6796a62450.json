{"ast":null,"code":"/**\n * @license Angular v9.0.7\n * (c) 2010-2020 Google LLC. https://angular.io/\n * License: MIT\n */\nimport { LocationStrategy, Location, PlatformLocation, APP_BASE_HREF, ViewportScroller, HashLocationStrategy, PathLocationStrategy, ɵgetDOM, LOCATION_INITIALIZED } from '@angular/common';\nimport { Component, ɵisObservable, ɵisPromise, NgModuleRef, InjectionToken, NgModuleFactory, ɵConsole, NgZone, isDevMode, Directive, Attribute, Renderer2, ElementRef, Input, HostListener, HostBinding, Optional, ContentChildren, EventEmitter, ViewContainerRef, ComponentFactoryResolver, ChangeDetectorRef, Output, Injectable, NgModuleFactoryLoader, Compiler, Injector, SystemJsNgModuleLoader, NgProbeToken, ANALYZE_FOR_ENTRY_COMPONENTS, SkipSelf, Inject, APP_INITIALIZER, APP_BOOTSTRAP_LISTENER, NgModule, ApplicationRef, Version } from '@angular/core';\nimport { of, from, BehaviorSubject, Observable, EmptyError, combineLatest, defer, Subject, EMPTY } from 'rxjs';\nimport { map, concatAll, last as last$1, catchError, first, mergeMap, every, switchMap, take, startWith, scan, filter, concatMap, reduce, tap, finalize, mergeAll } from 'rxjs/operators';\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/router/src/events.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Base for events the router goes through, as opposed to events tied to a specific\n * route. Fired one time for any given navigation.\n *\n * \\@usageNotes\n *\n * ```ts\n * class MyService {\n *   constructor(public router: Router, logger: Logger) {\n *     router.events.pipe(\n *       filter(e => e instanceof RouterEvent)\n *     ).subscribe(e => {\n *       logger.log(e.id, e.url);\n *     });\n *   }\n * }\n * ```\n *\n * @see `Event`\n * \\@publicApi\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nclass RouterEvent {\n  /**\n   * @param {?} id\n   * @param {?} url\n   */\n  constructor(id, url) {\n    this.id = id;\n    this.url = url;\n  }\n\n}\n\nif (false) {\n  /**\n   * A unique ID that the router assigns to every router navigation.\n   * @type {?}\n   */\n  RouterEvent.prototype.id;\n  /**\n   * The URL that is the destination for this navigation.\n   * @type {?}\n   */\n\n  RouterEvent.prototype.url;\n}\n/**\n * An event triggered when a navigation starts.\n *\n * \\@publicApi\n */\n\n\nclass NavigationStart extends RouterEvent {\n  /**\n   * @param {?} id\n   * @param {?} url\n   * @param {?=} navigationTrigger\n   * @param {?=} restoredState\n   */\n  constructor(\n  /** @docsNotRequired */\n  id,\n  /** @docsNotRequired */\n  url,\n  /** @docsNotRequired */\n  navigationTrigger = 'imperative',\n  /** @docsNotRequired */\n  restoredState = null) {\n    super(id, url);\n    this.navigationTrigger = navigationTrigger;\n    this.restoredState = restoredState;\n  }\n  /**\n   * \\@docsNotRequired\n   * @return {?}\n   */\n\n\n  toString() {\n    return `NavigationStart(id: ${this.id}, url: '${this.url}')`;\n  }\n\n}\n\nif (false) {\n  /**\n   * Identifies the call or event that triggered the navigation.\n   * An `imperative` trigger is a call to `router.navigateByUrl()` or `router.navigate()`.\n   *\n   * @type {?}\n   */\n  NavigationStart.prototype.navigationTrigger;\n  /**\n   * The navigation state that was previously supplied to the `pushState` call,\n   * when the navigation is triggered by a `popstate` event. Otherwise null.\n   *\n   * The state object is defined by `NavigationExtras`, and contains any\n   * developer-defined state value, as well as a unique ID that\n   * the router assigns to every router transition/navigation.\n   *\n   * From the perspective of the router, the router never \"goes back\".\n   * When the user clicks on the back button in the browser,\n   * a new navigation ID is created.\n   *\n   * Use the ID in this previous-state object to differentiate between a newly created\n   * state and one returned to by a `popstate` event, so that you can restore some\n   * remembered state, such as scroll position.\n   *\n   * @type {?}\n   */\n\n  NavigationStart.prototype.restoredState;\n}\n/**\n * An event triggered when a navigation ends successfully.\n *\n * \\@publicApi\n */\n\n\nclass NavigationEnd extends RouterEvent {\n  /**\n   * @param {?} id\n   * @param {?} url\n   * @param {?} urlAfterRedirects\n   */\n  constructor(\n  /** @docsNotRequired */\n  id,\n  /** @docsNotRequired */\n  url, urlAfterRedirects) {\n    super(id, url);\n    this.urlAfterRedirects = urlAfterRedirects;\n  }\n  /**\n   * \\@docsNotRequired\n   * @return {?}\n   */\n\n\n  toString() {\n    return `NavigationEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}')`;\n  }\n\n}\n\nif (false) {\n  /**\n   * \\@docsNotRequired\n   * @type {?}\n   */\n  NavigationEnd.prototype.urlAfterRedirects;\n}\n/**\n * An event triggered when a navigation is canceled, directly or indirectly.\n *\n * This can happen when a [route guard](guide/router#milestone-5-route-guards)\n * returns `false` or initiates a redirect by returning a `UrlTree`.\n *\n * \\@publicApi\n */\n\n\nclass NavigationCancel extends RouterEvent {\n  /**\n   * @param {?} id\n   * @param {?} url\n   * @param {?} reason\n   */\n  constructor(\n  /** @docsNotRequired */\n  id,\n  /** @docsNotRequired */\n  url, reason) {\n    super(id, url);\n    this.reason = reason;\n  }\n  /**\n   * \\@docsNotRequired\n   * @return {?}\n   */\n\n\n  toString() {\n    return `NavigationCancel(id: ${this.id}, url: '${this.url}')`;\n  }\n\n}\n\nif (false) {\n  /**\n   * \\@docsNotRequired\n   * @type {?}\n   */\n  NavigationCancel.prototype.reason;\n}\n/**\n * An event triggered when a navigation fails due to an unexpected error.\n *\n * \\@publicApi\n */\n\n\nclass NavigationError extends RouterEvent {\n  /**\n   * @param {?} id\n   * @param {?} url\n   * @param {?} error\n   */\n  constructor(\n  /** @docsNotRequired */\n  id,\n  /** @docsNotRequired */\n  url, error) {\n    super(id, url);\n    this.error = error;\n  }\n  /**\n   * \\@docsNotRequired\n   * @return {?}\n   */\n\n\n  toString() {\n    return `NavigationError(id: ${this.id}, url: '${this.url}', error: ${this.error})`;\n  }\n\n}\n\nif (false) {\n  /**\n   * \\@docsNotRequired\n   * @type {?}\n   */\n  NavigationError.prototype.error;\n}\n/**\n * An event triggered when routes are recognized.\n *\n * \\@publicApi\n */\n\n\nclass RoutesRecognized extends RouterEvent {\n  /**\n   * @param {?} id\n   * @param {?} url\n   * @param {?} urlAfterRedirects\n   * @param {?} state\n   */\n  constructor(\n  /** @docsNotRequired */\n  id,\n  /** @docsNotRequired */\n  url, urlAfterRedirects, state) {\n    super(id, url);\n    this.urlAfterRedirects = urlAfterRedirects;\n    this.state = state;\n  }\n  /**\n   * \\@docsNotRequired\n   * @return {?}\n   */\n\n\n  toString() {\n    return `RoutesRecognized(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\n  }\n\n}\n\nif (false) {\n  /**\n   * \\@docsNotRequired\n   * @type {?}\n   */\n  RoutesRecognized.prototype.urlAfterRedirects;\n  /**\n   * \\@docsNotRequired\n   * @type {?}\n   */\n\n  RoutesRecognized.prototype.state;\n}\n/**\n * An event triggered at the start of the Guard phase of routing.\n *\n * \\@publicApi\n */\n\n\nclass GuardsCheckStart extends RouterEvent {\n  /**\n   * @param {?} id\n   * @param {?} url\n   * @param {?} urlAfterRedirects\n   * @param {?} state\n   */\n  constructor(\n  /** @docsNotRequired */\n  id,\n  /** @docsNotRequired */\n  url, urlAfterRedirects, state) {\n    super(id, url);\n    this.urlAfterRedirects = urlAfterRedirects;\n    this.state = state;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  toString() {\n    return `GuardsCheckStart(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\n  }\n\n}\n\nif (false) {\n  /**\n   * \\@docsNotRequired\n   * @type {?}\n   */\n  GuardsCheckStart.prototype.urlAfterRedirects;\n  /**\n   * \\@docsNotRequired\n   * @type {?}\n   */\n\n  GuardsCheckStart.prototype.state;\n}\n/**\n * An event triggered at the end of the Guard phase of routing.\n *\n * \\@publicApi\n */\n\n\nclass GuardsCheckEnd extends RouterEvent {\n  /**\n   * @param {?} id\n   * @param {?} url\n   * @param {?} urlAfterRedirects\n   * @param {?} state\n   * @param {?} shouldActivate\n   */\n  constructor(\n  /** @docsNotRequired */\n  id,\n  /** @docsNotRequired */\n  url, urlAfterRedirects, state, shouldActivate) {\n    super(id, url);\n    this.urlAfterRedirects = urlAfterRedirects;\n    this.state = state;\n    this.shouldActivate = shouldActivate;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  toString() {\n    return `GuardsCheckEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state}, shouldActivate: ${this.shouldActivate})`;\n  }\n\n}\n\nif (false) {\n  /**\n   * \\@docsNotRequired\n   * @type {?}\n   */\n  GuardsCheckEnd.prototype.urlAfterRedirects;\n  /**\n   * \\@docsNotRequired\n   * @type {?}\n   */\n\n  GuardsCheckEnd.prototype.state;\n  /**\n   * \\@docsNotRequired\n   * @type {?}\n   */\n\n  GuardsCheckEnd.prototype.shouldActivate;\n}\n/**\n * An event triggered at the the start of the Resolve phase of routing.\n *\n * Runs in the \"resolve\" phase whether or not there is anything to resolve.\n * In future, may change to only run when there are things to be resolved.\n *\n * \\@publicApi\n */\n\n\nclass ResolveStart extends RouterEvent {\n  /**\n   * @param {?} id\n   * @param {?} url\n   * @param {?} urlAfterRedirects\n   * @param {?} state\n   */\n  constructor(\n  /** @docsNotRequired */\n  id,\n  /** @docsNotRequired */\n  url, urlAfterRedirects, state) {\n    super(id, url);\n    this.urlAfterRedirects = urlAfterRedirects;\n    this.state = state;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  toString() {\n    return `ResolveStart(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\n  }\n\n}\n\nif (false) {\n  /**\n   * \\@docsNotRequired\n   * @type {?}\n   */\n  ResolveStart.prototype.urlAfterRedirects;\n  /**\n   * \\@docsNotRequired\n   * @type {?}\n   */\n\n  ResolveStart.prototype.state;\n}\n/**\n * An event triggered at the end of the Resolve phase of routing.\n * @see `ResolveStart`.\n *\n * \\@publicApi\n */\n\n\nclass ResolveEnd extends RouterEvent {\n  /**\n   * @param {?} id\n   * @param {?} url\n   * @param {?} urlAfterRedirects\n   * @param {?} state\n   */\n  constructor(\n  /** @docsNotRequired */\n  id,\n  /** @docsNotRequired */\n  url, urlAfterRedirects, state) {\n    super(id, url);\n    this.urlAfterRedirects = urlAfterRedirects;\n    this.state = state;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  toString() {\n    return `ResolveEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\n  }\n\n}\n\nif (false) {\n  /**\n   * \\@docsNotRequired\n   * @type {?}\n   */\n  ResolveEnd.prototype.urlAfterRedirects;\n  /**\n   * \\@docsNotRequired\n   * @type {?}\n   */\n\n  ResolveEnd.prototype.state;\n}\n/**\n * An event triggered before lazy loading a route configuration.\n *\n * \\@publicApi\n */\n\n\nclass RouteConfigLoadStart {\n  /**\n   * @param {?} route\n   */\n  constructor(route) {\n    this.route = route;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  toString() {\n    return `RouteConfigLoadStart(path: ${this.route.path})`;\n  }\n\n}\n\nif (false) {\n  /**\n   * \\@docsNotRequired\n   * @type {?}\n   */\n  RouteConfigLoadStart.prototype.route;\n}\n/**\n * An event triggered when a route has been lazy loaded.\n *\n * \\@publicApi\n */\n\n\nclass RouteConfigLoadEnd {\n  /**\n   * @param {?} route\n   */\n  constructor(route) {\n    this.route = route;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  toString() {\n    return `RouteConfigLoadEnd(path: ${this.route.path})`;\n  }\n\n}\n\nif (false) {\n  /**\n   * \\@docsNotRequired\n   * @type {?}\n   */\n  RouteConfigLoadEnd.prototype.route;\n}\n/**\n * An event triggered at the start of the child-activation\n * part of the Resolve phase of routing.\n * @see `ChildActivationEnd`\n * @see `ResolveStart`\n *\n * \\@publicApi\n */\n\n\nclass ChildActivationStart {\n  /**\n   * @param {?} snapshot\n   */\n  constructor(snapshot) {\n    this.snapshot = snapshot;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  toString() {\n    /** @type {?} */\n    const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';\n    return `ChildActivationStart(path: '${path}')`;\n  }\n\n}\n\nif (false) {\n  /**\n   * \\@docsNotRequired\n   * @type {?}\n   */\n  ChildActivationStart.prototype.snapshot;\n}\n/**\n * An event triggered at the end of the child-activation part\n * of the Resolve phase of routing.\n * @see `ChildActivationStart`\n * @see `ResolveStart` *\n * \\@publicApi\n */\n\n\nclass ChildActivationEnd {\n  /**\n   * @param {?} snapshot\n   */\n  constructor(snapshot) {\n    this.snapshot = snapshot;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  toString() {\n    /** @type {?} */\n    const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';\n    return `ChildActivationEnd(path: '${path}')`;\n  }\n\n}\n\nif (false) {\n  /**\n   * \\@docsNotRequired\n   * @type {?}\n   */\n  ChildActivationEnd.prototype.snapshot;\n}\n/**\n * An event triggered at the start of the activation part\n * of the Resolve phase of routing.\n * @see ActivationEnd`\n * @see `ResolveStart`\n *\n * \\@publicApi\n */\n\n\nclass ActivationStart {\n  /**\n   * @param {?} snapshot\n   */\n  constructor(snapshot) {\n    this.snapshot = snapshot;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  toString() {\n    /** @type {?} */\n    const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';\n    return `ActivationStart(path: '${path}')`;\n  }\n\n}\n\nif (false) {\n  /**\n   * \\@docsNotRequired\n   * @type {?}\n   */\n  ActivationStart.prototype.snapshot;\n}\n/**\n * An event triggered at the end of the activation part\n * of the Resolve phase of routing.\n * @see `ActivationStart`\n * @see `ResolveStart`\n *\n * \\@publicApi\n */\n\n\nclass ActivationEnd {\n  /**\n   * @param {?} snapshot\n   */\n  constructor(snapshot) {\n    this.snapshot = snapshot;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  toString() {\n    /** @type {?} */\n    const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';\n    return `ActivationEnd(path: '${path}')`;\n  }\n\n}\n\nif (false) {\n  /**\n   * \\@docsNotRequired\n   * @type {?}\n   */\n  ActivationEnd.prototype.snapshot;\n}\n/**\n * An event triggered by scrolling.\n *\n * \\@publicApi\n */\n\n\nclass Scroll {\n  /**\n   * @param {?} routerEvent\n   * @param {?} position\n   * @param {?} anchor\n   */\n  constructor(routerEvent, position, anchor) {\n    this.routerEvent = routerEvent;\n    this.position = position;\n    this.anchor = anchor;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  toString() {\n    /** @type {?} */\n    const pos = this.position ? `${this.position[0]}, ${this.position[1]}` : null;\n    return `Scroll(anchor: '${this.anchor}', position: '${pos}')`;\n  }\n\n}\n\nif (false) {\n  /**\n   * \\@docsNotRequired\n   * @type {?}\n   */\n  Scroll.prototype.routerEvent;\n  /**\n   * \\@docsNotRequired\n   * @type {?}\n   */\n\n  Scroll.prototype.position;\n  /**\n   * \\@docsNotRequired\n   * @type {?}\n   */\n\n  Scroll.prototype.anchor;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/router/src/components/empty_outlet.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * This component is used internally within the router to be a placeholder when an empty\n * router-outlet is needed. For example, with a config such as:\n *\n * `{path: 'parent', outlet: 'nav', children: [...]}`\n *\n * In order to render, there needs to be a component on this config, which will default\n * to this `EmptyOutletComponent`.\n */\n\n\nclass ɵEmptyOutletComponent {}\n\nɵEmptyOutletComponent.ɵfac = function ɵEmptyOutletComponent_Factory(t) {\n  return new (t || ɵEmptyOutletComponent)();\n};\n\nɵEmptyOutletComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: ɵEmptyOutletComponent,\n  selectors: [[\"ng-component\"]],\n  decls: 1,\n  vars: 0,\n  template: function ɵEmptyOutletComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelement(0, \"router-outlet\");\n    }\n  },\n  directives: function () {\n    return [RouterOutlet];\n  },\n  encapsulation: 2\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(ɵEmptyOutletComponent, [{\n    type: Component,\n    args: [{\n      template: `<router-outlet></router-outlet>`\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/router/src/shared.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * The primary routing outlet.\n *\n * \\@publicApi\n * @type {?}\n */\n\n\nconst PRIMARY_OUTLET = 'primary';\n/**\n * A map that provides access to the required and optional parameters\n * specific to a route.\n * The map supports retrieving a single value with `get()`\n * or multiple values with `getAll()`.\n *\n * @see [URLSearchParams](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams)\n *\n * \\@publicApi\n * @record\n */\n\nfunction ParamMap() {}\n\nif (false) {\n  /**\n   * Names of the parameters in the map.\n   * @type {?}\n   */\n  ParamMap.prototype.keys;\n  /**\n   * Reports whether the map contains a given parameter.\n   * @param {?} name The parameter name.\n   * @return {?} True if the map contains the given parameter, false otherwise.\n   */\n\n  ParamMap.prototype.has = function (name) {};\n  /**\n   * Retrieves a single value for a parameter.\n   * @param {?} name The parameter name.\n   * @return {?} The parameter's single value,\n   * or the first value if the parameter has multiple values,\n   * or `null` when there is no such parameter.\n   */\n\n\n  ParamMap.prototype.get = function (name) {};\n  /**\n   * Retrieves multiple values for a parameter.\n   * @param {?} name The parameter name.\n   * @return {?} An array containing one or more values,\n   * or an empty array if there is no such parameter.\n   *\n   */\n\n\n  ParamMap.prototype.getAll = function (name) {};\n}\n\nclass ParamsAsMap {\n  /**\n   * @param {?} params\n   */\n  constructor(params) {\n    this.params = params || {};\n  }\n  /**\n   * @param {?} name\n   * @return {?}\n   */\n\n\n  has(name) {\n    return this.params.hasOwnProperty(name);\n  }\n  /**\n   * @param {?} name\n   * @return {?}\n   */\n\n\n  get(name) {\n    if (this.has(name)) {\n      /** @type {?} */\n      const v = this.params[name];\n      return Array.isArray(v) ? v[0] : v;\n    }\n\n    return null;\n  }\n  /**\n   * @param {?} name\n   * @return {?}\n   */\n\n\n  getAll(name) {\n    if (this.has(name)) {\n      /** @type {?} */\n      const v = this.params[name];\n      return Array.isArray(v) ? v : [v];\n    }\n\n    return [];\n  }\n  /**\n   * @return {?}\n   */\n\n\n  get keys() {\n    return Object.keys(this.params);\n  }\n\n}\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  ParamsAsMap.prototype.params;\n}\n/**\n * Converts a `Params` instance to a `ParamMap`.\n * \\@publicApi\n * @param {?} params The instance to convert.\n * @return {?} The new map instance.\n *\n */\n\n\nfunction convertToParamMap(params) {\n  return new ParamsAsMap(params);\n}\n/** @type {?} */\n\n\nconst NAVIGATION_CANCELING_ERROR = 'ngNavigationCancelingError';\n/**\n * @param {?} message\n * @return {?}\n */\n\nfunction navigationCancelingError(message) {\n  /** @type {?} */\n  const error = Error('NavigationCancelingError: ' + message);\n\n  /** @type {?} */\n  error[NAVIGATION_CANCELING_ERROR] = true;\n  return error;\n}\n/**\n * @param {?} error\n * @return {?}\n */\n\n\nfunction isNavigationCancelingError(error) {\n  return error &&\n  /** @type {?} */\n  error[NAVIGATION_CANCELING_ERROR];\n} // Matches the route configuration (`route`) against the actual URL (`segments`).\n\n/**\n * @param {?} segments\n * @param {?} segmentGroup\n * @param {?} route\n * @return {?}\n */\n\n\nfunction defaultUrlMatcher(segments, segmentGroup, route) {\n  /** @type {?} */\n  const parts =\n  /** @type {?} */\n  route.path.split('/');\n\n  if (parts.length > segments.length) {\n    // The actual URL is shorter than the config, no match\n    return null;\n  }\n\n  if (route.pathMatch === 'full' && (segmentGroup.hasChildren() || parts.length < segments.length)) {\n    // The config is longer than the actual URL but we are looking for a full match, return null\n    return null;\n  }\n  /** @type {?} */\n\n\n  const posParams = {}; // Check each config part against the actual URL\n\n  for (let index = 0; index < parts.length; index++) {\n    /** @type {?} */\n    const part = parts[index];\n    /** @type {?} */\n\n    const segment = segments[index];\n    /** @type {?} */\n\n    const isParameter = part.startsWith(':');\n\n    if (isParameter) {\n      posParams[part.substring(1)] = segment;\n    } else if (part !== segment.path) {\n      // The actual URL part does not match the config, no match\n      return null;\n    }\n  }\n\n  return {\n    consumed: segments.slice(0, parts.length),\n    posParams\n  };\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/router/src/config.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * A configuration object that defines a single route.\n * A set of routes are collected in a `Routes` array to define a `Router` configuration.\n * The router attempts to match segments of a given URL against each route,\n * using the configuration options defined in this object.\n *\n * Supports static, parameterized, redirect, and wildcard routes, as well as\n * custom route data and resolve methods.\n *\n * For detailed usage information, see the [Routing Guide](guide/router).\n *\n * \\@usageNotes\n *\n * ### Simple Configuration\n *\n * The following route specifies that when navigating to, for example,\n * `/team/11/user/bob`, the router creates the 'Team' component\n * with the 'User' child component in it.\n *\n * ```\n * [{\n *   path: 'team/:id',\n *  component: Team,\n *   children: [{\n *     path: 'user/:name',\n *     component: User\n *   }]\n * }]\n * ```\n *\n * ### Multiple Outlets\n *\n * The following route creates sibling components with multiple outlets.\n * When navigating to `/team/11(aux:chat/jim)`, the router creates the 'Team' component next to\n * the 'Chat' component. The 'Chat' component is placed into the 'aux' outlet.\n *\n * ```\n * [{\n *   path: 'team/:id',\n *   component: Team\n * }, {\n *   path: 'chat/:user',\n *   component: Chat\n *   outlet: 'aux'\n * }]\n * ```\n *\n * ### Wild Cards\n *\n * The following route uses wild-card notation to specify a component\n * that is always instantiated regardless of where you navigate to.\n *\n * ```\n * [{\n *   path: '**',\n *   component: WildcardComponent\n * }]\n * ```\n *\n * ### Redirects\n *\n * The following route uses the `redirectTo` property to ignore a segment of\n * a given URL when looking for a child path.\n *\n * When navigating to '/team/11/legacy/user/jim', the router changes the URL segment\n * '/team/11/legacy/user/jim' to '/team/11/user/jim', and then instantiates\n * the Team component with the User child component in it.\n *\n * ```\n * [{\n *   path: 'team/:id',\n *   component: Team,\n *   children: [{\n *     path: 'legacy/user/:name',\n *     redirectTo: 'user/:name'\n *   }, {\n *     path: 'user/:name',\n *     component: User\n *   }]\n * }]\n * ```\n *\n * The redirect path can be relative, as shown in this example, or absolute.\n * If we change the `redirectTo` value in the example to the absolute URL segment '/user/:name',\n * the result URL is also absolute, '/user/jim'.\n * ### Empty Path\n *\n * Empty-path route configurations can be used to instantiate components that do not 'consume'\n * any URL segments.\n *\n * In the following configuration, when navigating to\n * `/team/11`, the router instantiates the 'AllUsers' component.\n *\n * ```\n * [{\n *   path: 'team/:id',\n *   component: Team,\n *   children: [{\n *     path: '',\n *     component: AllUsers\n *   }, {\n *     path: 'user/:name',\n *     component: User\n *   }]\n * }]\n * ```\n *\n * Empty-path routes can have children. In the following example, when navigating\n * to `/team/11/user/jim`, the router instantiates the wrapper component with\n * the user component in it.\n *\n * Note that an empty path route inherits its parent's parameters and data.\n *\n * ```\n * [{\n *   path: 'team/:id',\n *   component: Team,\n *   children: [{\n *     path: '',\n *     component: WrapperCmp,\n *     children: [{\n *       path: 'user/:name',\n *       component: User\n *     }]\n *   }]\n * }]\n * ```\n *\n * ### Matching Strategy\n *\n * The default path-match strategy is 'prefix', which means that the router\n * checks URL elements from the left to see if the URL matches a specified path.\n * For example, '/team/11/user' matches 'team/:id'.\n *\n * ```\n * [{\n *   path: '',\n *   pathMatch: 'prefix', //default\n *   redirectTo: 'main'\n * }, {\n *   path: 'main',\n *   component: Main\n * }]\n * ```\n *\n * You can specify the path-match strategy 'full' to make sure that the path\n * covers the whole unconsumed URL. It is important to do this when redirecting\n * empty-path routes. Otherwise, because an empty path is a prefix of any URL,\n * the router would apply the redirect even when navigating to the redirect destination,\n * creating an endless loop.\n *\n * In the following example, supplying the 'full' `pathMatch` strategy ensures\n * that the router applies the redirect if and only if navigating to '/'.\n *\n * ```\n * [{\n *   path: '',\n *   pathMatch: 'full',\n *   redirectTo: 'main'\n * }, {\n *   path: 'main',\n *   component: Main\n * }]\n * ```\n *\n * ### Componentless Routes\n *\n * You can share parameters between sibling components.\n * For example, suppose that two sibling components should go next to each other,\n * and both of them require an ID parameter. You can accomplish this using a route\n * that does not specify a component at the top level.\n *\n * In the following example, 'MainChild' and 'AuxChild' are siblings.\n * When navigating to 'parent/10/(a//aux:b)', the route instantiates\n * the main child and aux child components next to each other.\n * For this to work, the application component must have the primary and aux outlets defined.\n *\n * ```\n * [{\n *    path: 'parent/:id',\n *    children: [\n *      { path: 'a', component: MainChild },\n *      { path: 'b', component: AuxChild, outlet: 'aux' }\n *    ]\n * }]\n * ```\n *\n * The router merges the parameters, data, and resolve of the componentless\n * parent into the parameters, data, and resolve of the children.\n *\n * This is especially useful when child components are defined\n * with an empty path string, as in the following example.\n * With this configuration, navigating to '/parent/10' creates\n * the main child and aux components.\n *\n * ```\n * [{\n *    path: 'parent/:id',\n *    children: [\n *      { path: '', component: MainChild },\n *      { path: '', component: AuxChild, outlet: 'aux' }\n *    ]\n * }]\n * ```\n *\n * ### Lazy Loading\n *\n * Lazy loading speeds up application load time by splitting the application\n * into multiple bundles and loading them on demand.\n * To use lazy loading, provide the `loadChildren` property  instead of the `children` property.\n *\n * Given the following example route, the router will lazy load\n * the associated module on demand using the browser native import system.\n *\n * ```\n * [{\n *   path: 'lazy',\n *   loadChildren: () => import('./lazy-route/lazy.module').then(mod => mod.LazyModule),\n * }];\n * ```\n *\n * \\@publicApi\n * @record\n */\n\n\nfunction Route() {}\n\nif (false) {\n  /**\n   * The path to match against. Cannot be used together with a custom `matcher` function.\n   * A URL string that uses router matching notation.\n   * Can be a wild card (`**`) that matches any URL (see Usage Notes below).\n   * Default is \"/\" (the root path).\n   *\n   * @type {?|undefined}\n   */\n  Route.prototype.path;\n  /**\n   * The path-matching strategy, one of 'prefix' or 'full'.\n   * Default is 'prefix'.\n   *\n   * By default, the router checks URL elements from the left to see if the URL\n   * matches a given  path, and stops when there is a match. For example,\n   * '/team/11/user' matches 'team/:id'.\n   *\n   * The path-match strategy 'full' matches against the entire URL.\n   * It is important to do this when redirecting empty-path routes.\n   * Otherwise, because an empty path is a prefix of any URL,\n   * the router would apply the redirect even when navigating\n   * to the redirect destination, creating an endless loop.\n   *\n   * @type {?|undefined}\n   */\n\n  Route.prototype.pathMatch;\n  /**\n   * A custom URL-matching function. Cannot be used together with `path`.\n   * @type {?|undefined}\n   */\n\n  Route.prototype.matcher;\n  /**\n   * The component to instantiate when the path matches.\n   * Can be empty if child routes specify components.\n   * @type {?|undefined}\n   */\n\n  Route.prototype.component;\n  /**\n   * A URL to which to redirect when a the path matches.\n   * Absolute if the URL begins with a slash (/), otherwise relative to the path URL.\n   * When not present, router does not redirect.\n   * @type {?|undefined}\n   */\n\n  Route.prototype.redirectTo;\n  /**\n   * Name of a `RouterOutlet` object where the component can be placed\n   * when the path matches.\n   * @type {?|undefined}\n   */\n\n  Route.prototype.outlet;\n  /**\n   * An array of dependency-injection tokens used to look up `CanActivate()`\n   * handlers, in order to determine if the current user is allowed to\n   * activate the component. By default, any user can activate.\n   * @type {?|undefined}\n   */\n\n  Route.prototype.canActivate;\n  /**\n   * An array of DI tokens used to look up `CanActivateChild()` handlers,\n   * in order to determine if the current user is allowed to activate\n   * a child of the component. By default, any user can activate a child.\n   * @type {?|undefined}\n   */\n\n  Route.prototype.canActivateChild;\n  /**\n   * An array of DI tokens used to look up `CanDeactivate()`\n   * handlers, in order to determine if the current user is allowed to\n   * deactivate the component. By default, any user can deactivate.\n   *\n   * @type {?|undefined}\n   */\n\n  Route.prototype.canDeactivate;\n  /**\n   * An array of DI tokens used to look up `CanLoad()`\n   * handlers, in order to determine if the current user is allowed to\n   * load the component. By default, any user can load.\n   * @type {?|undefined}\n   */\n\n  Route.prototype.canLoad;\n  /**\n   * Additional developer-defined data provided to the component via\n   * `ActivatedRoute`. By default, no additional data is passed.\n   * @type {?|undefined}\n   */\n\n  Route.prototype.data;\n  /**\n   * A map of DI tokens used to look up data resolvers. See `Resolve`.\n   * @type {?|undefined}\n   */\n\n  Route.prototype.resolve;\n  /**\n   * An array of child `Route` objects that specifies a nested route\n   * configuration.\n   * @type {?|undefined}\n   */\n\n  Route.prototype.children;\n  /**\n   * A `LoadChildren` object specifying lazy-loaded child routes.\n   * @type {?|undefined}\n   */\n\n  Route.prototype.loadChildren;\n  /**\n   * Defines when guards and resolvers will be run. One of\n   * - `paramsOrQueryParamsChange` : Run when query parameters change.\n   * - `always` : Run on every execution.\n   * By default, guards and resolvers run only when the matrix\n   * parameters of the route change.\n   * @type {?|undefined}\n   */\n\n  Route.prototype.runGuardsAndResolvers;\n  /**\n   * Filled for routes with `loadChildren` once the module has been loaded\n   * \\@internal\n   * @type {?|undefined}\n   */\n\n  Route.prototype._loadedConfig;\n}\n\nclass LoadedRouterConfig {\n  /**\n   * @param {?} routes\n   * @param {?} module\n   */\n  constructor(routes, module) {\n    this.routes = routes;\n    this.module = module;\n  }\n\n}\n\nif (false) {\n  /** @type {?} */\n  LoadedRouterConfig.prototype.routes;\n  /** @type {?} */\n\n  LoadedRouterConfig.prototype.module;\n}\n/**\n * @param {?} config\n * @param {?=} parentPath\n * @return {?}\n */\n\n\nfunction validateConfig(config, parentPath = '') {\n  // forEach doesn't iterate undefined values\n  for (let i = 0; i < config.length; i++) {\n    /** @type {?} */\n    const route = config[i];\n    /** @type {?} */\n\n    const fullPath = getFullPath(parentPath, route);\n    validateNode(route, fullPath);\n  }\n}\n/**\n * @param {?} route\n * @param {?} fullPath\n * @return {?}\n */\n\n\nfunction validateNode(route, fullPath) {\n  if (!route) {\n    throw new Error(`\n      Invalid configuration of route '${fullPath}': Encountered undefined route.\n      The reason might be an extra comma.\n\n      Example:\n      const routes: Routes = [\n        { path: '', redirectTo: '/dashboard', pathMatch: 'full' },\n        { path: 'dashboard',  component: DashboardComponent },, << two commas\n        { path: 'detail/:id', component: HeroDetailComponent }\n      ];\n    `);\n  }\n\n  if (Array.isArray(route)) {\n    throw new Error(`Invalid configuration of route '${fullPath}': Array cannot be specified`);\n  }\n\n  if (!route.component && !route.children && !route.loadChildren && route.outlet && route.outlet !== PRIMARY_OUTLET) {\n    throw new Error(`Invalid configuration of route '${fullPath}': a componentless route without children or loadChildren cannot have a named outlet set`);\n  }\n\n  if (route.redirectTo && route.children) {\n    throw new Error(`Invalid configuration of route '${fullPath}': redirectTo and children cannot be used together`);\n  }\n\n  if (route.redirectTo && route.loadChildren) {\n    throw new Error(`Invalid configuration of route '${fullPath}': redirectTo and loadChildren cannot be used together`);\n  }\n\n  if (route.children && route.loadChildren) {\n    throw new Error(`Invalid configuration of route '${fullPath}': children and loadChildren cannot be used together`);\n  }\n\n  if (route.redirectTo && route.component) {\n    throw new Error(`Invalid configuration of route '${fullPath}': redirectTo and component cannot be used together`);\n  }\n\n  if (route.path && route.matcher) {\n    throw new Error(`Invalid configuration of route '${fullPath}': path and matcher cannot be used together`);\n  }\n\n  if (route.redirectTo === void 0 && !route.component && !route.children && !route.loadChildren) {\n    throw new Error(`Invalid configuration of route '${fullPath}'. One of the following must be provided: component, redirectTo, children or loadChildren`);\n  }\n\n  if (route.path === void 0 && route.matcher === void 0) {\n    throw new Error(`Invalid configuration of route '${fullPath}': routes must have either a path or a matcher specified`);\n  }\n\n  if (typeof route.path === 'string' && route.path.charAt(0) === '/') {\n    throw new Error(`Invalid configuration of route '${fullPath}': path cannot start with a slash`);\n  }\n\n  if (route.path === '' && route.redirectTo !== void 0 && route.pathMatch === void 0) {\n    /** @type {?} */\n    const exp = `The default value of 'pathMatch' is 'prefix', but often the intent is to use 'full'.`;\n    throw new Error(`Invalid configuration of route '{path: \"${fullPath}\", redirectTo: \"${route.redirectTo}\"}': please provide 'pathMatch'. ${exp}`);\n  }\n\n  if (route.pathMatch !== void 0 && route.pathMatch !== 'full' && route.pathMatch !== 'prefix') {\n    throw new Error(`Invalid configuration of route '${fullPath}': pathMatch can only be set to 'prefix' or 'full'`);\n  }\n\n  if (route.children) {\n    validateConfig(route.children, fullPath);\n  }\n}\n/**\n * @param {?} parentPath\n * @param {?} currentRoute\n * @return {?}\n */\n\n\nfunction getFullPath(parentPath, currentRoute) {\n  if (!currentRoute) {\n    return parentPath;\n  }\n\n  if (!parentPath && !currentRoute.path) {\n    return '';\n  } else if (parentPath && !currentRoute.path) {\n    return `${parentPath}/`;\n  } else if (!parentPath && currentRoute.path) {\n    return currentRoute.path;\n  } else {\n    return `${parentPath}/${currentRoute.path}`;\n  }\n}\n/**\n * Makes a copy of the config and adds any default required properties.\n * @param {?} r\n * @return {?}\n */\n\n\nfunction standardizeConfig(r) {\n  /** @type {?} */\n  const children = r.children && r.children.map(standardizeConfig);\n  /** @type {?} */\n\n  const c = children ? Object.assign(Object.assign({}, r), {\n    children\n  }) : Object.assign({}, r);\n\n  if (!c.component && (children || c.loadChildren) && c.outlet && c.outlet !== PRIMARY_OUTLET) {\n    c.component = ɵEmptyOutletComponent;\n  }\n\n  return c;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/router/src/utils/collection.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\n\n\nfunction shallowEqualArrays(a, b) {\n  if (a.length !== b.length) return false;\n\n  for (let i = 0; i < a.length; ++i) {\n    if (!shallowEqual(a[i], b[i])) return false;\n  }\n\n  return true;\n}\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\n\n\nfunction shallowEqual(a, b) {\n  // Casting Object.keys return values to include `undefined` as there are some cases\n  // in IE 11 where this can happen. Cannot provide a test because the behavior only\n  // exists in certain circumstances in IE 11, therefore doing this cast ensures the\n  // logic is correct for when this edge case is hit.\n\n  /** @type {?} */\n  const k1 =\n  /** @type {?} */\n  Object.keys(a);\n  /** @type {?} */\n\n  const k2 =\n  /** @type {?} */\n  Object.keys(b);\n\n  if (!k1 || !k2 || k1.length != k2.length) {\n    return false;\n  }\n  /** @type {?} */\n\n\n  let key;\n\n  for (let i = 0; i < k1.length; i++) {\n    key = k1[i];\n\n    if (!equalArraysOrString(a[key], b[key])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * Test equality for arrays of strings or a string.\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\n\n\nfunction equalArraysOrString(a, b) {\n  if (Array.isArray(a) && Array.isArray(b)) {\n    if (a.length != b.length) return false;\n    return a.every(\n    /**\n    * @param {?} aItem\n    * @return {?}\n    */\n    aItem => b.indexOf(aItem) > -1);\n  } else {\n    return a === b;\n  }\n}\n/**\n * Flattens single-level nested arrays.\n * @template T\n * @param {?} arr\n * @return {?}\n */\n\n\nfunction flatten(arr) {\n  return Array.prototype.concat.apply([], arr);\n}\n/**\n * Return the last element of an array.\n * @template T\n * @param {?} a\n * @return {?}\n */\n\n\nfunction last(a) {\n  return a.length > 0 ? a[a.length - 1] : null;\n}\n/**\n * Verifys all booleans in an array are `true`.\n * @param {?} bools\n * @return {?}\n */\n\n\nfunction and(bools) {\n  return !bools.some(\n  /**\n  * @param {?} v\n  * @return {?}\n  */\n  v => !v);\n}\n/**\n * @template K, V\n * @param {?} map\n * @param {?} callback\n * @return {?}\n */\n\n\nfunction forEach(map, callback) {\n  for (const prop in map) {\n    if (map.hasOwnProperty(prop)) {\n      callback(map[prop], prop);\n    }\n  }\n}\n/**\n * @template A, B\n * @param {?} obj\n * @param {?} fn\n * @return {?}\n */\n\n\nfunction waitForMap(obj, fn) {\n  if (Object.keys(obj).length === 0) {\n    return of({});\n  }\n  /** @type {?} */\n\n\n  const waitHead = [];\n  /** @type {?} */\n\n  const waitTail = [];\n  /** @type {?} */\n\n  const res = {};\n  forEach(obj,\n  /**\n  * @param {?} a\n  * @param {?} k\n  * @return {?}\n  */\n  (a, k) => {\n    /** @type {?} */\n    const mapped = fn(k, a).pipe(map(\n    /**\n    * @param {?} r\n    * @return {?}\n    */\n    r => res[k] = r));\n\n    if (k === PRIMARY_OUTLET) {\n      waitHead.push(mapped);\n    } else {\n      waitTail.push(mapped);\n    }\n  }); // Closure compiler has problem with using spread operator here. So we use \"Array.concat\".\n  // Note that we also need to cast the new promise because TypeScript cannot infer the type\n  // when calling the \"of\" function through \"Function.apply\"\n\n  return (\n    /** @type {?} */\n    of.apply(null, waitHead.concat(waitTail)).pipe(concatAll(), last$1(), map(\n    /**\n    * @return {?}\n    */\n    () => res))\n  );\n}\n/**\n * @template T\n * @param {?} value\n * @return {?}\n */\n\n\nfunction wrapIntoObservable(value) {\n  if (ɵisObservable(value)) {\n    return value;\n  }\n\n  if (ɵisPromise(value)) {\n    // Use `Promise.resolve()` to wrap promise-like instances.\n    // Required ie when a Resolver returns a AngularJS `$q` promise to correctly trigger the\n    // change detection.\n    return from(Promise.resolve(value));\n  }\n\n  return of(value);\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/router/src/url_tree.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @return {?}\n */\n\n\nfunction createEmptyUrlTree() {\n  return new UrlTree(new UrlSegmentGroup([], {}), {}, null);\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @param {?} exact\n * @return {?}\n */\n\n\nfunction containsTree(container, containee, exact) {\n  if (exact) {\n    return equalQueryParams(container.queryParams, containee.queryParams) && equalSegmentGroups(container.root, containee.root);\n  }\n\n  return containsQueryParams(container.queryParams, containee.queryParams) && containsSegmentGroup(container.root, containee.root);\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @return {?}\n */\n\n\nfunction equalQueryParams(container, containee) {\n  // TODO: This does not handle array params correctly.\n  return shallowEqual(container, containee);\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @return {?}\n */\n\n\nfunction equalSegmentGroups(container, containee) {\n  if (!equalPath(container.segments, containee.segments)) return false;\n  if (container.numberOfChildren !== containee.numberOfChildren) return false;\n\n  for (const c in containee.children) {\n    if (!container.children[c]) return false;\n    if (!equalSegmentGroups(container.children[c], containee.children[c])) return false;\n  }\n\n  return true;\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @return {?}\n */\n\n\nfunction containsQueryParams(container, containee) {\n  // TODO: This does not handle array params correctly.\n  return Object.keys(containee).length <= Object.keys(container).length && Object.keys(containee).every(\n  /**\n  * @param {?} key\n  * @return {?}\n  */\n  key => equalArraysOrString(container[key], containee[key]));\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @return {?}\n */\n\n\nfunction containsSegmentGroup(container, containee) {\n  return containsSegmentGroupHelper(container, containee, containee.segments);\n}\n/**\n * @param {?} container\n * @param {?} containee\n * @param {?} containeePaths\n * @return {?}\n */\n\n\nfunction containsSegmentGroupHelper(container, containee, containeePaths) {\n  if (container.segments.length > containeePaths.length) {\n    /** @type {?} */\n    const current = container.segments.slice(0, containeePaths.length);\n    if (!equalPath(current, containeePaths)) return false;\n    if (containee.hasChildren()) return false;\n    return true;\n  } else if (container.segments.length === containeePaths.length) {\n    if (!equalPath(container.segments, containeePaths)) return false;\n\n    for (const c in containee.children) {\n      if (!container.children[c]) return false;\n      if (!containsSegmentGroup(container.children[c], containee.children[c])) return false;\n    }\n\n    return true;\n  } else {\n    /** @type {?} */\n    const current = containeePaths.slice(0, container.segments.length);\n    /** @type {?} */\n\n    const next = containeePaths.slice(container.segments.length);\n    if (!equalPath(container.segments, current)) return false;\n    if (!container.children[PRIMARY_OUTLET]) return false;\n    return containsSegmentGroupHelper(container.children[PRIMARY_OUTLET], containee, next);\n  }\n}\n/**\n * \\@description\n *\n * Represents the parsed URL.\n *\n * Since a router state is a tree, and the URL is nothing but a serialized state, the URL is a\n * serialized tree.\n * UrlTree is a data structure that provides a lot of affordances in dealing with URLs\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * \\@Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const tree: UrlTree =\n *       router.parseUrl('/team/33/(user/victor//support:help)?debug=true#fragment');\n *     const f = tree.fragment; // return 'fragment'\n *     const q = tree.queryParams; // returns {debug: 'true'}\n *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\n *     const s: UrlSegment[] = g.segments; // returns 2 segments 'team' and '33'\n *     g.children[PRIMARY_OUTLET].segments; // returns 2 segments 'user' and 'victor'\n *     g.children['support'].segments; // return 1 segment 'help'\n *   }\n * }\n * ```\n *\n * \\@publicApi\n */\n\n\nclass UrlTree {\n  /**\n   * \\@internal\n   * @param {?} root\n   * @param {?} queryParams\n   * @param {?} fragment\n   */\n  constructor(root, queryParams, fragment) {\n    this.root = root;\n    this.queryParams = queryParams;\n    this.fragment = fragment;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  get queryParamMap() {\n    if (!this._queryParamMap) {\n      this._queryParamMap = convertToParamMap(this.queryParams);\n    }\n\n    return this._queryParamMap;\n  }\n  /**\n   * \\@docsNotRequired\n   * @return {?}\n   */\n\n\n  toString() {\n    return DEFAULT_SERIALIZER.serialize(this);\n  }\n\n}\n\nif (false) {\n  /**\n   * \\@internal\n   * @type {?}\n   */\n  UrlTree.prototype._queryParamMap;\n  /**\n   * The root segment group of the URL tree\n   * @type {?}\n   */\n\n  UrlTree.prototype.root;\n  /**\n   * The query params of the URL\n   * @type {?}\n   */\n\n  UrlTree.prototype.queryParams;\n  /**\n   * The fragment of the URL\n   * @type {?}\n   */\n\n  UrlTree.prototype.fragment;\n}\n/**\n * \\@description\n *\n * Represents the parsed URL segment group.\n *\n * See `UrlTree` for more information.\n *\n * \\@publicApi\n */\n\n\nclass UrlSegmentGroup {\n  /**\n   * @param {?} segments\n   * @param {?} children\n   */\n  constructor(segments, children) {\n    this.segments = segments;\n    this.children = children;\n    /**\n     * The parent node in the url tree\n     */\n\n    this.parent = null;\n    forEach(children,\n    /**\n    * @template THIS\n    * @this {THIS}\n    * @param {?} v\n    * @param {?} k\n    * @return {THIS}\n    */\n    (v, k) => v.parent = this);\n  }\n  /**\n   * Whether the segment has child segments\n   * @return {?}\n   */\n\n\n  hasChildren() {\n    return this.numberOfChildren > 0;\n  }\n  /**\n   * Number of child segments\n   * @return {?}\n   */\n\n\n  get numberOfChildren() {\n    return Object.keys(this.children).length;\n  }\n  /**\n   * \\@docsNotRequired\n   * @return {?}\n   */\n\n\n  toString() {\n    return serializePaths(this);\n  }\n\n}\n\nif (false) {\n  /**\n   * \\@internal\n   * @type {?}\n   */\n  UrlSegmentGroup.prototype._sourceSegment;\n  /**\n   * \\@internal\n   * @type {?}\n   */\n\n  UrlSegmentGroup.prototype._segmentIndexShift;\n  /**\n   * The parent node in the url tree\n   * @type {?}\n   */\n\n  UrlSegmentGroup.prototype.parent;\n  /**\n   * The URL segments of this group. See `UrlSegment` for more information\n   * @type {?}\n   */\n\n  UrlSegmentGroup.prototype.segments;\n  /**\n   * The list of children of this group\n   * @type {?}\n   */\n\n  UrlSegmentGroup.prototype.children;\n}\n/**\n * \\@description\n *\n * Represents a single URL segment.\n *\n * A UrlSegment is a part of a URL between the two slashes. It contains a path and the matrix\n * parameters associated with the segment.\n *\n * \\@usageNotes\n *  ### Example\n *\n * ```\n * \\@Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const tree: UrlTree = router.parseUrl('/team;id=33');\n *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\n *     const s: UrlSegment[] = g.segments;\n *     s[0].path; // returns 'team'\n *     s[0].parameters; // returns {id: 33}\n *   }\n * }\n * ```\n *\n * \\@publicApi\n */\n\n\nclass UrlSegment {\n  /**\n   * @param {?} path\n   * @param {?} parameters\n   */\n  constructor(path, parameters) {\n    this.path = path;\n    this.parameters = parameters;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  get parameterMap() {\n    if (!this._parameterMap) {\n      this._parameterMap = convertToParamMap(this.parameters);\n    }\n\n    return this._parameterMap;\n  }\n  /**\n   * \\@docsNotRequired\n   * @return {?}\n   */\n\n\n  toString() {\n    return serializePath(this);\n  }\n\n}\n\nif (false) {\n  /**\n   * \\@internal\n   * @type {?}\n   */\n  UrlSegment.prototype._parameterMap;\n  /**\n   * The path part of a URL segment\n   * @type {?}\n   */\n\n  UrlSegment.prototype.path;\n  /**\n   * The matrix parameters associated with a segment\n   * @type {?}\n   */\n\n  UrlSegment.prototype.parameters;\n}\n/**\n * @param {?} as\n * @param {?} bs\n * @return {?}\n */\n\n\nfunction equalSegments(as, bs) {\n  return equalPath(as, bs) && as.every(\n  /**\n  * @param {?} a\n  * @param {?} i\n  * @return {?}\n  */\n  (a, i) => shallowEqual(a.parameters, bs[i].parameters));\n}\n/**\n * @param {?} as\n * @param {?} bs\n * @return {?}\n */\n\n\nfunction equalPath(as, bs) {\n  if (as.length !== bs.length) return false;\n  return as.every(\n  /**\n  * @param {?} a\n  * @param {?} i\n  * @return {?}\n  */\n  (a, i) => a.path === bs[i].path);\n}\n/**\n * @template T\n * @param {?} segment\n * @param {?} fn\n * @return {?}\n */\n\n\nfunction mapChildrenIntoArray(segment, fn) {\n  /** @type {?} */\n  let res = [];\n  forEach(segment.children,\n  /**\n  * @param {?} child\n  * @param {?} childOutlet\n  * @return {?}\n  */\n  (child, childOutlet) => {\n    if (childOutlet === PRIMARY_OUTLET) {\n      res = res.concat(fn(child, childOutlet));\n    }\n  });\n  forEach(segment.children,\n  /**\n  * @param {?} child\n  * @param {?} childOutlet\n  * @return {?}\n  */\n  (child, childOutlet) => {\n    if (childOutlet !== PRIMARY_OUTLET) {\n      res = res.concat(fn(child, childOutlet));\n    }\n  });\n  return res;\n}\n/**\n * \\@description\n *\n * Serializes and deserializes a URL string into a URL tree.\n *\n * The url serialization strategy is customizable. You can\n * make all URLs case insensitive by providing a custom UrlSerializer.\n *\n * See `DefaultUrlSerializer` for an example of a URL serializer.\n *\n * \\@publicApi\n * @abstract\n */\n\n\nclass UrlSerializer {}\n\nif (false) {\n  /**\n   * Parse a url into a `UrlTree`\n   * @abstract\n   * @param {?} url\n   * @return {?}\n   */\n  UrlSerializer.prototype.parse = function (url) {};\n  /**\n   * Converts a `UrlTree` into a url\n   * @abstract\n   * @param {?} tree\n   * @return {?}\n   */\n\n\n  UrlSerializer.prototype.serialize = function (tree) {};\n}\n/**\n * \\@description\n *\n * A default implementation of the `UrlSerializer`.\n *\n * Example URLs:\n *\n * ```\n * /inbox/33(popup:compose)\n * /inbox/33;open=true/messages/44\n * ```\n *\n * DefaultUrlSerializer uses parentheses to serialize secondary segments (e.g., popup:compose), the\n * colon syntax to specify the outlet, and the ';parameter=value' syntax (e.g., open=true) to\n * specify route specific parameters.\n *\n * \\@publicApi\n */\n\n\nclass DefaultUrlSerializer {\n  /**\n   * Parses a url into a `UrlTree`\n   * @param {?} url\n   * @return {?}\n   */\n  parse(url) {\n    /** @type {?} */\n    const p = new UrlParser(url);\n    return new UrlTree(p.parseRootSegment(), p.parseQueryParams(), p.parseFragment());\n  }\n  /**\n   * Converts a `UrlTree` into a url\n   * @param {?} tree\n   * @return {?}\n   */\n\n\n  serialize(tree) {\n    /** @type {?} */\n    const segment = `/${serializeSegment(tree.root, true)}`;\n    /** @type {?} */\n\n    const query = serializeQueryParams(tree.queryParams);\n    /** @type {?} */\n\n    const fragment = typeof tree.fragment === `string` ? `#${encodeUriFragment(\n    /** @type {?} */\n    tree.fragment)}` : '';\n    return `${segment}${query}${fragment}`;\n  }\n\n}\n/** @type {?} */\n\n\nconst DEFAULT_SERIALIZER = new DefaultUrlSerializer();\n/**\n * @param {?} segment\n * @return {?}\n */\n\nfunction serializePaths(segment) {\n  return segment.segments.map(\n  /**\n  * @param {?} p\n  * @return {?}\n  */\n  p => serializePath(p)).join('/');\n}\n/**\n * @param {?} segment\n * @param {?} root\n * @return {?}\n */\n\n\nfunction serializeSegment(segment, root) {\n  if (!segment.hasChildren()) {\n    return serializePaths(segment);\n  }\n\n  if (root) {\n    /** @type {?} */\n    const primary = segment.children[PRIMARY_OUTLET] ? serializeSegment(segment.children[PRIMARY_OUTLET], false) : '';\n    /** @type {?} */\n\n    const children = [];\n    forEach(segment.children,\n    /**\n    * @param {?} v\n    * @param {?} k\n    * @return {?}\n    */\n    (v, k) => {\n      if (k !== PRIMARY_OUTLET) {\n        children.push(`${k}:${serializeSegment(v, false)}`);\n      }\n    });\n    return children.length > 0 ? `${primary}(${children.join('//')})` : primary;\n  } else {\n    /** @type {?} */\n    const children = mapChildrenIntoArray(segment,\n    /**\n    * @param {?} v\n    * @param {?} k\n    * @return {?}\n    */\n    (v, k) => {\n      if (k === PRIMARY_OUTLET) {\n        return [serializeSegment(segment.children[PRIMARY_OUTLET], false)];\n      }\n\n      return [`${k}:${serializeSegment(v, false)}`];\n    });\n    return `${serializePaths(segment)}/(${children.join('//')})`;\n  }\n}\n/**\n * Encodes a URI string with the default encoding. This function will only ever be called from\n * `encodeUriQuery` or `encodeUriSegment` as it's the base set of encodings to be used. We need\n * a custom encoding because encodeURIComponent is too aggressive and encodes stuff that doesn't\n * have to be encoded per https://url.spec.whatwg.org.\n * @param {?} s\n * @return {?}\n */\n\n\nfunction encodeUriString(s) {\n  return encodeURIComponent(s).replace(/%40/g, '@').replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',');\n}\n/**\n * This function should be used to encode both keys and values in a query string key/value. In\n * the following URL, you need to call encodeUriQuery on \"k\" and \"v\":\n *\n * http://www.site.org/html;mk=mv?k=v#f\n * @param {?} s\n * @return {?}\n */\n\n\nfunction encodeUriQuery(s) {\n  return encodeUriString(s).replace(/%3B/gi, ';');\n}\n/**\n * This function should be used to encode a URL fragment. In the following URL, you need to call\n * encodeUriFragment on \"f\":\n *\n * http://www.site.org/html;mk=mv?k=v#f\n * @param {?} s\n * @return {?}\n */\n\n\nfunction encodeUriFragment(s) {\n  return encodeURI(s);\n}\n/**\n * This function should be run on any URI segment as well as the key and value in a key/value\n * pair for matrix params. In the following URL, you need to call encodeUriSegment on \"html\",\n * \"mk\", and \"mv\":\n *\n * http://www.site.org/html;mk=mv?k=v#f\n * @param {?} s\n * @return {?}\n */\n\n\nfunction encodeUriSegment(s) {\n  return encodeUriString(s).replace(/\\(/g, '%28').replace(/\\)/g, '%29').replace(/%26/gi, '&');\n}\n/**\n * @param {?} s\n * @return {?}\n */\n\n\nfunction decode(s) {\n  return decodeURIComponent(s);\n} // Query keys/values should have the \"+\" replaced first, as \"+\" in a query string is \" \".\n// decodeURIComponent function will not decode \"+\" as a space.\n\n/**\n * @param {?} s\n * @return {?}\n */\n\n\nfunction decodeQuery(s) {\n  return decode(s.replace(/\\+/g, '%20'));\n}\n/**\n * @param {?} path\n * @return {?}\n */\n\n\nfunction serializePath(path) {\n  return `${encodeUriSegment(path.path)}${serializeMatrixParams(path.parameters)}`;\n}\n/**\n * @param {?} params\n * @return {?}\n */\n\n\nfunction serializeMatrixParams(params) {\n  return Object.keys(params).map(\n  /**\n  * @param {?} key\n  * @return {?}\n  */\n  key => `;${encodeUriSegment(key)}=${encodeUriSegment(params[key])}`).join('');\n}\n/**\n * @param {?} params\n * @return {?}\n */\n\n\nfunction serializeQueryParams(params) {\n  /** @type {?} */\n  const strParams = Object.keys(params).map(\n  /**\n  * @param {?} name\n  * @return {?}\n  */\n  name => {\n    /** @type {?} */\n    const value = params[name];\n    return Array.isArray(value) ? value.map(\n    /**\n    * @param {?} v\n    * @return {?}\n    */\n    v => `${encodeUriQuery(name)}=${encodeUriQuery(v)}`).join('&') : `${encodeUriQuery(name)}=${encodeUriQuery(value)}`;\n  });\n  return strParams.length ? `?${strParams.join(\"&\")}` : '';\n}\n/** @type {?} */\n\n\nconst SEGMENT_RE = /^[^\\/()?;=#]+/;\n/**\n * @param {?} str\n * @return {?}\n */\n\nfunction matchSegments(str) {\n  /** @type {?} */\n  const match = str.match(SEGMENT_RE);\n  return match ? match[0] : '';\n}\n/** @type {?} */\n\n\nconst QUERY_PARAM_RE = /^[^=?&#]+/; // Return the name of the query param at the start of the string or an empty string\n\n/**\n * @param {?} str\n * @return {?}\n */\n\nfunction matchQueryParams(str) {\n  /** @type {?} */\n  const match = str.match(QUERY_PARAM_RE);\n  return match ? match[0] : '';\n}\n/** @type {?} */\n\n\nconst QUERY_PARAM_VALUE_RE = /^[^?&#]+/; // Return the value of the query param at the start of the string or an empty string\n\n/**\n * @param {?} str\n * @return {?}\n */\n\nfunction matchUrlQueryParamValue(str) {\n  /** @type {?} */\n  const match = str.match(QUERY_PARAM_VALUE_RE);\n  return match ? match[0] : '';\n}\n\nclass UrlParser {\n  /**\n   * @param {?} url\n   */\n  constructor(url) {\n    this.url = url;\n    this.remaining = url;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  parseRootSegment() {\n    this.consumeOptional('/');\n\n    if (this.remaining === '' || this.peekStartsWith('?') || this.peekStartsWith('#')) {\n      return new UrlSegmentGroup([], {});\n    } // The root segment group never has segments\n\n\n    return new UrlSegmentGroup([], this.parseChildren());\n  }\n  /**\n   * @return {?}\n   */\n\n\n  parseQueryParams() {\n    /** @type {?} */\n    const params = {};\n\n    if (this.consumeOptional('?')) {\n      do {\n        this.parseQueryParam(params);\n      } while (this.consumeOptional('&'));\n    }\n\n    return params;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  parseFragment() {\n    return this.consumeOptional('#') ? decodeURIComponent(this.remaining) : null;\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n\n\n  parseChildren() {\n    if (this.remaining === '') {\n      return {};\n    }\n\n    this.consumeOptional('/');\n    /** @type {?} */\n\n    const segments = [];\n\n    if (!this.peekStartsWith('(')) {\n      segments.push(this.parseSegment());\n    }\n\n    while (this.peekStartsWith('/') && !this.peekStartsWith('//') && !this.peekStartsWith('/(')) {\n      this.capture('/');\n      segments.push(this.parseSegment());\n    }\n    /** @type {?} */\n\n\n    let children = {};\n\n    if (this.peekStartsWith('/(')) {\n      this.capture('/');\n      children = this.parseParens(true);\n    }\n    /** @type {?} */\n\n\n    let res = {};\n\n    if (this.peekStartsWith('(')) {\n      res = this.parseParens(false);\n    }\n\n    if (segments.length > 0 || Object.keys(children).length > 0) {\n      res[PRIMARY_OUTLET] = new UrlSegmentGroup(segments, children);\n    }\n\n    return res;\n  } // parse a segment with its matrix parameters\n  // ie `name;k1=v1;k2`\n\n  /**\n   * @private\n   * @return {?}\n   */\n\n\n  parseSegment() {\n    /** @type {?} */\n    const path = matchSegments(this.remaining);\n\n    if (path === '' && this.peekStartsWith(';')) {\n      throw new Error(`Empty path url segment cannot have parameters: '${this.remaining}'.`);\n    }\n\n    this.capture(path);\n    return new UrlSegment(decode(path), this.parseMatrixParams());\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n\n\n  parseMatrixParams() {\n    /** @type {?} */\n    const params = {};\n\n    while (this.consumeOptional(';')) {\n      this.parseParam(params);\n    }\n\n    return params;\n  }\n  /**\n   * @private\n   * @param {?} params\n   * @return {?}\n   */\n\n\n  parseParam(params) {\n    /** @type {?} */\n    const key = matchSegments(this.remaining);\n\n    if (!key) {\n      return;\n    }\n\n    this.capture(key);\n    /** @type {?} */\n\n    let value = '';\n\n    if (this.consumeOptional('=')) {\n      /** @type {?} */\n      const valueMatch = matchSegments(this.remaining);\n\n      if (valueMatch) {\n        value = valueMatch;\n        this.capture(value);\n      }\n    }\n\n    params[decode(key)] = decode(value);\n  } // Parse a single query parameter `name[=value]`\n\n  /**\n   * @private\n   * @param {?} params\n   * @return {?}\n   */\n\n\n  parseQueryParam(params) {\n    /** @type {?} */\n    const key = matchQueryParams(this.remaining);\n\n    if (!key) {\n      return;\n    }\n\n    this.capture(key);\n    /** @type {?} */\n\n    let value = '';\n\n    if (this.consumeOptional('=')) {\n      /** @type {?} */\n      const valueMatch = matchUrlQueryParamValue(this.remaining);\n\n      if (valueMatch) {\n        value = valueMatch;\n        this.capture(value);\n      }\n    }\n    /** @type {?} */\n\n\n    const decodedKey = decodeQuery(key);\n    /** @type {?} */\n\n    const decodedVal = decodeQuery(value);\n\n    if (params.hasOwnProperty(decodedKey)) {\n      // Append to existing values\n\n      /** @type {?} */\n      let currentVal = params[decodedKey];\n\n      if (!Array.isArray(currentVal)) {\n        currentVal = [currentVal];\n        params[decodedKey] = currentVal;\n      }\n\n      currentVal.push(decodedVal);\n    } else {\n      // Create a new value\n      params[decodedKey] = decodedVal;\n    }\n  } // parse `(a/b//outlet_name:c/d)`\n\n  /**\n   * @private\n   * @param {?} allowPrimary\n   * @return {?}\n   */\n\n\n  parseParens(allowPrimary) {\n    /** @type {?} */\n    const segments = {};\n    this.capture('(');\n\n    while (!this.consumeOptional(')') && this.remaining.length > 0) {\n      /** @type {?} */\n      const path = matchSegments(this.remaining);\n      /** @type {?} */\n\n      const next = this.remaining[path.length]; // if is is not one of these characters, then the segment was unescaped\n      // or the group was not closed\n\n      if (next !== '/' && next !== ')' && next !== ';') {\n        throw new Error(`Cannot parse url '${this.url}'`);\n      }\n      /** @type {?} */\n\n\n      let outletName =\n      /** @type {?} */\n      undefined;\n\n      if (path.indexOf(':') > -1) {\n        outletName = path.substr(0, path.indexOf(':'));\n        this.capture(outletName);\n        this.capture(':');\n      } else if (allowPrimary) {\n        outletName = PRIMARY_OUTLET;\n      }\n      /** @type {?} */\n\n\n      const children = this.parseChildren();\n      segments[outletName] = Object.keys(children).length === 1 ? children[PRIMARY_OUTLET] : new UrlSegmentGroup([], children);\n      this.consumeOptional('//');\n    }\n\n    return segments;\n  }\n  /**\n   * @private\n   * @param {?} str\n   * @return {?}\n   */\n\n\n  peekStartsWith(str) {\n    return this.remaining.startsWith(str);\n  } // Consumes the prefix when it is present and returns whether it has been consumed\n\n  /**\n   * @private\n   * @param {?} str\n   * @return {?}\n   */\n\n\n  consumeOptional(str) {\n    if (this.peekStartsWith(str)) {\n      this.remaining = this.remaining.substring(str.length);\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * @private\n   * @param {?} str\n   * @return {?}\n   */\n\n\n  capture(str) {\n    if (!this.consumeOptional(str)) {\n      throw new Error(`Expected \"${str}\".`);\n    }\n  }\n\n}\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  UrlParser.prototype.remaining;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  UrlParser.prototype.url;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/router/src/utils/tree.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @template T\n */\n\n\nclass Tree {\n  /**\n   * @param {?} root\n   */\n  constructor(root) {\n    this._root = root;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  get root() {\n    return this._root.value;\n  }\n  /**\n   * \\@internal\n   * @param {?} t\n   * @return {?}\n   */\n\n\n  parent(t) {\n    /** @type {?} */\n    const p = this.pathFromRoot(t);\n    return p.length > 1 ? p[p.length - 2] : null;\n  }\n  /**\n   * \\@internal\n   * @param {?} t\n   * @return {?}\n   */\n\n\n  children(t) {\n    /** @type {?} */\n    const n = findNode(t, this._root);\n    return n ? n.children.map(\n    /**\n    * @param {?} t\n    * @return {?}\n    */\n    t => t.value) : [];\n  }\n  /**\n   * \\@internal\n   * @param {?} t\n   * @return {?}\n   */\n\n\n  firstChild(t) {\n    /** @type {?} */\n    const n = findNode(t, this._root);\n    return n && n.children.length > 0 ? n.children[0].value : null;\n  }\n  /**\n   * \\@internal\n   * @param {?} t\n   * @return {?}\n   */\n\n\n  siblings(t) {\n    /** @type {?} */\n    const p = findPath(t, this._root);\n    if (p.length < 2) return [];\n    /** @type {?} */\n\n    const c = p[p.length - 2].children.map(\n    /**\n    * @param {?} c\n    * @return {?}\n    */\n    c => c.value);\n    return c.filter(\n    /**\n    * @param {?} cc\n    * @return {?}\n    */\n    cc => cc !== t);\n  }\n  /**\n   * \\@internal\n   * @param {?} t\n   * @return {?}\n   */\n\n\n  pathFromRoot(t) {\n    return findPath(t, this._root).map(\n    /**\n    * @param {?} s\n    * @return {?}\n    */\n    s => s.value);\n  }\n\n}\n\nif (false) {\n  /**\n   * \\@internal\n   * @type {?}\n   */\n  Tree.prototype._root;\n} // DFS for the node matching the value\n\n/**\n * @template T\n * @param {?} value\n * @param {?} node\n * @return {?}\n */\n\n\nfunction findNode(value, node) {\n  if (value === node.value) return node;\n\n  for (const child of node.children) {\n    /** @type {?} */\n    const node = findNode(value, child);\n    if (node) return node;\n  }\n\n  return null;\n} // Return the path to the node with the given value using DFS\n\n/**\n * @template T\n * @param {?} value\n * @param {?} node\n * @return {?}\n */\n\n\nfunction findPath(value, node) {\n  if (value === node.value) return [node];\n\n  for (const child of node.children) {\n    /** @type {?} */\n    const path = findPath(value, child);\n\n    if (path.length) {\n      path.unshift(node);\n      return path;\n    }\n  }\n\n  return [];\n}\n/**\n * @template T\n */\n\n\nclass TreeNode {\n  /**\n   * @param {?} value\n   * @param {?} children\n   */\n  constructor(value, children) {\n    this.value = value;\n    this.children = children;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  toString() {\n    return `TreeNode(${this.value})`;\n  }\n\n}\n\nif (false) {\n  /** @type {?} */\n  TreeNode.prototype.value;\n  /** @type {?} */\n\n  TreeNode.prototype.children;\n} // Return the list of T indexed by outlet name\n\n/**\n * @template T\n * @param {?} node\n * @return {?}\n */\n\n\nfunction nodeChildrenAsMap(node) {\n  /** @type {?} */\n  const map = {};\n\n  if (node) {\n    node.children.forEach(\n    /**\n    * @param {?} child\n    * @return {?}\n    */\n    child => map[child.value.outlet] = child);\n  }\n\n  return map;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/router/src/router_state.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Represents the state of the router as a tree of activated routes.\n *\n * \\@usageNotes\n *\n * Every node in the route tree is an `ActivatedRoute` instance\n * that knows about the \"consumed\" URL segments, the extracted parameters,\n * and the resolved data.\n * Use the `ActivatedRoute` properties to traverse the tree from any node.\n *\n * ### Example\n *\n * ```\n * \\@Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const state: RouterState = router.routerState;\n *     const root: ActivatedRoute = state.root;\n *     const child = root.firstChild;\n *     const id: Observable<string> = child.params.map(p => p.id);\n *     //...\n *   }\n * }\n * ```\n *\n * @see `ActivatedRoute`\n *\n * \\@publicApi\n */\n\n\nclass RouterState extends Tree {\n  /**\n   * \\@internal\n   * @param {?} root\n   * @param {?} snapshot\n   */\n  constructor(root, snapshot) {\n    super(root);\n    this.snapshot = snapshot;\n    setRouterState(\n    /** @type {?} */\n    this, root);\n  }\n  /**\n   * @return {?}\n   */\n\n\n  toString() {\n    return this.snapshot.toString();\n  }\n\n}\n\nif (false) {\n  /**\n   * The current snapshot of the router state\n   * @type {?}\n   */\n  RouterState.prototype.snapshot;\n}\n/**\n * @param {?} urlTree\n * @param {?} rootComponent\n * @return {?}\n */\n\n\nfunction createEmptyState(urlTree, rootComponent) {\n  /** @type {?} */\n  const snapshot = createEmptyStateSnapshot(urlTree, rootComponent);\n  /** @type {?} */\n\n  const emptyUrl = new BehaviorSubject([new UrlSegment('', {})]);\n  /** @type {?} */\n\n  const emptyParams = new BehaviorSubject({});\n  /** @type {?} */\n\n  const emptyData = new BehaviorSubject({});\n  /** @type {?} */\n\n  const emptyQueryParams = new BehaviorSubject({});\n  /** @type {?} */\n\n  const fragment = new BehaviorSubject('');\n  /** @type {?} */\n\n  const activated = new ActivatedRoute(emptyUrl, emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, snapshot.root);\n  activated.snapshot = snapshot.root;\n  return new RouterState(new TreeNode(activated, []), snapshot);\n}\n/**\n * @param {?} urlTree\n * @param {?} rootComponent\n * @return {?}\n */\n\n\nfunction createEmptyStateSnapshot(urlTree, rootComponent) {\n  /** @type {?} */\n  const emptyParams = {};\n  /** @type {?} */\n\n  const emptyData = {};\n  /** @type {?} */\n\n  const emptyQueryParams = {};\n  /** @type {?} */\n\n  const fragment = '';\n  /** @type {?} */\n\n  const activated = new ActivatedRouteSnapshot([], emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, null, urlTree.root, -1, {});\n  return new RouterStateSnapshot('', new TreeNode(activated, []));\n}\n/**\n * Provides access to information about a route associated with a component\n * that is loaded in an outlet.\n * Use to traverse the `RouterState` tree and extract information from nodes.\n *\n * {\\@example router/activated-route/module.ts region=\"activated-route\"\n *     header=\"activated-route.component.ts\"}\n *\n * \\@publicApi\n */\n\n\nclass ActivatedRoute {\n  /**\n   * \\@internal\n   * @param {?} url\n   * @param {?} params\n   * @param {?} queryParams\n   * @param {?} fragment\n   * @param {?} data\n   * @param {?} outlet\n   * @param {?} component\n   * @param {?} futureSnapshot\n   */\n  constructor(url, params, queryParams, fragment, data, outlet, component, futureSnapshot) {\n    this.url = url;\n    this.params = params;\n    this.queryParams = queryParams;\n    this.fragment = fragment;\n    this.data = data;\n    this.outlet = outlet;\n    this.component = component;\n    this._futureSnapshot = futureSnapshot;\n  }\n  /**\n   * The configuration used to match this route.\n   * @return {?}\n   */\n\n\n  get routeConfig() {\n    return this._futureSnapshot.routeConfig;\n  }\n  /**\n   * The root of the router state.\n   * @return {?}\n   */\n\n\n  get root() {\n    return this._routerState.root;\n  }\n  /**\n   * The parent of this route in the router state tree.\n   * @return {?}\n   */\n\n\n  get parent() {\n    return this._routerState.parent(this);\n  }\n  /**\n   * The first child of this route in the router state tree.\n   * @return {?}\n   */\n\n\n  get firstChild() {\n    return this._routerState.firstChild(this);\n  }\n  /**\n   * The children of this route in the router state tree.\n   * @return {?}\n   */\n\n\n  get children() {\n    return this._routerState.children(this);\n  }\n  /**\n   * The path from the root of the router state tree to this route.\n   * @return {?}\n   */\n\n\n  get pathFromRoot() {\n    return this._routerState.pathFromRoot(this);\n  }\n  /**\n   * An Observable that contains a map of the required and optional parameters\n   * specific to the route.\n   * The map supports retrieving single and multiple values from the same parameter.\n   * @return {?}\n   */\n\n\n  get paramMap() {\n    if (!this._paramMap) {\n      this._paramMap = this.params.pipe(map(\n      /**\n      * @param {?} p\n      * @return {?}\n      */\n      p => convertToParamMap(p)));\n    }\n\n    return this._paramMap;\n  }\n  /**\n   * An Observable that contains a map of the query parameters available to all routes.\n   * The map supports retrieving single and multiple values from the query parameter.\n   * @return {?}\n   */\n\n\n  get queryParamMap() {\n    if (!this._queryParamMap) {\n      this._queryParamMap = this.queryParams.pipe(map(\n      /**\n      * @param {?} p\n      * @return {?}\n      */\n      p => convertToParamMap(p)));\n    }\n\n    return this._queryParamMap;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  toString() {\n    return this.snapshot ? this.snapshot.toString() : `Future(${this._futureSnapshot})`;\n  }\n\n}\n\nif (false) {\n  /**\n   * The current snapshot of this route\n   * @type {?}\n   */\n  ActivatedRoute.prototype.snapshot;\n  /**\n   * \\@internal\n   * @type {?}\n   */\n\n  ActivatedRoute.prototype._futureSnapshot;\n  /**\n   * \\@internal\n   * @type {?}\n   */\n\n  ActivatedRoute.prototype._routerState;\n  /**\n   * \\@internal\n   * @type {?}\n   */\n\n  ActivatedRoute.prototype._paramMap;\n  /**\n   * \\@internal\n   * @type {?}\n   */\n\n  ActivatedRoute.prototype._queryParamMap;\n  /**\n   * An observable of the URL segments matched by this route.\n   * @type {?}\n   */\n\n  ActivatedRoute.prototype.url;\n  /**\n   * An observable of the matrix parameters scoped to this route.\n   * @type {?}\n   */\n\n  ActivatedRoute.prototype.params;\n  /**\n   * An observable of the query parameters shared by all the routes.\n   * @type {?}\n   */\n\n  ActivatedRoute.prototype.queryParams;\n  /**\n   * An observable of the URL fragment shared by all the routes.\n   * @type {?}\n   */\n\n  ActivatedRoute.prototype.fragment;\n  /**\n   * An observable of the static and resolved data of this route.\n   * @type {?}\n   */\n\n  ActivatedRoute.prototype.data;\n  /**\n   * The outlet name of the route, a constant.\n   * @type {?}\n   */\n\n  ActivatedRoute.prototype.outlet;\n  /**\n   * The component of the route, a constant.\n   * @type {?}\n   */\n\n  ActivatedRoute.prototype.component;\n}\n/**\n * Returns the inherited params, data, and resolve for a given route.\n * By default, this only inherits values up to the nearest path-less or component-less route.\n * \\@internal\n * @param {?} route\n * @param {?=} paramsInheritanceStrategy\n * @return {?}\n */\n\n\nfunction inheritedParamsDataResolve(route, paramsInheritanceStrategy = 'emptyOnly') {\n  /** @type {?} */\n  const pathFromRoot = route.pathFromRoot;\n  /** @type {?} */\n\n  let inheritingStartingFrom = 0;\n\n  if (paramsInheritanceStrategy !== 'always') {\n    inheritingStartingFrom = pathFromRoot.length - 1;\n\n    while (inheritingStartingFrom >= 1) {\n      /** @type {?} */\n      const current = pathFromRoot[inheritingStartingFrom];\n      /** @type {?} */\n\n      const parent = pathFromRoot[inheritingStartingFrom - 1]; // current route is an empty path => inherits its parent's params and data\n\n      if (current.routeConfig && current.routeConfig.path === '') {\n        inheritingStartingFrom--; // parent is componentless => current route should inherit its params and data\n      } else if (!parent.component) {\n        inheritingStartingFrom--;\n      } else {\n        break;\n      }\n    }\n  }\n\n  return flattenInherited(pathFromRoot.slice(inheritingStartingFrom));\n}\n/**\n * \\@internal\n * @param {?} pathFromRoot\n * @return {?}\n */\n\n\nfunction flattenInherited(pathFromRoot) {\n  return pathFromRoot.reduce(\n  /**\n  * @param {?} res\n  * @param {?} curr\n  * @return {?}\n  */\n  (res, curr) => {\n    /** @type {?} */\n    const params = Object.assign(Object.assign({}, res.params), curr.params);\n    /** @type {?} */\n\n    const data = Object.assign(Object.assign({}, res.data), curr.data);\n    /** @type {?} */\n\n    const resolve = Object.assign(Object.assign({}, res.resolve), curr._resolvedData);\n    return {\n      params,\n      data,\n      resolve\n    };\n  },\n  /** @type {?} */\n  {\n    params: {},\n    data: {},\n    resolve: {}\n  });\n}\n/**\n * \\@description\n *\n * Contains the information about a route associated with a component loaded in an\n * outlet at a particular moment in time. ActivatedRouteSnapshot can also be used to\n * traverse the router state tree.\n *\n * ```\n * \\@Component({templateUrl:'./my-component.html'})\n * class MyComponent {\n *   constructor(route: ActivatedRoute) {\n *     const id: string = route.snapshot.params.id;\n *     const url: string = route.snapshot.url.join('');\n *     const user = route.snapshot.data.user;\n *   }\n * }\n * ```\n *\n * \\@publicApi\n */\n\n\nclass ActivatedRouteSnapshot {\n  /**\n   * \\@internal\n   * @param {?} url\n   * @param {?} params\n   * @param {?} queryParams\n   * @param {?} fragment\n   * @param {?} data\n   * @param {?} outlet\n   * @param {?} component\n   * @param {?} routeConfig\n   * @param {?} urlSegment\n   * @param {?} lastPathIndex\n   * @param {?} resolve\n   */\n  constructor(url, params, queryParams, fragment, data, outlet, component, routeConfig, urlSegment, lastPathIndex, resolve) {\n    this.url = url;\n    this.params = params;\n    this.queryParams = queryParams;\n    this.fragment = fragment;\n    this.data = data;\n    this.outlet = outlet;\n    this.component = component;\n    this.routeConfig = routeConfig;\n    this._urlSegment = urlSegment;\n    this._lastPathIndex = lastPathIndex;\n    this._resolve = resolve;\n  }\n  /**\n   * The root of the router state\n   * @return {?}\n   */\n\n\n  get root() {\n    return this._routerState.root;\n  }\n  /**\n   * The parent of this route in the router state tree\n   * @return {?}\n   */\n\n\n  get parent() {\n    return this._routerState.parent(this);\n  }\n  /**\n   * The first child of this route in the router state tree\n   * @return {?}\n   */\n\n\n  get firstChild() {\n    return this._routerState.firstChild(this);\n  }\n  /**\n   * The children of this route in the router state tree\n   * @return {?}\n   */\n\n\n  get children() {\n    return this._routerState.children(this);\n  }\n  /**\n   * The path from the root of the router state tree to this route\n   * @return {?}\n   */\n\n\n  get pathFromRoot() {\n    return this._routerState.pathFromRoot(this);\n  }\n  /**\n   * @return {?}\n   */\n\n\n  get paramMap() {\n    if (!this._paramMap) {\n      this._paramMap = convertToParamMap(this.params);\n    }\n\n    return this._paramMap;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  get queryParamMap() {\n    if (!this._queryParamMap) {\n      this._queryParamMap = convertToParamMap(this.queryParams);\n    }\n\n    return this._queryParamMap;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  toString() {\n    /** @type {?} */\n    const url = this.url.map(\n    /**\n    * @param {?} segment\n    * @return {?}\n    */\n    segment => segment.toString()).join('/');\n    /** @type {?} */\n\n    const matched = this.routeConfig ? this.routeConfig.path : '';\n    return `Route(url:'${url}', path:'${matched}')`;\n  }\n\n}\n\nif (false) {\n  /**\n   * The configuration used to match this route *\n   * @type {?}\n   */\n  ActivatedRouteSnapshot.prototype.routeConfig;\n  /**\n   * \\@internal *\n   * @type {?}\n   */\n\n  ActivatedRouteSnapshot.prototype._urlSegment;\n  /**\n   * \\@internal\n   * @type {?}\n   */\n\n  ActivatedRouteSnapshot.prototype._lastPathIndex;\n  /**\n   * \\@internal\n   * @type {?}\n   */\n\n  ActivatedRouteSnapshot.prototype._resolve;\n  /**\n   * \\@internal\n   * @type {?}\n   */\n\n  ActivatedRouteSnapshot.prototype._resolvedData;\n  /**\n   * \\@internal\n   * @type {?}\n   */\n\n  ActivatedRouteSnapshot.prototype._routerState;\n  /**\n   * \\@internal\n   * @type {?}\n   */\n\n  ActivatedRouteSnapshot.prototype._paramMap;\n  /**\n   * \\@internal\n   * @type {?}\n   */\n\n  ActivatedRouteSnapshot.prototype._queryParamMap;\n  /**\n   * The URL segments matched by this route\n   * @type {?}\n   */\n\n  ActivatedRouteSnapshot.prototype.url;\n  /**\n   * The matrix parameters scoped to this route\n   * @type {?}\n   */\n\n  ActivatedRouteSnapshot.prototype.params;\n  /**\n   * The query parameters shared by all the routes\n   * @type {?}\n   */\n\n  ActivatedRouteSnapshot.prototype.queryParams;\n  /**\n   * The URL fragment shared by all the routes\n   * @type {?}\n   */\n\n  ActivatedRouteSnapshot.prototype.fragment;\n  /**\n   * The static and resolved data of this route\n   * @type {?}\n   */\n\n  ActivatedRouteSnapshot.prototype.data;\n  /**\n   * The outlet name of the route\n   * @type {?}\n   */\n\n  ActivatedRouteSnapshot.prototype.outlet;\n  /**\n   * The component of the route\n   * @type {?}\n   */\n\n  ActivatedRouteSnapshot.prototype.component;\n}\n/**\n * \\@description\n *\n * Represents the state of the router at a moment in time.\n *\n * This is a tree of activated route snapshots. Every node in this tree knows about\n * the \"consumed\" URL segments, the extracted parameters, and the resolved data.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * \\@Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const state: RouterState = router.routerState;\n *     const snapshot: RouterStateSnapshot = state.snapshot;\n *     const root: ActivatedRouteSnapshot = snapshot.root;\n *     const child = root.firstChild;\n *     const id: Observable<string> = child.params.map(p => p.id);\n *     //...\n *   }\n * }\n * ```\n *\n * \\@publicApi\n */\n\n\nclass RouterStateSnapshot extends Tree {\n  /**\n   * \\@internal\n   * @param {?} url\n   * @param {?} root\n   */\n  constructor(url, root) {\n    super(root);\n    this.url = url;\n    setRouterState(\n    /** @type {?} */\n    this, root);\n  }\n  /**\n   * @return {?}\n   */\n\n\n  toString() {\n    return serializeNode(this._root);\n  }\n\n}\n\nif (false) {\n  /**\n   * The url from which this snapshot was created\n   * @type {?}\n   */\n  RouterStateSnapshot.prototype.url;\n}\n/**\n * @template U, T\n * @param {?} state\n * @param {?} node\n * @return {?}\n */\n\n\nfunction setRouterState(state, node) {\n  node.value._routerState = state;\n  node.children.forEach(\n  /**\n  * @param {?} c\n  * @return {?}\n  */\n  c => setRouterState(state, c));\n}\n/**\n * @param {?} node\n * @return {?}\n */\n\n\nfunction serializeNode(node) {\n  /** @type {?} */\n  const c = node.children.length > 0 ? ` { ${node.children.map(serializeNode).join(', ')} } ` : '';\n  return `${node.value}${c}`;\n}\n/**\n * The expectation is that the activate route is created with the right set of parameters.\n * So we push new values into the observables only when they are not the initial values.\n * And we detect that by checking if the snapshot field is set.\n * @param {?} route\n * @return {?}\n */\n\n\nfunction advanceActivatedRoute(route) {\n  if (route.snapshot) {\n    /** @type {?} */\n    const currentSnapshot = route.snapshot;\n    /** @type {?} */\n\n    const nextSnapshot = route._futureSnapshot;\n    route.snapshot = nextSnapshot;\n\n    if (!shallowEqual(currentSnapshot.queryParams, nextSnapshot.queryParams)) {\n      /** @type {?} */\n      route.queryParams.next(nextSnapshot.queryParams);\n    }\n\n    if (currentSnapshot.fragment !== nextSnapshot.fragment) {\n      /** @type {?} */\n      route.fragment.next(nextSnapshot.fragment);\n    }\n\n    if (!shallowEqual(currentSnapshot.params, nextSnapshot.params)) {\n      /** @type {?} */\n      route.params.next(nextSnapshot.params);\n    }\n\n    if (!shallowEqualArrays(currentSnapshot.url, nextSnapshot.url)) {\n      /** @type {?} */\n      route.url.next(nextSnapshot.url);\n    }\n\n    if (!shallowEqual(currentSnapshot.data, nextSnapshot.data)) {\n      /** @type {?} */\n      route.data.next(nextSnapshot.data);\n    }\n  } else {\n    route.snapshot = route._futureSnapshot; // this is for resolved data\n\n    /** @type {?} */\n    route.data.next(route._futureSnapshot.data);\n  }\n}\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\n\n\nfunction equalParamsAndUrlSegments(a, b) {\n  /** @type {?} */\n  const equalUrlParams = shallowEqual(a.params, b.params) && equalSegments(a.url, b.url);\n  /** @type {?} */\n\n  const parentsMismatch = !a.parent !== !b.parent;\n  return equalUrlParams && !parentsMismatch && (!a.parent || equalParamsAndUrlSegments(a.parent,\n  /** @type {?} */\n  b.parent));\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/router/src/create_router_state.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @param {?} routeReuseStrategy\n * @param {?} curr\n * @param {?} prevState\n * @return {?}\n */\n\n\nfunction createRouterState(routeReuseStrategy, curr, prevState) {\n  /** @type {?} */\n  const root = createNode(routeReuseStrategy, curr._root, prevState ? prevState._root : undefined);\n  return new RouterState(root, curr);\n}\n/**\n * @param {?} routeReuseStrategy\n * @param {?} curr\n * @param {?=} prevState\n * @return {?}\n */\n\n\nfunction createNode(routeReuseStrategy, curr, prevState) {\n  // reuse an activated route that is currently displayed on the screen\n  if (prevState && routeReuseStrategy.shouldReuseRoute(curr.value, prevState.value.snapshot)) {\n    /** @type {?} */\n    const value = prevState.value;\n    value._futureSnapshot = curr.value;\n    /** @type {?} */\n\n    const children = createOrReuseChildren(routeReuseStrategy, curr, prevState);\n    return new TreeNode(value, children); // retrieve an activated route that is used to be displayed, but is not currently displayed\n  } else {\n    /** @type {?} */\n    const detachedRouteHandle =\n    /** @type {?} */\n    routeReuseStrategy.retrieve(curr.value);\n\n    if (detachedRouteHandle) {\n      /** @type {?} */\n      const tree = detachedRouteHandle.route;\n      setFutureSnapshotsOfActivatedRoutes(curr, tree);\n      return tree;\n    } else {\n      /** @type {?} */\n      const value = createActivatedRoute(curr.value);\n      /** @type {?} */\n\n      const children = curr.children.map(\n      /**\n      * @param {?} c\n      * @return {?}\n      */\n      c => createNode(routeReuseStrategy, c));\n      return new TreeNode(value, children);\n    }\n  }\n}\n/**\n * @param {?} curr\n * @param {?} result\n * @return {?}\n */\n\n\nfunction setFutureSnapshotsOfActivatedRoutes(curr, result) {\n  if (curr.value.routeConfig !== result.value.routeConfig) {\n    throw new Error('Cannot reattach ActivatedRouteSnapshot created from a different route');\n  }\n\n  if (curr.children.length !== result.children.length) {\n    throw new Error('Cannot reattach ActivatedRouteSnapshot with a different number of children');\n  }\n\n  result.value._futureSnapshot = curr.value;\n\n  for (let i = 0; i < curr.children.length; ++i) {\n    setFutureSnapshotsOfActivatedRoutes(curr.children[i], result.children[i]);\n  }\n}\n/**\n * @param {?} routeReuseStrategy\n * @param {?} curr\n * @param {?} prevState\n * @return {?}\n */\n\n\nfunction createOrReuseChildren(routeReuseStrategy, curr, prevState) {\n  return curr.children.map(\n  /**\n  * @param {?} child\n  * @return {?}\n  */\n  child => {\n    for (const p of prevState.children) {\n      if (routeReuseStrategy.shouldReuseRoute(p.value.snapshot, child.value)) {\n        return createNode(routeReuseStrategy, child, p);\n      }\n    }\n\n    return createNode(routeReuseStrategy, child);\n  });\n}\n/**\n * @param {?} c\n * @return {?}\n */\n\n\nfunction createActivatedRoute(c) {\n  return new ActivatedRoute(new BehaviorSubject(c.url), new BehaviorSubject(c.params), new BehaviorSubject(c.queryParams), new BehaviorSubject(c.fragment), new BehaviorSubject(c.data), c.outlet, c.component, c);\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/router/src/create_url_tree.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @param {?} route\n * @param {?} urlTree\n * @param {?} commands\n * @param {?} queryParams\n * @param {?} fragment\n * @return {?}\n */\n\n\nfunction createUrlTree(route, urlTree, commands, queryParams, fragment) {\n  if (commands.length === 0) {\n    return tree(urlTree.root, urlTree.root, urlTree, queryParams, fragment);\n  }\n  /** @type {?} */\n\n\n  const nav = computeNavigation(commands);\n\n  if (nav.toRoot()) {\n    return tree(urlTree.root, new UrlSegmentGroup([], {}), urlTree, queryParams, fragment);\n  }\n  /** @type {?} */\n\n\n  const startingPosition = findStartingPosition(nav, urlTree, route);\n  /** @type {?} */\n\n  const segmentGroup = startingPosition.processChildren ? updateSegmentGroupChildren(startingPosition.segmentGroup, startingPosition.index, nav.commands) : updateSegmentGroup(startingPosition.segmentGroup, startingPosition.index, nav.commands);\n  return tree(startingPosition.segmentGroup, segmentGroup, urlTree, queryParams, fragment);\n}\n/**\n * @param {?} command\n * @return {?}\n */\n\n\nfunction isMatrixParams(command) {\n  return typeof command === 'object' && command != null && !command.outlets && !command.segmentPath;\n}\n/**\n * @param {?} oldSegmentGroup\n * @param {?} newSegmentGroup\n * @param {?} urlTree\n * @param {?} queryParams\n * @param {?} fragment\n * @return {?}\n */\n\n\nfunction tree(oldSegmentGroup, newSegmentGroup, urlTree, queryParams, fragment) {\n  /** @type {?} */\n  let qp = {};\n\n  if (queryParams) {\n    forEach(queryParams,\n    /**\n    * @param {?} value\n    * @param {?} name\n    * @return {?}\n    */\n    (value, name) => {\n      qp[name] = Array.isArray(value) ? value.map(\n      /**\n      * @param {?} v\n      * @return {?}\n      */\n      v => `${v}`) : `${value}`;\n    });\n  }\n\n  if (urlTree.root === oldSegmentGroup) {\n    return new UrlTree(newSegmentGroup, qp, fragment);\n  }\n\n  return new UrlTree(replaceSegment(urlTree.root, oldSegmentGroup, newSegmentGroup), qp, fragment);\n}\n/**\n * @param {?} current\n * @param {?} oldSegment\n * @param {?} newSegment\n * @return {?}\n */\n\n\nfunction replaceSegment(current, oldSegment, newSegment) {\n  /** @type {?} */\n  const children = {};\n  forEach(current.children,\n  /**\n  * @param {?} c\n  * @param {?} outletName\n  * @return {?}\n  */\n  (c, outletName) => {\n    if (c === oldSegment) {\n      children[outletName] = newSegment;\n    } else {\n      children[outletName] = replaceSegment(c, oldSegment, newSegment);\n    }\n  });\n  return new UrlSegmentGroup(current.segments, children);\n}\n\nclass Navigation {\n  /**\n   * @param {?} isAbsolute\n   * @param {?} numberOfDoubleDots\n   * @param {?} commands\n   */\n  constructor(isAbsolute, numberOfDoubleDots, commands) {\n    this.isAbsolute = isAbsolute;\n    this.numberOfDoubleDots = numberOfDoubleDots;\n    this.commands = commands;\n\n    if (isAbsolute && commands.length > 0 && isMatrixParams(commands[0])) {\n      throw new Error('Root segment cannot have matrix parameters');\n    }\n    /** @type {?} */\n\n\n    const cmdWithOutlet = commands.find(\n    /**\n    * @param {?} c\n    * @return {?}\n    */\n    c => typeof c === 'object' && c != null && c.outlets);\n\n    if (cmdWithOutlet && cmdWithOutlet !== last(commands)) {\n      throw new Error('{outlets:{}} has to be the last command');\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  toRoot() {\n    return this.isAbsolute && this.commands.length === 1 && this.commands[0] == '/';\n  }\n\n}\n\nif (false) {\n  /** @type {?} */\n  Navigation.prototype.isAbsolute;\n  /** @type {?} */\n\n  Navigation.prototype.numberOfDoubleDots;\n  /** @type {?} */\n\n  Navigation.prototype.commands;\n}\n/**\n * Transforms commands to a normalized `Navigation`\n * @param {?} commands\n * @return {?}\n */\n\n\nfunction computeNavigation(commands) {\n  if (typeof commands[0] === 'string' && commands.length === 1 && commands[0] === '/') {\n    return new Navigation(true, 0, commands);\n  }\n  /** @type {?} */\n\n\n  let numberOfDoubleDots = 0;\n  /** @type {?} */\n\n  let isAbsolute = false;\n  /** @type {?} */\n\n  const res = commands.reduce(\n  /**\n  * @param {?} res\n  * @param {?} cmd\n  * @param {?} cmdIdx\n  * @return {?}\n  */\n  (res, cmd, cmdIdx) => {\n    if (typeof cmd === 'object' && cmd != null) {\n      if (cmd.outlets) {\n        /** @type {?} */\n        const outlets = {};\n        forEach(cmd.outlets,\n        /**\n        * @param {?} commands\n        * @param {?} name\n        * @return {?}\n        */\n        (commands, name) => {\n          outlets[name] = typeof commands === 'string' ? commands.split('/') : commands;\n        });\n        return [...res, {\n          outlets\n        }];\n      }\n\n      if (cmd.segmentPath) {\n        return [...res, cmd.segmentPath];\n      }\n    }\n\n    if (!(typeof cmd === 'string')) {\n      return [...res, cmd];\n    }\n\n    if (cmdIdx === 0) {\n      cmd.split('/').forEach(\n      /**\n      * @param {?} urlPart\n      * @param {?} partIndex\n      * @return {?}\n      */\n      (urlPart, partIndex) => {\n        if (partIndex == 0 && urlPart === '.') {// skip './a'\n        } else if (partIndex == 0 && urlPart === '') {\n          //  '/a'\n          isAbsolute = true;\n        } else if (urlPart === '..') {\n          //  '../a'\n          numberOfDoubleDots++;\n        } else if (urlPart != '') {\n          res.push(urlPart);\n        }\n      });\n      return res;\n    }\n\n    return [...res, cmd];\n  }, []);\n  return new Navigation(isAbsolute, numberOfDoubleDots, res);\n}\n\nclass Position {\n  /**\n   * @param {?} segmentGroup\n   * @param {?} processChildren\n   * @param {?} index\n   */\n  constructor(segmentGroup, processChildren, index) {\n    this.segmentGroup = segmentGroup;\n    this.processChildren = processChildren;\n    this.index = index;\n  }\n\n}\n\nif (false) {\n  /** @type {?} */\n  Position.prototype.segmentGroup;\n  /** @type {?} */\n\n  Position.prototype.processChildren;\n  /** @type {?} */\n\n  Position.prototype.index;\n}\n/**\n * @param {?} nav\n * @param {?} tree\n * @param {?} route\n * @return {?}\n */\n\n\nfunction findStartingPosition(nav, tree, route) {\n  if (nav.isAbsolute) {\n    return new Position(tree.root, true, 0);\n  }\n\n  if (route.snapshot._lastPathIndex === -1) {\n    return new Position(route.snapshot._urlSegment, true, 0);\n  }\n  /** @type {?} */\n\n\n  const modifier = isMatrixParams(nav.commands[0]) ? 0 : 1;\n  /** @type {?} */\n\n  const index = route.snapshot._lastPathIndex + modifier;\n  return createPositionApplyingDoubleDots(route.snapshot._urlSegment, index, nav.numberOfDoubleDots);\n}\n/**\n * @param {?} group\n * @param {?} index\n * @param {?} numberOfDoubleDots\n * @return {?}\n */\n\n\nfunction createPositionApplyingDoubleDots(group, index, numberOfDoubleDots) {\n  /** @type {?} */\n  let g = group;\n  /** @type {?} */\n\n  let ci = index;\n  /** @type {?} */\n\n  let dd = numberOfDoubleDots;\n\n  while (dd > ci) {\n    dd -= ci;\n    g =\n    /** @type {?} */\n    g.parent;\n\n    if (!g) {\n      throw new Error('Invalid number of \\'../\\'');\n    }\n\n    ci = g.segments.length;\n  }\n\n  return new Position(g, false, ci - dd);\n}\n/**\n * @param {?} command\n * @return {?}\n */\n\n\nfunction getPath(command) {\n  if (typeof command === 'object' && command != null && command.outlets) {\n    return command.outlets[PRIMARY_OUTLET];\n  }\n\n  return `${command}`;\n}\n/**\n * @param {?} commands\n * @return {?}\n */\n\n\nfunction getOutlets(commands) {\n  if (!(typeof commands[0] === 'object')) return {\n    [PRIMARY_OUTLET]: commands\n  };\n  if (commands[0].outlets === undefined) return {\n    [PRIMARY_OUTLET]: commands\n  };\n  return commands[0].outlets;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} startIndex\n * @param {?} commands\n * @return {?}\n */\n\n\nfunction updateSegmentGroup(segmentGroup, startIndex, commands) {\n  if (!segmentGroup) {\n    segmentGroup = new UrlSegmentGroup([], {});\n  }\n\n  if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n    return updateSegmentGroupChildren(segmentGroup, startIndex, commands);\n  }\n  /** @type {?} */\n\n\n  const m = prefixedWith(segmentGroup, startIndex, commands);\n  /** @type {?} */\n\n  const slicedCommands = commands.slice(m.commandIndex);\n\n  if (m.match && m.pathIndex < segmentGroup.segments.length) {\n    /** @type {?} */\n    const g = new UrlSegmentGroup(segmentGroup.segments.slice(0, m.pathIndex), {});\n    g.children[PRIMARY_OUTLET] = new UrlSegmentGroup(segmentGroup.segments.slice(m.pathIndex), segmentGroup.children);\n    return updateSegmentGroupChildren(g, 0, slicedCommands);\n  } else if (m.match && slicedCommands.length === 0) {\n    return new UrlSegmentGroup(segmentGroup.segments, {});\n  } else if (m.match && !segmentGroup.hasChildren()) {\n    return createNewSegmentGroup(segmentGroup, startIndex, commands);\n  } else if (m.match) {\n    return updateSegmentGroupChildren(segmentGroup, 0, slicedCommands);\n  } else {\n    return createNewSegmentGroup(segmentGroup, startIndex, commands);\n  }\n}\n/**\n * @param {?} segmentGroup\n * @param {?} startIndex\n * @param {?} commands\n * @return {?}\n */\n\n\nfunction updateSegmentGroupChildren(segmentGroup, startIndex, commands) {\n  if (commands.length === 0) {\n    return new UrlSegmentGroup(segmentGroup.segments, {});\n  } else {\n    /** @type {?} */\n    const outlets = getOutlets(commands);\n    /** @type {?} */\n\n    const children = {};\n    forEach(outlets,\n    /**\n    * @param {?} commands\n    * @param {?} outlet\n    * @return {?}\n    */\n    (commands, outlet) => {\n      if (commands !== null) {\n        children[outlet] = updateSegmentGroup(segmentGroup.children[outlet], startIndex, commands);\n      }\n    });\n    forEach(segmentGroup.children,\n    /**\n    * @param {?} child\n    * @param {?} childOutlet\n    * @return {?}\n    */\n    (child, childOutlet) => {\n      if (outlets[childOutlet] === undefined) {\n        children[childOutlet] = child;\n      }\n    });\n    return new UrlSegmentGroup(segmentGroup.segments, children);\n  }\n}\n/**\n * @param {?} segmentGroup\n * @param {?} startIndex\n * @param {?} commands\n * @return {?}\n */\n\n\nfunction prefixedWith(segmentGroup, startIndex, commands) {\n  /** @type {?} */\n  let currentCommandIndex = 0;\n  /** @type {?} */\n\n  let currentPathIndex = startIndex;\n  /** @type {?} */\n\n  const noMatch = {\n    match: false,\n    pathIndex: 0,\n    commandIndex: 0\n  };\n\n  while (currentPathIndex < segmentGroup.segments.length) {\n    if (currentCommandIndex >= commands.length) return noMatch;\n    /** @type {?} */\n\n    const path = segmentGroup.segments[currentPathIndex];\n    /** @type {?} */\n\n    const curr = getPath(commands[currentCommandIndex]);\n    /** @type {?} */\n\n    const next = currentCommandIndex < commands.length - 1 ? commands[currentCommandIndex + 1] : null;\n    if (currentPathIndex > 0 && curr === undefined) break;\n\n    if (curr && next && typeof next === 'object' && next.outlets === undefined) {\n      if (!compare(curr, next, path)) return noMatch;\n      currentCommandIndex += 2;\n    } else {\n      if (!compare(curr, {}, path)) return noMatch;\n      currentCommandIndex++;\n    }\n\n    currentPathIndex++;\n  }\n\n  return {\n    match: true,\n    pathIndex: currentPathIndex,\n    commandIndex: currentCommandIndex\n  };\n}\n/**\n * @param {?} segmentGroup\n * @param {?} startIndex\n * @param {?} commands\n * @return {?}\n */\n\n\nfunction createNewSegmentGroup(segmentGroup, startIndex, commands) {\n  /** @type {?} */\n  const paths = segmentGroup.segments.slice(0, startIndex);\n  /** @type {?} */\n\n  let i = 0;\n\n  while (i < commands.length) {\n    if (typeof commands[i] === 'object' && commands[i].outlets !== undefined) {\n      /** @type {?} */\n      const children = createNewSegmentChildren(commands[i].outlets);\n      return new UrlSegmentGroup(paths, children);\n    } // if we start with an object literal, we need to reuse the path part from the segment\n\n\n    if (i === 0 && isMatrixParams(commands[0])) {\n      /** @type {?} */\n      const p = segmentGroup.segments[startIndex];\n      paths.push(new UrlSegment(p.path, commands[0]));\n      i++;\n      continue;\n    }\n    /** @type {?} */\n\n\n    const curr = getPath(commands[i]);\n    /** @type {?} */\n\n    const next = i < commands.length - 1 ? commands[i + 1] : null;\n\n    if (curr && next && isMatrixParams(next)) {\n      paths.push(new UrlSegment(curr, stringify(next)));\n      i += 2;\n    } else {\n      paths.push(new UrlSegment(curr, {}));\n      i++;\n    }\n  }\n\n  return new UrlSegmentGroup(paths, {});\n}\n/**\n * @param {?} outlets\n * @return {?}\n */\n\n\nfunction createNewSegmentChildren(outlets) {\n  /** @type {?} */\n  const children = {};\n  forEach(outlets,\n  /**\n  * @param {?} commands\n  * @param {?} outlet\n  * @return {?}\n  */\n  (commands, outlet) => {\n    if (commands !== null) {\n      children[outlet] = createNewSegmentGroup(new UrlSegmentGroup([], {}), 0, commands);\n    }\n  });\n  return children;\n}\n/**\n * @param {?} params\n * @return {?}\n */\n\n\nfunction stringify(params) {\n  /** @type {?} */\n  const res = {};\n  forEach(params,\n  /**\n  * @param {?} v\n  * @param {?} k\n  * @return {?}\n  */\n  (v, k) => res[k] = `${v}`);\n  return res;\n}\n/**\n * @param {?} path\n * @param {?} params\n * @param {?} segment\n * @return {?}\n */\n\n\nfunction compare(path, params, segment) {\n  return path == segment.path && shallowEqual(params, segment.parameters);\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/router/src/operators/activate_routes.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nconst activateRoutes =\n/**\n* @param {?} rootContexts\n* @param {?} routeReuseStrategy\n* @param {?} forwardEvent\n* @return {?}\n*/\n(rootContexts, routeReuseStrategy, forwardEvent) => map(\n/**\n* @param {?} t\n* @return {?}\n*/\nt => {\n  new ActivateRoutes(routeReuseStrategy,\n  /** @type {?} */\n  t.targetRouterState, t.currentRouterState, forwardEvent).activate(rootContexts);\n  return t;\n});\n\nclass ActivateRoutes {\n  /**\n   * @param {?} routeReuseStrategy\n   * @param {?} futureState\n   * @param {?} currState\n   * @param {?} forwardEvent\n   */\n  constructor(routeReuseStrategy, futureState, currState, forwardEvent) {\n    this.routeReuseStrategy = routeReuseStrategy;\n    this.futureState = futureState;\n    this.currState = currState;\n    this.forwardEvent = forwardEvent;\n  }\n  /**\n   * @param {?} parentContexts\n   * @return {?}\n   */\n\n\n  activate(parentContexts) {\n    /** @type {?} */\n    const futureRoot = this.futureState._root;\n    /** @type {?} */\n\n    const currRoot = this.currState ? this.currState._root : null;\n    this.deactivateChildRoutes(futureRoot, currRoot, parentContexts);\n    advanceActivatedRoute(this.futureState.root);\n    this.activateChildRoutes(futureRoot, currRoot, parentContexts);\n  } // De-activate the child route that are not re-used for the future state\n\n  /**\n   * @private\n   * @param {?} futureNode\n   * @param {?} currNode\n   * @param {?} contexts\n   * @return {?}\n   */\n\n\n  deactivateChildRoutes(futureNode, currNode, contexts) {\n    /** @type {?} */\n    const children = nodeChildrenAsMap(currNode); // Recurse on the routes active in the future state to de-activate deeper children\n\n    futureNode.children.forEach(\n    /**\n    * @param {?} futureChild\n    * @return {?}\n    */\n    futureChild => {\n      /** @type {?} */\n      const childOutletName = futureChild.value.outlet;\n      this.deactivateRoutes(futureChild, children[childOutletName], contexts);\n      delete children[childOutletName];\n    }); // De-activate the routes that will not be re-used\n\n    forEach(children,\n    /**\n    * @param {?} v\n    * @param {?} childName\n    * @return {?}\n    */\n    (v, childName) => {\n      this.deactivateRouteAndItsChildren(v, contexts);\n    });\n  }\n  /**\n   * @private\n   * @param {?} futureNode\n   * @param {?} currNode\n   * @param {?} parentContext\n   * @return {?}\n   */\n\n\n  deactivateRoutes(futureNode, currNode, parentContext) {\n    /** @type {?} */\n    const future = futureNode.value;\n    /** @type {?} */\n\n    const curr = currNode ? currNode.value : null;\n\n    if (future === curr) {\n      // Reusing the node, check to see if the children need to be de-activated\n      if (future.component) {\n        // If we have a normal route, we need to go through an outlet.\n\n        /** @type {?} */\n        const context = parentContext.getContext(future.outlet);\n\n        if (context) {\n          this.deactivateChildRoutes(futureNode, currNode, context.children);\n        }\n      } else {\n        // if we have a componentless route, we recurse but keep the same outlet map.\n        this.deactivateChildRoutes(futureNode, currNode, parentContext);\n      }\n    } else {\n      if (curr) {\n        // Deactivate the current route which will not be re-used\n        this.deactivateRouteAndItsChildren(currNode, parentContext);\n      }\n    }\n  }\n  /**\n   * @private\n   * @param {?} route\n   * @param {?} parentContexts\n   * @return {?}\n   */\n\n\n  deactivateRouteAndItsChildren(route, parentContexts) {\n    if (this.routeReuseStrategy.shouldDetach(route.value.snapshot)) {\n      this.detachAndStoreRouteSubtree(route, parentContexts);\n    } else {\n      this.deactivateRouteAndOutlet(route, parentContexts);\n    }\n  }\n  /**\n   * @private\n   * @param {?} route\n   * @param {?} parentContexts\n   * @return {?}\n   */\n\n\n  detachAndStoreRouteSubtree(route, parentContexts) {\n    /** @type {?} */\n    const context = parentContexts.getContext(route.value.outlet);\n\n    if (context && context.outlet) {\n      /** @type {?} */\n      const componentRef = context.outlet.detach();\n      /** @type {?} */\n\n      const contexts = context.children.onOutletDeactivated();\n      this.routeReuseStrategy.store(route.value.snapshot, {\n        componentRef,\n        route,\n        contexts\n      });\n    }\n  }\n  /**\n   * @private\n   * @param {?} route\n   * @param {?} parentContexts\n   * @return {?}\n   */\n\n\n  deactivateRouteAndOutlet(route, parentContexts) {\n    /** @type {?} */\n    const context = parentContexts.getContext(route.value.outlet);\n\n    if (context) {\n      /** @type {?} */\n      const children = nodeChildrenAsMap(route);\n      /** @type {?} */\n\n      const contexts = route.value.component ? context.children : parentContexts;\n      forEach(children,\n      /**\n      * @param {?} v\n      * @param {?} k\n      * @return {?}\n      */\n      (v, k) => this.deactivateRouteAndItsChildren(v, contexts));\n\n      if (context.outlet) {\n        // Destroy the component\n        context.outlet.deactivate(); // Destroy the contexts for all the outlets that were in the component\n\n        context.children.onOutletDeactivated();\n      }\n    }\n  }\n  /**\n   * @private\n   * @param {?} futureNode\n   * @param {?} currNode\n   * @param {?} contexts\n   * @return {?}\n   */\n\n\n  activateChildRoutes(futureNode, currNode, contexts) {\n    /** @type {?} */\n    const children = nodeChildrenAsMap(currNode);\n    futureNode.children.forEach(\n    /**\n    * @param {?} c\n    * @return {?}\n    */\n    c => {\n      this.activateRoutes(c, children[c.value.outlet], contexts);\n      this.forwardEvent(new ActivationEnd(c.value.snapshot));\n    });\n\n    if (futureNode.children.length) {\n      this.forwardEvent(new ChildActivationEnd(futureNode.value.snapshot));\n    }\n  }\n  /**\n   * @private\n   * @param {?} futureNode\n   * @param {?} currNode\n   * @param {?} parentContexts\n   * @return {?}\n   */\n\n\n  activateRoutes(futureNode, currNode, parentContexts) {\n    /** @type {?} */\n    const future = futureNode.value;\n    /** @type {?} */\n\n    const curr = currNode ? currNode.value : null;\n    advanceActivatedRoute(future); // reusing the node\n\n    if (future === curr) {\n      if (future.component) {\n        // If we have a normal route, we need to go through an outlet.\n\n        /** @type {?} */\n        const context = parentContexts.getOrCreateContext(future.outlet);\n        this.activateChildRoutes(futureNode, currNode, context.children);\n      } else {\n        // if we have a componentless route, we recurse but keep the same outlet map.\n        this.activateChildRoutes(futureNode, currNode, parentContexts);\n      }\n    } else {\n      if (future.component) {\n        // if we have a normal route, we need to place the component into the outlet and recurse.\n\n        /** @type {?} */\n        const context = parentContexts.getOrCreateContext(future.outlet);\n\n        if (this.routeReuseStrategy.shouldAttach(future.snapshot)) {\n          /** @type {?} */\n          const stored =\n          /** @type {?} */\n          this.routeReuseStrategy.retrieve(future.snapshot);\n          this.routeReuseStrategy.store(future.snapshot, null);\n          context.children.onOutletReAttached(stored.contexts);\n          context.attachRef = stored.componentRef;\n          context.route = stored.route.value;\n\n          if (context.outlet) {\n            // Attach right away when the outlet has already been instantiated\n            // Otherwise attach from `RouterOutlet.ngOnInit` when it is instantiated\n            context.outlet.attach(stored.componentRef, stored.route.value);\n          }\n\n          advanceActivatedRouteNodeAndItsChildren(stored.route);\n        } else {\n          /** @type {?} */\n          const config = parentLoadedConfig(future.snapshot);\n          /** @type {?} */\n\n          const cmpFactoryResolver = config ? config.module.componentFactoryResolver : null;\n          context.attachRef = null;\n          context.route = future;\n          context.resolver = cmpFactoryResolver;\n\n          if (context.outlet) {\n            // Activate the outlet when it has already been instantiated\n            // Otherwise it will get activated from its `ngOnInit` when instantiated\n            context.outlet.activateWith(future, cmpFactoryResolver);\n          }\n\n          this.activateChildRoutes(futureNode, null, context.children);\n        }\n      } else {\n        // if we have a componentless route, we recurse but keep the same outlet map.\n        this.activateChildRoutes(futureNode, null, parentContexts);\n      }\n    }\n  }\n\n}\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  ActivateRoutes.prototype.routeReuseStrategy;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  ActivateRoutes.prototype.futureState;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  ActivateRoutes.prototype.currState;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  ActivateRoutes.prototype.forwardEvent;\n}\n/**\n * @param {?} node\n * @return {?}\n */\n\n\nfunction advanceActivatedRouteNodeAndItsChildren(node) {\n  advanceActivatedRoute(node.value);\n  node.children.forEach(advanceActivatedRouteNodeAndItsChildren);\n}\n/**\n * @param {?} snapshot\n * @return {?}\n */\n\n\nfunction parentLoadedConfig(snapshot) {\n  for (let s = snapshot.parent; s; s = s.parent) {\n    /** @type {?} */\n    const route = s.routeConfig;\n    if (route && route._loadedConfig) return route._loadedConfig;\n    if (route && route.component) return null;\n  }\n\n  return null;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/router/src/utils/type_guards.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Simple function check, but generic so type inference will flow. Example:\n *\n * function product(a: number, b: number) {\n *   return a * b;\n * }\n *\n * if (isFunction<product>(fn)) {\n *   return fn(1, 2);\n * } else {\n *   throw \"Must provide the `product` function\";\n * }\n * @template T\n * @param {?} v\n * @return {?}\n */\n\n\nfunction isFunction(v) {\n  return typeof v === 'function';\n}\n/**\n * @param {?} v\n * @return {?}\n */\n\n\nfunction isBoolean(v) {\n  return typeof v === 'boolean';\n}\n/**\n * @param {?} v\n * @return {?}\n */\n\n\nfunction isUrlTree(v) {\n  return v instanceof UrlTree;\n}\n/**\n * @param {?} guard\n * @return {?}\n */\n\n\nfunction isCanLoad(guard) {\n  return guard && isFunction(guard.canLoad);\n}\n/**\n * @param {?} guard\n * @return {?}\n */\n\n\nfunction isCanActivate(guard) {\n  return guard && isFunction(guard.canActivate);\n}\n/**\n * @param {?} guard\n * @return {?}\n */\n\n\nfunction isCanActivateChild(guard) {\n  return guard && isFunction(guard.canActivateChild);\n}\n/**\n * @template T\n * @param {?} guard\n * @return {?}\n */\n\n\nfunction isCanDeactivate(guard) {\n  return guard && isFunction(guard.canDeactivate);\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/router/src/apply_redirects.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nclass NoMatch {\n  /**\n   * @param {?=} segmentGroup\n   */\n  constructor(segmentGroup) {\n    this.segmentGroup = segmentGroup || null;\n  }\n\n}\n\nif (false) {\n  /** @type {?} */\n  NoMatch.prototype.segmentGroup;\n}\n\nclass AbsoluteRedirect {\n  /**\n   * @param {?} urlTree\n   */\n  constructor(urlTree) {\n    this.urlTree = urlTree;\n  }\n\n}\n\nif (false) {\n  /** @type {?} */\n  AbsoluteRedirect.prototype.urlTree;\n}\n/**\n * @param {?} segmentGroup\n * @return {?}\n */\n\n\nfunction noMatch(segmentGroup) {\n  return new Observable(\n  /**\n  * @param {?} obs\n  * @return {?}\n  */\n  obs => obs.error(new NoMatch(segmentGroup)));\n}\n/**\n * @param {?} newTree\n * @return {?}\n */\n\n\nfunction absoluteRedirect(newTree) {\n  return new Observable(\n  /**\n  * @param {?} obs\n  * @return {?}\n  */\n  obs => obs.error(new AbsoluteRedirect(newTree)));\n}\n/**\n * @param {?} redirectTo\n * @return {?}\n */\n\n\nfunction namedOutletsRedirect(redirectTo) {\n  return new Observable(\n  /**\n  * @param {?} obs\n  * @return {?}\n  */\n  obs => obs.error(new Error(`Only absolute redirects can have named outlets. redirectTo: '${redirectTo}'`)));\n}\n/**\n * @param {?} route\n * @return {?}\n */\n\n\nfunction canLoadFails(route) {\n  return new Observable(\n  /**\n  * @param {?} obs\n  * @return {?}\n  */\n  obs => obs.error(navigationCancelingError(`Cannot load children because the guard of the route \"path: '${route.path}'\" returned false`)));\n}\n/**\n * Returns the `UrlTree` with the redirection applied.\n *\n * Lazy modules are loaded along the way.\n * @param {?} moduleInjector\n * @param {?} configLoader\n * @param {?} urlSerializer\n * @param {?} urlTree\n * @param {?} config\n * @return {?}\n */\n\n\nfunction applyRedirects(moduleInjector, configLoader, urlSerializer, urlTree, config) {\n  return new ApplyRedirects(moduleInjector, configLoader, urlSerializer, urlTree, config).apply();\n}\n\nclass ApplyRedirects {\n  /**\n   * @param {?} moduleInjector\n   * @param {?} configLoader\n   * @param {?} urlSerializer\n   * @param {?} urlTree\n   * @param {?} config\n   */\n  constructor(moduleInjector, configLoader, urlSerializer, urlTree, config) {\n    this.configLoader = configLoader;\n    this.urlSerializer = urlSerializer;\n    this.urlTree = urlTree;\n    this.config = config;\n    this.allowRedirects = true;\n    this.ngModule = moduleInjector.get(NgModuleRef);\n  }\n  /**\n   * @return {?}\n   */\n\n\n  apply() {\n    /** @type {?} */\n    const expanded$ = this.expandSegmentGroup(this.ngModule, this.config, this.urlTree.root, PRIMARY_OUTLET);\n    /** @type {?} */\n\n    const urlTrees$ = expanded$.pipe(map(\n    /**\n    * @param {?} rootSegmentGroup\n    * @return {?}\n    */\n    rootSegmentGroup => this.createUrlTree(rootSegmentGroup, this.urlTree.queryParams,\n    /** @type {?} */\n    this.urlTree.fragment)));\n    return urlTrees$.pipe(catchError(\n    /**\n    * @param {?} e\n    * @return {?}\n    */\n    e => {\n      if (e instanceof AbsoluteRedirect) {\n        // after an absolute redirect we do not apply any more redirects!\n        this.allowRedirects = false; // we need to run matching, so we can fetch all lazy-loaded modules\n\n        return this.match(e.urlTree);\n      }\n\n      if (e instanceof NoMatch) {\n        throw this.noMatchError(e);\n      }\n\n      throw e;\n    }));\n  }\n  /**\n   * @private\n   * @param {?} tree\n   * @return {?}\n   */\n\n\n  match(tree) {\n    /** @type {?} */\n    const expanded$ = this.expandSegmentGroup(this.ngModule, this.config, tree.root, PRIMARY_OUTLET);\n    /** @type {?} */\n\n    const mapped$ = expanded$.pipe(map(\n    /**\n    * @param {?} rootSegmentGroup\n    * @return {?}\n    */\n    rootSegmentGroup => this.createUrlTree(rootSegmentGroup, tree.queryParams,\n    /** @type {?} */\n    tree.fragment)));\n    return mapped$.pipe(catchError(\n    /**\n    * @param {?} e\n    * @return {?}\n    */\n    e => {\n      if (e instanceof NoMatch) {\n        throw this.noMatchError(e);\n      }\n\n      throw e;\n    }));\n  }\n  /**\n   * @private\n   * @param {?} e\n   * @return {?}\n   */\n\n\n  noMatchError(e) {\n    return new Error(`Cannot match any routes. URL Segment: '${e.segmentGroup}'`);\n  }\n  /**\n   * @private\n   * @param {?} rootCandidate\n   * @param {?} queryParams\n   * @param {?} fragment\n   * @return {?}\n   */\n\n\n  createUrlTree(rootCandidate, queryParams, fragment) {\n    /** @type {?} */\n    const root = rootCandidate.segments.length > 0 ? new UrlSegmentGroup([], {\n      [PRIMARY_OUTLET]: rootCandidate\n    }) : rootCandidate;\n    return new UrlTree(root, queryParams, fragment);\n  }\n  /**\n   * @private\n   * @param {?} ngModule\n   * @param {?} routes\n   * @param {?} segmentGroup\n   * @param {?} outlet\n   * @return {?}\n   */\n\n\n  expandSegmentGroup(ngModule, routes, segmentGroup, outlet) {\n    if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n      return this.expandChildren(ngModule, routes, segmentGroup).pipe(map(\n      /**\n      * @param {?} children\n      * @return {?}\n      */\n      children => new UrlSegmentGroup([], children)));\n    }\n\n    return this.expandSegment(ngModule, segmentGroup, routes, segmentGroup.segments, outlet, true);\n  } // Recursively expand segment groups for all the child outlets\n\n  /**\n   * @private\n   * @param {?} ngModule\n   * @param {?} routes\n   * @param {?} segmentGroup\n   * @return {?}\n   */\n\n\n  expandChildren(ngModule, routes, segmentGroup) {\n    return waitForMap(segmentGroup.children,\n    /**\n    * @param {?} childOutlet\n    * @param {?} child\n    * @return {?}\n    */\n    (childOutlet, child) => this.expandSegmentGroup(ngModule, routes, child, childOutlet));\n  }\n  /**\n   * @private\n   * @param {?} ngModule\n   * @param {?} segmentGroup\n   * @param {?} routes\n   * @param {?} segments\n   * @param {?} outlet\n   * @param {?} allowRedirects\n   * @return {?}\n   */\n\n\n  expandSegment(ngModule, segmentGroup, routes, segments, outlet, allowRedirects) {\n    return of(...routes).pipe(map(\n    /**\n    * @param {?} r\n    * @return {?}\n    */\n    r => {\n      /** @type {?} */\n      const expanded$ = this.expandSegmentAgainstRoute(ngModule, segmentGroup, routes, r, segments, outlet, allowRedirects);\n      return expanded$.pipe(catchError(\n      /**\n      * @param {?} e\n      * @return {?}\n      */\n      e => {\n        if (e instanceof NoMatch) {\n          // TODO(i): this return type doesn't match the declared Observable<UrlSegmentGroup> -\n          // talk to Jason\n          return (\n            /** @type {?} */\n            of(null)\n          );\n        }\n\n        throw e;\n      }));\n    }), concatAll(), first(\n    /**\n    * @param {?} s\n    * @return {?}\n    */\n    s => !!s), catchError(\n    /**\n    * @param {?} e\n    * @param {?} _\n    * @return {?}\n    */\n    (e, _) => {\n      if (e instanceof EmptyError || e.name === 'EmptyError') {\n        if (this.noLeftoversInUrl(segmentGroup, segments, outlet)) {\n          return of(new UrlSegmentGroup([], {}));\n        }\n\n        throw new NoMatch(segmentGroup);\n      }\n\n      throw e;\n    }));\n  }\n  /**\n   * @private\n   * @param {?} segmentGroup\n   * @param {?} segments\n   * @param {?} outlet\n   * @return {?}\n   */\n\n\n  noLeftoversInUrl(segmentGroup, segments, outlet) {\n    return segments.length === 0 && !segmentGroup.children[outlet];\n  }\n  /**\n   * @private\n   * @param {?} ngModule\n   * @param {?} segmentGroup\n   * @param {?} routes\n   * @param {?} route\n   * @param {?} paths\n   * @param {?} outlet\n   * @param {?} allowRedirects\n   * @return {?}\n   */\n\n\n  expandSegmentAgainstRoute(ngModule, segmentGroup, routes, route, paths, outlet, allowRedirects) {\n    if (getOutlet(route) !== outlet) {\n      return noMatch(segmentGroup);\n    }\n\n    if (route.redirectTo === undefined) {\n      return this.matchSegmentAgainstRoute(ngModule, segmentGroup, route, paths);\n    }\n\n    if (allowRedirects && this.allowRedirects) {\n      return this.expandSegmentAgainstRouteUsingRedirect(ngModule, segmentGroup, routes, route, paths, outlet);\n    }\n\n    return noMatch(segmentGroup);\n  }\n  /**\n   * @private\n   * @param {?} ngModule\n   * @param {?} segmentGroup\n   * @param {?} routes\n   * @param {?} route\n   * @param {?} segments\n   * @param {?} outlet\n   * @return {?}\n   */\n\n\n  expandSegmentAgainstRouteUsingRedirect(ngModule, segmentGroup, routes, route, segments, outlet) {\n    if (route.path === '**') {\n      return this.expandWildCardWithParamsAgainstRouteUsingRedirect(ngModule, routes, route, outlet);\n    }\n\n    return this.expandRegularSegmentAgainstRouteUsingRedirect(ngModule, segmentGroup, routes, route, segments, outlet);\n  }\n  /**\n   * @private\n   * @param {?} ngModule\n   * @param {?} routes\n   * @param {?} route\n   * @param {?} outlet\n   * @return {?}\n   */\n\n\n  expandWildCardWithParamsAgainstRouteUsingRedirect(ngModule, routes, route, outlet) {\n    /** @type {?} */\n    const newTree = this.applyRedirectCommands([],\n    /** @type {?} */\n    route.redirectTo, {});\n\n    if (\n    /** @type {?} */\n    route.redirectTo.startsWith('/')) {\n      return absoluteRedirect(newTree);\n    }\n\n    return this.lineralizeSegments(route, newTree).pipe(mergeMap(\n    /**\n    * @param {?} newSegments\n    * @return {?}\n    */\n    newSegments => {\n      /** @type {?} */\n      const group = new UrlSegmentGroup(newSegments, {});\n      return this.expandSegment(ngModule, group, routes, newSegments, outlet, false);\n    }));\n  }\n  /**\n   * @private\n   * @param {?} ngModule\n   * @param {?} segmentGroup\n   * @param {?} routes\n   * @param {?} route\n   * @param {?} segments\n   * @param {?} outlet\n   * @return {?}\n   */\n\n\n  expandRegularSegmentAgainstRouteUsingRedirect(ngModule, segmentGroup, routes, route, segments, outlet) {\n    const {\n      matched,\n      consumedSegments,\n      lastChild,\n      positionalParamSegments\n    } = match(segmentGroup, route, segments);\n    if (!matched) return noMatch(segmentGroup);\n    /** @type {?} */\n\n    const newTree = this.applyRedirectCommands(consumedSegments,\n    /** @type {?} */\n    route.redirectTo,\n    /** @type {?} */\n    positionalParamSegments);\n\n    if (\n    /** @type {?} */\n    route.redirectTo.startsWith('/')) {\n      return absoluteRedirect(newTree);\n    }\n\n    return this.lineralizeSegments(route, newTree).pipe(mergeMap(\n    /**\n    * @param {?} newSegments\n    * @return {?}\n    */\n    newSegments => {\n      return this.expandSegment(ngModule, segmentGroup, routes, newSegments.concat(segments.slice(lastChild)), outlet, false);\n    }));\n  }\n  /**\n   * @private\n   * @param {?} ngModule\n   * @param {?} rawSegmentGroup\n   * @param {?} route\n   * @param {?} segments\n   * @return {?}\n   */\n\n\n  matchSegmentAgainstRoute(ngModule, rawSegmentGroup, route, segments) {\n    if (route.path === '**') {\n      if (route.loadChildren) {\n        return this.configLoader.load(ngModule.injector, route).pipe(map(\n        /**\n        * @param {?} cfg\n        * @return {?}\n        */\n        cfg => {\n          route._loadedConfig = cfg;\n          return new UrlSegmentGroup(segments, {});\n        }));\n      }\n\n      return of(new UrlSegmentGroup(segments, {}));\n    }\n\n    const {\n      matched,\n      consumedSegments,\n      lastChild\n    } = match(rawSegmentGroup, route, segments);\n    if (!matched) return noMatch(rawSegmentGroup);\n    /** @type {?} */\n\n    const rawSlicedSegments = segments.slice(lastChild);\n    /** @type {?} */\n\n    const childConfig$ = this.getChildConfig(ngModule, route, segments);\n    return childConfig$.pipe(mergeMap(\n    /**\n    * @param {?} routerConfig\n    * @return {?}\n    */\n    routerConfig => {\n      /** @type {?} */\n      const childModule = routerConfig.module;\n      /** @type {?} */\n\n      const childConfig = routerConfig.routes;\n      const {\n        segmentGroup,\n        slicedSegments\n      } = split(rawSegmentGroup, consumedSegments, rawSlicedSegments, childConfig);\n\n      if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {\n        /** @type {?} */\n        const expanded$ = this.expandChildren(childModule, childConfig, segmentGroup);\n        return expanded$.pipe(map(\n        /**\n        * @param {?} children\n        * @return {?}\n        */\n        children => new UrlSegmentGroup(consumedSegments, children)));\n      }\n\n      if (childConfig.length === 0 && slicedSegments.length === 0) {\n        return of(new UrlSegmentGroup(consumedSegments, {}));\n      }\n      /** @type {?} */\n\n\n      const expanded$ = this.expandSegment(childModule, segmentGroup, childConfig, slicedSegments, PRIMARY_OUTLET, true);\n      return expanded$.pipe(map(\n      /**\n      * @param {?} cs\n      * @return {?}\n      */\n      cs => new UrlSegmentGroup(consumedSegments.concat(cs.segments), cs.children)));\n    }));\n  }\n  /**\n   * @private\n   * @param {?} ngModule\n   * @param {?} route\n   * @param {?} segments\n   * @return {?}\n   */\n\n\n  getChildConfig(ngModule, route, segments) {\n    if (route.children) {\n      // The children belong to the same module\n      return of(new LoadedRouterConfig(route.children, ngModule));\n    }\n\n    if (route.loadChildren) {\n      // lazy children belong to the loaded module\n      if (route._loadedConfig !== undefined) {\n        return of(route._loadedConfig);\n      }\n\n      return runCanLoadGuard(ngModule.injector, route, segments).pipe(mergeMap(\n      /**\n      * @param {?} shouldLoad\n      * @return {?}\n      */\n      shouldLoad => {\n        if (shouldLoad) {\n          return this.configLoader.load(ngModule.injector, route).pipe(map(\n          /**\n          * @param {?} cfg\n          * @return {?}\n          */\n          cfg => {\n            route._loadedConfig = cfg;\n            return cfg;\n          }));\n        }\n\n        return canLoadFails(route);\n      }));\n    }\n\n    return of(new LoadedRouterConfig([], ngModule));\n  }\n  /**\n   * @private\n   * @param {?} route\n   * @param {?} urlTree\n   * @return {?}\n   */\n\n\n  lineralizeSegments(route, urlTree) {\n    /** @type {?} */\n    let res = [];\n    /** @type {?} */\n\n    let c = urlTree.root;\n\n    while (true) {\n      res = res.concat(c.segments);\n\n      if (c.numberOfChildren === 0) {\n        return of(res);\n      }\n\n      if (c.numberOfChildren > 1 || !c.children[PRIMARY_OUTLET]) {\n        return namedOutletsRedirect(\n        /** @type {?} */\n        route.redirectTo);\n      }\n\n      c = c.children[PRIMARY_OUTLET];\n    }\n  }\n  /**\n   * @private\n   * @param {?} segments\n   * @param {?} redirectTo\n   * @param {?} posParams\n   * @return {?}\n   */\n\n\n  applyRedirectCommands(segments, redirectTo, posParams) {\n    return this.applyRedirectCreatreUrlTree(redirectTo, this.urlSerializer.parse(redirectTo), segments, posParams);\n  }\n  /**\n   * @private\n   * @param {?} redirectTo\n   * @param {?} urlTree\n   * @param {?} segments\n   * @param {?} posParams\n   * @return {?}\n   */\n\n\n  applyRedirectCreatreUrlTree(redirectTo, urlTree, segments, posParams) {\n    /** @type {?} */\n    const newRoot = this.createSegmentGroup(redirectTo, urlTree.root, segments, posParams);\n    return new UrlTree(newRoot, this.createQueryParams(urlTree.queryParams, this.urlTree.queryParams), urlTree.fragment);\n  }\n  /**\n   * @private\n   * @param {?} redirectToParams\n   * @param {?} actualParams\n   * @return {?}\n   */\n\n\n  createQueryParams(redirectToParams, actualParams) {\n    /** @type {?} */\n    const res = {};\n    forEach(redirectToParams,\n    /**\n    * @param {?} v\n    * @param {?} k\n    * @return {?}\n    */\n    (v, k) => {\n      /** @type {?} */\n      const copySourceValue = typeof v === 'string' && v.startsWith(':');\n\n      if (copySourceValue) {\n        /** @type {?} */\n        const sourceName = v.substring(1);\n        res[k] = actualParams[sourceName];\n      } else {\n        res[k] = v;\n      }\n    });\n    return res;\n  }\n  /**\n   * @private\n   * @param {?} redirectTo\n   * @param {?} group\n   * @param {?} segments\n   * @param {?} posParams\n   * @return {?}\n   */\n\n\n  createSegmentGroup(redirectTo, group, segments, posParams) {\n    /** @type {?} */\n    const updatedSegments = this.createSegments(redirectTo, group.segments, segments, posParams);\n    /** @type {?} */\n\n    let children = {};\n    forEach(group.children,\n    /**\n    * @param {?} child\n    * @param {?} name\n    * @return {?}\n    */\n    (child, name) => {\n      children[name] = this.createSegmentGroup(redirectTo, child, segments, posParams);\n    });\n    return new UrlSegmentGroup(updatedSegments, children);\n  }\n  /**\n   * @private\n   * @param {?} redirectTo\n   * @param {?} redirectToSegments\n   * @param {?} actualSegments\n   * @param {?} posParams\n   * @return {?}\n   */\n\n\n  createSegments(redirectTo, redirectToSegments, actualSegments, posParams) {\n    return redirectToSegments.map(\n    /**\n    * @param {?} s\n    * @return {?}\n    */\n    s => s.path.startsWith(':') ? this.findPosParam(redirectTo, s, posParams) : this.findOrReturn(s, actualSegments));\n  }\n  /**\n   * @private\n   * @param {?} redirectTo\n   * @param {?} redirectToUrlSegment\n   * @param {?} posParams\n   * @return {?}\n   */\n\n\n  findPosParam(redirectTo, redirectToUrlSegment, posParams) {\n    /** @type {?} */\n    const pos = posParams[redirectToUrlSegment.path.substring(1)];\n    if (!pos) throw new Error(`Cannot redirect to '${redirectTo}'. Cannot find '${redirectToUrlSegment.path}'.`);\n    return pos;\n  }\n  /**\n   * @private\n   * @param {?} redirectToUrlSegment\n   * @param {?} actualSegments\n   * @return {?}\n   */\n\n\n  findOrReturn(redirectToUrlSegment, actualSegments) {\n    /** @type {?} */\n    let idx = 0;\n\n    for (const s of actualSegments) {\n      if (s.path === redirectToUrlSegment.path) {\n        actualSegments.splice(idx);\n        return s;\n      }\n\n      idx++;\n    }\n\n    return redirectToUrlSegment;\n  }\n\n}\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  ApplyRedirects.prototype.allowRedirects;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  ApplyRedirects.prototype.ngModule;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  ApplyRedirects.prototype.configLoader;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  ApplyRedirects.prototype.urlSerializer;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  ApplyRedirects.prototype.urlTree;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  ApplyRedirects.prototype.config;\n}\n/**\n * @param {?} moduleInjector\n * @param {?} route\n * @param {?} segments\n * @return {?}\n */\n\n\nfunction runCanLoadGuard(moduleInjector, route, segments) {\n  /** @type {?} */\n  const canLoad = route.canLoad;\n  if (!canLoad || canLoad.length === 0) return of(true);\n  /** @type {?} */\n\n  const obs = from(canLoad).pipe(map(\n  /**\n  * @param {?} injectionToken\n  * @return {?}\n  */\n  injectionToken => {\n    /** @type {?} */\n    const guard = moduleInjector.get(injectionToken);\n    /** @type {?} */\n\n    let guardVal;\n\n    if (isCanLoad(guard)) {\n      guardVal = guard.canLoad(route, segments);\n    } else if (isFunction(guard)) {\n      guardVal = guard(route, segments);\n    } else {\n      throw new Error('Invalid CanLoad guard');\n    }\n\n    return wrapIntoObservable(guardVal);\n  }));\n  return obs.pipe(concatAll(), every(\n  /**\n  * @param {?} result\n  * @return {?}\n  */\n  result => result === true));\n}\n/**\n * @param {?} segmentGroup\n * @param {?} route\n * @param {?} segments\n * @return {?}\n */\n\n\nfunction match(segmentGroup, route, segments) {\n  if (route.path === '') {\n    if (route.pathMatch === 'full' && (segmentGroup.hasChildren() || segments.length > 0)) {\n      return {\n        matched: false,\n        consumedSegments: [],\n        lastChild: 0,\n        positionalParamSegments: {}\n      };\n    }\n\n    return {\n      matched: true,\n      consumedSegments: [],\n      lastChild: 0,\n      positionalParamSegments: {}\n    };\n  }\n  /** @type {?} */\n\n\n  const matcher = route.matcher || defaultUrlMatcher;\n  /** @type {?} */\n\n  const res = matcher(segments, segmentGroup, route);\n\n  if (!res) {\n    return {\n      matched: false,\n      consumedSegments:\n      /** @type {?} */\n      [],\n      lastChild: 0,\n      positionalParamSegments: {}\n    };\n  }\n\n  return {\n    matched: true,\n    consumedSegments:\n    /** @type {?} */\n    res.consumed,\n    lastChild:\n    /** @type {?} */\n    res.consumed.length,\n    positionalParamSegments:\n    /** @type {?} */\n    res.posParams\n  };\n}\n/**\n * @param {?} segmentGroup\n * @param {?} consumedSegments\n * @param {?} slicedSegments\n * @param {?} config\n * @return {?}\n */\n\n\nfunction split(segmentGroup, consumedSegments, slicedSegments, config) {\n  if (slicedSegments.length > 0 && containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, slicedSegments, config)) {\n    /** @type {?} */\n    const s = new UrlSegmentGroup(consumedSegments, createChildrenForEmptySegments(config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));\n    return {\n      segmentGroup: mergeTrivialChildren(s),\n      slicedSegments: []\n    };\n  }\n\n  if (slicedSegments.length === 0 && containsEmptyPathRedirects(segmentGroup, slicedSegments, config)) {\n    /** @type {?} */\n    const s = new UrlSegmentGroup(segmentGroup.segments, addEmptySegmentsToChildrenIfNeeded(segmentGroup, slicedSegments, config, segmentGroup.children));\n    return {\n      segmentGroup: mergeTrivialChildren(s),\n      slicedSegments\n    };\n  }\n\n  return {\n    segmentGroup,\n    slicedSegments\n  };\n}\n/**\n * @param {?} s\n * @return {?}\n */\n\n\nfunction mergeTrivialChildren(s) {\n  if (s.numberOfChildren === 1 && s.children[PRIMARY_OUTLET]) {\n    /** @type {?} */\n    const c = s.children[PRIMARY_OUTLET];\n    return new UrlSegmentGroup(s.segments.concat(c.segments), c.children);\n  }\n\n  return s;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} slicedSegments\n * @param {?} routes\n * @param {?} children\n * @return {?}\n */\n\n\nfunction addEmptySegmentsToChildrenIfNeeded(segmentGroup, slicedSegments, routes, children) {\n  /** @type {?} */\n  const res = {};\n\n  for (const r of routes) {\n    if (isEmptyPathRedirect(segmentGroup, slicedSegments, r) && !children[getOutlet(r)]) {\n      res[getOutlet(r)] = new UrlSegmentGroup([], {});\n    }\n  }\n\n  return Object.assign(Object.assign({}, children), res);\n}\n/**\n * @param {?} routes\n * @param {?} primarySegmentGroup\n * @return {?}\n */\n\n\nfunction createChildrenForEmptySegments(routes, primarySegmentGroup) {\n  /** @type {?} */\n  const res = {};\n  res[PRIMARY_OUTLET] = primarySegmentGroup;\n\n  for (const r of routes) {\n    if (r.path === '' && getOutlet(r) !== PRIMARY_OUTLET) {\n      res[getOutlet(r)] = new UrlSegmentGroup([], {});\n    }\n  }\n\n  return res;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} segments\n * @param {?} routes\n * @return {?}\n */\n\n\nfunction containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, segments, routes) {\n  return routes.some(\n  /**\n  * @param {?} r\n  * @return {?}\n  */\n  r => isEmptyPathRedirect(segmentGroup, segments, r) && getOutlet(r) !== PRIMARY_OUTLET);\n}\n/**\n * @param {?} segmentGroup\n * @param {?} segments\n * @param {?} routes\n * @return {?}\n */\n\n\nfunction containsEmptyPathRedirects(segmentGroup, segments, routes) {\n  return routes.some(\n  /**\n  * @param {?} r\n  * @return {?}\n  */\n  r => isEmptyPathRedirect(segmentGroup, segments, r));\n}\n/**\n * @param {?} segmentGroup\n * @param {?} segments\n * @param {?} r\n * @return {?}\n */\n\n\nfunction isEmptyPathRedirect(segmentGroup, segments, r) {\n  if ((segmentGroup.hasChildren() || segments.length > 0) && r.pathMatch === 'full') {\n    return false;\n  }\n\n  return r.path === '' && r.redirectTo !== undefined;\n}\n/**\n * @param {?} route\n * @return {?}\n */\n\n\nfunction getOutlet(route) {\n  return route.outlet || PRIMARY_OUTLET;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/router/src/operators/apply_redirects.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @param {?} moduleInjector\n * @param {?} configLoader\n * @param {?} urlSerializer\n * @param {?} config\n * @return {?}\n */\n\n\nfunction applyRedirects$1(moduleInjector, configLoader, urlSerializer, config) {\n  return (\n    /**\n    * @param {?} source\n    * @return {?}\n    */\n    function (source) {\n      return source.pipe(switchMap(\n      /**\n      * @param {?} t\n      * @return {?}\n      */\n      t => applyRedirects(moduleInjector, configLoader, urlSerializer, t.extractedUrl, config).pipe(map(\n      /**\n      * @param {?} urlAfterRedirects\n      * @return {?}\n      */\n      urlAfterRedirects => Object.assign(Object.assign({}, t), {\n        urlAfterRedirects\n      })))));\n    }\n  );\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/router/src/utils/preactivation.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nclass CanActivate {\n  /**\n   * @param {?} path\n   */\n  constructor(path) {\n    this.path = path;\n    this.route = this.path[this.path.length - 1];\n  }\n\n}\n\nif (false) {\n  /** @type {?} */\n  CanActivate.prototype.route;\n  /** @type {?} */\n\n  CanActivate.prototype.path;\n}\n\nclass CanDeactivate {\n  /**\n   * @param {?} component\n   * @param {?} route\n   */\n  constructor(component, route) {\n    this.component = component;\n    this.route = route;\n  }\n\n}\n\nif (false) {\n  /** @type {?} */\n  CanDeactivate.prototype.component;\n  /** @type {?} */\n\n  CanDeactivate.prototype.route;\n}\n/**\n * @param {?} future\n * @param {?} curr\n * @param {?} parentContexts\n * @return {?}\n */\n\n\nfunction getAllRouteGuards(future, curr, parentContexts) {\n  /** @type {?} */\n  const futureRoot = future._root;\n  /** @type {?} */\n\n  const currRoot = curr ? curr._root : null;\n  return getChildRouteGuards(futureRoot, currRoot, parentContexts, [futureRoot.value]);\n}\n/**\n * @param {?} p\n * @return {?}\n */\n\n\nfunction getCanActivateChild(p) {\n  /** @type {?} */\n  const canActivateChild = p.routeConfig ? p.routeConfig.canActivateChild : null;\n  if (!canActivateChild || canActivateChild.length === 0) return null;\n  return {\n    node: p,\n    guards: canActivateChild\n  };\n}\n/**\n * @param {?} token\n * @param {?} snapshot\n * @param {?} moduleInjector\n * @return {?}\n */\n\n\nfunction getToken(token, snapshot, moduleInjector) {\n  /** @type {?} */\n  const config = getClosestLoadedConfig(snapshot);\n  /** @type {?} */\n\n  const injector = config ? config.module.injector : moduleInjector;\n  return injector.get(token);\n}\n/**\n * @param {?} snapshot\n * @return {?}\n */\n\n\nfunction getClosestLoadedConfig(snapshot) {\n  if (!snapshot) return null;\n\n  for (let s = snapshot.parent; s; s = s.parent) {\n    /** @type {?} */\n    const route = s.routeConfig;\n    if (route && route._loadedConfig) return route._loadedConfig;\n  }\n\n  return null;\n}\n/**\n * @param {?} futureNode\n * @param {?} currNode\n * @param {?} contexts\n * @param {?} futurePath\n * @param {?=} checks\n * @return {?}\n */\n\n\nfunction getChildRouteGuards(futureNode, currNode, contexts, futurePath, checks = {\n  canDeactivateChecks: [],\n  canActivateChecks: []\n}) {\n  /** @type {?} */\n  const prevChildren = nodeChildrenAsMap(currNode); // Process the children of the future route\n\n  futureNode.children.forEach(\n  /**\n  * @param {?} c\n  * @return {?}\n  */\n  c => {\n    getRouteGuards(c, prevChildren[c.value.outlet], contexts, futurePath.concat([c.value]), checks);\n    delete prevChildren[c.value.outlet];\n  }); // Process any children left from the current route (not active for the future route)\n\n  forEach(prevChildren,\n  /**\n  * @param {?} v\n  * @param {?} k\n  * @return {?}\n  */\n  (v, k) => deactivateRouteAndItsChildren(v,\n  /** @type {?} */\n  contexts.getContext(k), checks));\n  return checks;\n}\n/**\n * @param {?} futureNode\n * @param {?} currNode\n * @param {?} parentContexts\n * @param {?} futurePath\n * @param {?=} checks\n * @return {?}\n */\n\n\nfunction getRouteGuards(futureNode, currNode, parentContexts, futurePath, checks = {\n  canDeactivateChecks: [],\n  canActivateChecks: []\n}) {\n  /** @type {?} */\n  const future = futureNode.value;\n  /** @type {?} */\n\n  const curr = currNode ? currNode.value : null;\n  /** @type {?} */\n\n  const context = parentContexts ? parentContexts.getContext(futureNode.value.outlet) : null; // reusing the node\n\n  if (curr && future.routeConfig === curr.routeConfig) {\n    /** @type {?} */\n    const shouldRun = shouldRunGuardsAndResolvers(curr, future,\n    /** @type {?} */\n    future.routeConfig.runGuardsAndResolvers);\n\n    if (shouldRun) {\n      checks.canActivateChecks.push(new CanActivate(futurePath));\n    } else {\n      // we need to set the data\n      future.data = curr.data;\n      future._resolvedData = curr._resolvedData;\n    } // If we have a component, we need to go through an outlet.\n\n\n    if (future.component) {\n      getChildRouteGuards(futureNode, currNode, context ? context.children : null, futurePath, checks); // if we have a componentless route, we recurse but keep the same outlet map.\n    } else {\n      getChildRouteGuards(futureNode, currNode, parentContexts, futurePath, checks);\n    }\n\n    if (shouldRun) {\n      /** @type {?} */\n      const component = context && context.outlet && context.outlet.component || null;\n      checks.canDeactivateChecks.push(new CanDeactivate(component, curr));\n    }\n  } else {\n    if (curr) {\n      deactivateRouteAndItsChildren(currNode, context, checks);\n    }\n\n    checks.canActivateChecks.push(new CanActivate(futurePath)); // If we have a component, we need to go through an outlet.\n\n    if (future.component) {\n      getChildRouteGuards(futureNode, null, context ? context.children : null, futurePath, checks); // if we have a componentless route, we recurse but keep the same outlet map.\n    } else {\n      getChildRouteGuards(futureNode, null, parentContexts, futurePath, checks);\n    }\n  }\n\n  return checks;\n}\n/**\n * @param {?} curr\n * @param {?} future\n * @param {?} mode\n * @return {?}\n */\n\n\nfunction shouldRunGuardsAndResolvers(curr, future, mode) {\n  if (typeof mode === 'function') {\n    return mode(curr, future);\n  }\n\n  switch (mode) {\n    case 'pathParamsChange':\n      return !equalPath(curr.url, future.url);\n\n    case 'pathParamsOrQueryParamsChange':\n      return !equalPath(curr.url, future.url) || !shallowEqual(curr.queryParams, future.queryParams);\n\n    case 'always':\n      return true;\n\n    case 'paramsOrQueryParamsChange':\n      return !equalParamsAndUrlSegments(curr, future) || !shallowEqual(curr.queryParams, future.queryParams);\n\n    case 'paramsChange':\n    default:\n      return !equalParamsAndUrlSegments(curr, future);\n  }\n}\n/**\n * @param {?} route\n * @param {?} context\n * @param {?} checks\n * @return {?}\n */\n\n\nfunction deactivateRouteAndItsChildren(route, context, checks) {\n  /** @type {?} */\n  const children = nodeChildrenAsMap(route);\n  /** @type {?} */\n\n  const r = route.value;\n  forEach(children,\n  /**\n  * @param {?} node\n  * @param {?} childName\n  * @return {?}\n  */\n  (node, childName) => {\n    if (!r.component) {\n      deactivateRouteAndItsChildren(node, context, checks);\n    } else if (context) {\n      deactivateRouteAndItsChildren(node, context.children.getContext(childName), checks);\n    } else {\n      deactivateRouteAndItsChildren(node, null, checks);\n    }\n  });\n\n  if (!r.component) {\n    checks.canDeactivateChecks.push(new CanDeactivate(null, r));\n  } else if (context && context.outlet && context.outlet.isActivated) {\n    checks.canDeactivateChecks.push(new CanDeactivate(context.outlet.component, r));\n  } else {\n    checks.canDeactivateChecks.push(new CanDeactivate(null, r));\n  }\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/router/src/operators/prioritized_guard_value.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nconst INITIAL_VALUE = Symbol('INITIAL_VALUE');\n/**\n * @return {?}\n */\n\nfunction prioritizedGuardValue() {\n  return switchMap(\n  /**\n  * @param {?} obs\n  * @return {?}\n  */\n  obs => {\n    return (\n      /** @type {?} */\n      combineLatest(...obs.map(\n      /**\n      * @param {?} o\n      * @return {?}\n      */\n      o => o.pipe(take(1), startWith(\n      /** @type {?} */\n      INITIAL_VALUE)))).pipe(scan(\n      /**\n      * @param {?} acc\n      * @param {?} list\n      * @return {?}\n      */\n      (acc, list) => {\n        /** @type {?} */\n        let isPending = false;\n        return list.reduce(\n        /**\n        * @param {?} innerAcc\n        * @param {?} val\n        * @param {?} i\n        * @return {?}\n        */\n        (innerAcc, val, i) => {\n          if (innerAcc !== INITIAL_VALUE) return innerAcc; // Toggle pending flag if any values haven't been set yet\n\n          if (val === INITIAL_VALUE) isPending = true; // Any other return values are only valid if we haven't yet hit a pending call.\n          // This guarantees that in the case of a guard at the bottom of the tree that\n          // returns a redirect, we will wait for the higher priority guard at the top to\n          // finish before performing the redirect.\n\n          if (!isPending) {\n            // Early return when we hit a `false` value as that should always cancel\n            // navigation\n            if (val === false) return val;\n\n            if (i === list.length - 1 || isUrlTree(val)) {\n              return val;\n            }\n          }\n\n          return innerAcc;\n        }, acc);\n      }, INITIAL_VALUE), filter(\n      /**\n      * @param {?} item\n      * @return {?}\n      */\n      item => item !== INITIAL_VALUE), map(\n      /**\n      * @param {?} item\n      * @return {?}\n      */\n      item => isUrlTree(item) ? item : item === true), //\n      take(1))\n    );\n  });\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/router/src/operators/check_guards.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @param {?} moduleInjector\n * @param {?=} forwardEvent\n * @return {?}\n */\n\n\nfunction checkGuards(moduleInjector, forwardEvent) {\n  return (\n    /**\n    * @param {?} source\n    * @return {?}\n    */\n    function (source) {\n      return source.pipe(mergeMap(\n      /**\n      * @param {?} t\n      * @return {?}\n      */\n      t => {\n        const {\n          targetSnapshot,\n          currentSnapshot,\n          guards: {\n            canActivateChecks,\n            canDeactivateChecks\n          }\n        } = t;\n\n        if (canDeactivateChecks.length === 0 && canActivateChecks.length === 0) {\n          return of(Object.assign(Object.assign({}, t), {\n            guardsResult: true\n          }));\n        }\n\n        return runCanDeactivateChecks(canDeactivateChecks,\n        /** @type {?} */\n        targetSnapshot, currentSnapshot, moduleInjector).pipe(mergeMap(\n        /**\n        * @param {?} canDeactivate\n        * @return {?}\n        */\n        canDeactivate => {\n          return canDeactivate && isBoolean(canDeactivate) ? runCanActivateChecks(\n          /** @type {?} */\n          targetSnapshot, canActivateChecks, moduleInjector, forwardEvent) : of(canDeactivate);\n        }), map(\n        /**\n        * @param {?} guardsResult\n        * @return {?}\n        */\n        guardsResult => Object.assign(Object.assign({}, t), {\n          guardsResult\n        })));\n      }));\n    }\n  );\n}\n/**\n * @param {?} checks\n * @param {?} futureRSS\n * @param {?} currRSS\n * @param {?} moduleInjector\n * @return {?}\n */\n\n\nfunction runCanDeactivateChecks(checks, futureRSS, currRSS, moduleInjector) {\n  return from(checks).pipe(mergeMap(\n  /**\n  * @param {?} check\n  * @return {?}\n  */\n  check => runCanDeactivate(check.component, check.route, currRSS, futureRSS, moduleInjector)), first(\n  /**\n  * @param {?} result\n  * @return {?}\n  */\n  result => {\n    return result !== true;\n  },\n  /** @type {?} */\n  true));\n}\n/**\n * @param {?} futureSnapshot\n * @param {?} checks\n * @param {?} moduleInjector\n * @param {?=} forwardEvent\n * @return {?}\n */\n\n\nfunction runCanActivateChecks(futureSnapshot, checks, moduleInjector, forwardEvent) {\n  return from(checks).pipe(concatMap(\n  /**\n  * @param {?} check\n  * @return {?}\n  */\n  check => {\n    return from([fireChildActivationStart(check.route.parent, forwardEvent), fireActivationStart(check.route, forwardEvent), runCanActivateChild(futureSnapshot, check.path, moduleInjector), runCanActivate(futureSnapshot, check.route, moduleInjector)]).pipe(concatAll(), first(\n    /**\n    * @param {?} result\n    * @return {?}\n    */\n    result => {\n      return result !== true;\n    },\n    /** @type {?} */\n    true));\n  }), first(\n  /**\n  * @param {?} result\n  * @return {?}\n  */\n  result => {\n    return result !== true;\n  },\n  /** @type {?} */\n  true));\n}\n/**\n * This should fire off `ActivationStart` events for each route being activated at this\n * level.\n * In other words, if you're activating `a` and `b` below, `path` will contain the\n * `ActivatedRouteSnapshot`s for both and we will fire `ActivationStart` for both. Always\n * return\n * `true` so checks continue to run.\n * @param {?} snapshot\n * @param {?=} forwardEvent\n * @return {?}\n */\n\n\nfunction fireActivationStart(snapshot, forwardEvent) {\n  if (snapshot !== null && forwardEvent) {\n    forwardEvent(new ActivationStart(snapshot));\n  }\n\n  return of(true);\n}\n/**\n * This should fire off `ChildActivationStart` events for each route being activated at this\n * level.\n * In other words, if you're activating `a` and `b` below, `path` will contain the\n * `ActivatedRouteSnapshot`s for both and we will fire `ChildActivationStart` for both. Always\n * return\n * `true` so checks continue to run.\n * @param {?} snapshot\n * @param {?=} forwardEvent\n * @return {?}\n */\n\n\nfunction fireChildActivationStart(snapshot, forwardEvent) {\n  if (snapshot !== null && forwardEvent) {\n    forwardEvent(new ChildActivationStart(snapshot));\n  }\n\n  return of(true);\n}\n/**\n * @param {?} futureRSS\n * @param {?} futureARS\n * @param {?} moduleInjector\n * @return {?}\n */\n\n\nfunction runCanActivate(futureRSS, futureARS, moduleInjector) {\n  /** @type {?} */\n  const canActivate = futureARS.routeConfig ? futureARS.routeConfig.canActivate : null;\n  if (!canActivate || canActivate.length === 0) return of(true);\n  /** @type {?} */\n\n  const canActivateObservables = canActivate.map(\n  /**\n  * @param {?} c\n  * @return {?}\n  */\n  c => {\n    return defer(\n    /**\n    * @return {?}\n    */\n    () => {\n      /** @type {?} */\n      const guard = getToken(c, futureARS, moduleInjector);\n      /** @type {?} */\n\n      let observable;\n\n      if (isCanActivate(guard)) {\n        observable = wrapIntoObservable(guard.canActivate(futureARS, futureRSS));\n      } else if (isFunction(guard)) {\n        observable = wrapIntoObservable(guard(futureARS, futureRSS));\n      } else {\n        throw new Error('Invalid CanActivate guard');\n      }\n\n      return observable.pipe(first());\n    });\n  });\n  return of(canActivateObservables).pipe(prioritizedGuardValue());\n}\n/**\n * @param {?} futureRSS\n * @param {?} path\n * @param {?} moduleInjector\n * @return {?}\n */\n\n\nfunction runCanActivateChild(futureRSS, path, moduleInjector) {\n  /** @type {?} */\n  const futureARS = path[path.length - 1];\n  /** @type {?} */\n\n  const canActivateChildGuards = path.slice(0, path.length - 1).reverse().map(\n  /**\n  * @param {?} p\n  * @return {?}\n  */\n  p => getCanActivateChild(p)).filter(\n  /**\n  * @param {?} _\n  * @return {?}\n  */\n  _ => _ !== null);\n  /** @type {?} */\n\n  const canActivateChildGuardsMapped = canActivateChildGuards.map(\n  /**\n  * @param {?} d\n  * @return {?}\n  */\n  d => {\n    return defer(\n    /**\n    * @return {?}\n    */\n    () => {\n      /** @type {?} */\n      const guardsMapped = d.guards.map(\n      /**\n      * @param {?} c\n      * @return {?}\n      */\n      c => {\n        /** @type {?} */\n        const guard = getToken(c, d.node, moduleInjector);\n        /** @type {?} */\n\n        let observable;\n\n        if (isCanActivateChild(guard)) {\n          observable = wrapIntoObservable(guard.canActivateChild(futureARS, futureRSS));\n        } else if (isFunction(guard)) {\n          observable = wrapIntoObservable(guard(futureARS, futureRSS));\n        } else {\n          throw new Error('Invalid CanActivateChild guard');\n        }\n\n        return observable.pipe(first());\n      });\n      return of(guardsMapped).pipe(prioritizedGuardValue());\n    });\n  });\n  return of(canActivateChildGuardsMapped).pipe(prioritizedGuardValue());\n}\n/**\n * @param {?} component\n * @param {?} currARS\n * @param {?} currRSS\n * @param {?} futureRSS\n * @param {?} moduleInjector\n * @return {?}\n */\n\n\nfunction runCanDeactivate(component, currARS, currRSS, futureRSS, moduleInjector) {\n  /** @type {?} */\n  const canDeactivate = currARS && currARS.routeConfig ? currARS.routeConfig.canDeactivate : null;\n  if (!canDeactivate || canDeactivate.length === 0) return of(true);\n  /** @type {?} */\n\n  const canDeactivateObservables = canDeactivate.map(\n  /**\n  * @param {?} c\n  * @return {?}\n  */\n  c => {\n    /** @type {?} */\n    const guard = getToken(c, currARS, moduleInjector);\n    /** @type {?} */\n\n    let observable;\n\n    if (isCanDeactivate(guard)) {\n      observable = wrapIntoObservable(guard.canDeactivate(\n      /** @type {?} */\n      component, currARS, currRSS, futureRSS));\n    } else if (isFunction(guard)) {\n      observable = wrapIntoObservable(guard(component, currARS, currRSS, futureRSS));\n    } else {\n      throw new Error('Invalid CanDeactivate guard');\n    }\n\n    return observable.pipe(first());\n  });\n  return of(canDeactivateObservables).pipe(prioritizedGuardValue());\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/router/src/recognize.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nclass NoMatch$1 {}\n/**\n * @param {?} rootComponentType\n * @param {?} config\n * @param {?} urlTree\n * @param {?} url\n * @param {?=} paramsInheritanceStrategy\n * @param {?=} relativeLinkResolution\n * @return {?}\n */\n\n\nfunction recognize(rootComponentType, config, urlTree, url, paramsInheritanceStrategy = 'emptyOnly', relativeLinkResolution = 'legacy') {\n  return new Recognizer(rootComponentType, config, urlTree, url, paramsInheritanceStrategy, relativeLinkResolution).recognize();\n}\n\nclass Recognizer {\n  /**\n   * @param {?} rootComponentType\n   * @param {?} config\n   * @param {?} urlTree\n   * @param {?} url\n   * @param {?} paramsInheritanceStrategy\n   * @param {?} relativeLinkResolution\n   */\n  constructor(rootComponentType, config, urlTree, url, paramsInheritanceStrategy, relativeLinkResolution) {\n    this.rootComponentType = rootComponentType;\n    this.config = config;\n    this.urlTree = urlTree;\n    this.url = url;\n    this.paramsInheritanceStrategy = paramsInheritanceStrategy;\n    this.relativeLinkResolution = relativeLinkResolution;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  recognize() {\n    try {\n      /** @type {?} */\n      const rootSegmentGroup = split$1(this.urlTree.root, [], [], this.config, this.relativeLinkResolution).segmentGroup;\n      /** @type {?} */\n\n      const children = this.processSegmentGroup(this.config, rootSegmentGroup, PRIMARY_OUTLET);\n      /** @type {?} */\n\n      const root = new ActivatedRouteSnapshot([], Object.freeze({}), Object.freeze(Object.assign({}, this.urlTree.queryParams)),\n      /** @type {?} */\n      this.urlTree.fragment, {}, PRIMARY_OUTLET, this.rootComponentType, null, this.urlTree.root, -1, {});\n      /** @type {?} */\n\n      const rootNode = new TreeNode(root, children);\n      /** @type {?} */\n\n      const routeState = new RouterStateSnapshot(this.url, rootNode);\n      this.inheritParamsAndData(routeState._root);\n      return of(routeState);\n    } catch (e) {\n      return new Observable(\n      /**\n      * @param {?} obs\n      * @return {?}\n      */\n      obs => obs.error(e));\n    }\n  }\n  /**\n   * @param {?} routeNode\n   * @return {?}\n   */\n\n\n  inheritParamsAndData(routeNode) {\n    /** @type {?} */\n    const route = routeNode.value;\n    /** @type {?} */\n\n    const i = inheritedParamsDataResolve(route, this.paramsInheritanceStrategy);\n    route.params = Object.freeze(i.params);\n    route.data = Object.freeze(i.data);\n    routeNode.children.forEach(\n    /**\n    * @param {?} n\n    * @return {?}\n    */\n    n => this.inheritParamsAndData(n));\n  }\n  /**\n   * @param {?} config\n   * @param {?} segmentGroup\n   * @param {?} outlet\n   * @return {?}\n   */\n\n\n  processSegmentGroup(config, segmentGroup, outlet) {\n    if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n      return this.processChildren(config, segmentGroup);\n    }\n\n    return this.processSegment(config, segmentGroup, segmentGroup.segments, outlet);\n  }\n  /**\n   * @param {?} config\n   * @param {?} segmentGroup\n   * @return {?}\n   */\n\n\n  processChildren(config, segmentGroup) {\n    /** @type {?} */\n    const children = mapChildrenIntoArray(segmentGroup,\n    /**\n    * @param {?} child\n    * @param {?} childOutlet\n    * @return {?}\n    */\n    (child, childOutlet) => this.processSegmentGroup(config, child, childOutlet));\n    checkOutletNameUniqueness(children);\n    sortActivatedRouteSnapshots(children);\n    return children;\n  }\n  /**\n   * @param {?} config\n   * @param {?} segmentGroup\n   * @param {?} segments\n   * @param {?} outlet\n   * @return {?}\n   */\n\n\n  processSegment(config, segmentGroup, segments, outlet) {\n    for (const r of config) {\n      try {\n        return this.processSegmentAgainstRoute(r, segmentGroup, segments, outlet);\n      } catch (e) {\n        if (!(e instanceof NoMatch$1)) throw e;\n      }\n    }\n\n    if (this.noLeftoversInUrl(segmentGroup, segments, outlet)) {\n      return [];\n    }\n\n    throw new NoMatch$1();\n  }\n  /**\n   * @private\n   * @param {?} segmentGroup\n   * @param {?} segments\n   * @param {?} outlet\n   * @return {?}\n   */\n\n\n  noLeftoversInUrl(segmentGroup, segments, outlet) {\n    return segments.length === 0 && !segmentGroup.children[outlet];\n  }\n  /**\n   * @param {?} route\n   * @param {?} rawSegment\n   * @param {?} segments\n   * @param {?} outlet\n   * @return {?}\n   */\n\n\n  processSegmentAgainstRoute(route, rawSegment, segments, outlet) {\n    if (route.redirectTo) throw new NoMatch$1();\n    if ((route.outlet || PRIMARY_OUTLET) !== outlet) throw new NoMatch$1();\n    /** @type {?} */\n\n    let snapshot;\n    /** @type {?} */\n\n    let consumedSegments = [];\n    /** @type {?} */\n\n    let rawSlicedSegments = [];\n\n    if (route.path === '**') {\n      /** @type {?} */\n      const params = segments.length > 0 ?\n      /** @type {?} */\n      last(segments).parameters : {};\n      snapshot = new ActivatedRouteSnapshot(segments, params, Object.freeze(Object.assign({}, this.urlTree.queryParams)),\n      /** @type {?} */\n      this.urlTree.fragment, getData(route), outlet,\n      /** @type {?} */\n      route.component, route, getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + segments.length, getResolve(route));\n    } else {\n      /** @type {?} */\n      const result = match$1(rawSegment, route, segments);\n      consumedSegments = result.consumedSegments;\n      rawSlicedSegments = segments.slice(result.lastChild);\n      snapshot = new ActivatedRouteSnapshot(consumedSegments, result.parameters, Object.freeze(Object.assign({}, this.urlTree.queryParams)),\n      /** @type {?} */\n      this.urlTree.fragment, getData(route), outlet,\n      /** @type {?} */\n      route.component, route, getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + consumedSegments.length, getResolve(route));\n    }\n    /** @type {?} */\n\n\n    const childConfig = getChildConfig(route);\n    const {\n      segmentGroup,\n      slicedSegments\n    } = split$1(rawSegment, consumedSegments, rawSlicedSegments, childConfig, this.relativeLinkResolution);\n\n    if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {\n      /** @type {?} */\n      const children = this.processChildren(childConfig, segmentGroup);\n      return [new TreeNode(snapshot, children)];\n    }\n\n    if (childConfig.length === 0 && slicedSegments.length === 0) {\n      return [new TreeNode(snapshot, [])];\n    }\n    /** @type {?} */\n\n\n    const children = this.processSegment(childConfig, segmentGroup, slicedSegments, PRIMARY_OUTLET);\n    return [new TreeNode(snapshot, children)];\n  }\n\n}\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  Recognizer.prototype.rootComponentType;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  Recognizer.prototype.config;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  Recognizer.prototype.urlTree;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  Recognizer.prototype.url;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  Recognizer.prototype.paramsInheritanceStrategy;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  Recognizer.prototype.relativeLinkResolution;\n}\n/**\n * @param {?} nodes\n * @return {?}\n */\n\n\nfunction sortActivatedRouteSnapshots(nodes) {\n  nodes.sort(\n  /**\n  * @param {?} a\n  * @param {?} b\n  * @return {?}\n  */\n  (a, b) => {\n    if (a.value.outlet === PRIMARY_OUTLET) return -1;\n    if (b.value.outlet === PRIMARY_OUTLET) return 1;\n    return a.value.outlet.localeCompare(b.value.outlet);\n  });\n}\n/**\n * @param {?} route\n * @return {?}\n */\n\n\nfunction getChildConfig(route) {\n  if (route.children) {\n    return route.children;\n  }\n\n  if (route.loadChildren) {\n    return (\n      /** @type {?} */\n      route._loadedConfig.routes\n    );\n  }\n\n  return [];\n}\n/**\n * @record\n */\n\n\nfunction MatchResult() {}\n\nif (false) {\n  /** @type {?} */\n  MatchResult.prototype.consumedSegments;\n  /** @type {?} */\n\n  MatchResult.prototype.lastChild;\n  /** @type {?} */\n\n  MatchResult.prototype.parameters;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} route\n * @param {?} segments\n * @return {?}\n */\n\n\nfunction match$1(segmentGroup, route, segments) {\n  if (route.path === '') {\n    if (route.pathMatch === 'full' && (segmentGroup.hasChildren() || segments.length > 0)) {\n      throw new NoMatch$1();\n    }\n\n    return {\n      consumedSegments: [],\n      lastChild: 0,\n      parameters: {}\n    };\n  }\n  /** @type {?} */\n\n\n  const matcher = route.matcher || defaultUrlMatcher;\n  /** @type {?} */\n\n  const res = matcher(segments, segmentGroup, route);\n  if (!res) throw new NoMatch$1();\n  /** @type {?} */\n\n  const posParams = {};\n  forEach(\n  /** @type {?} */\n  res.posParams,\n  /**\n  * @param {?} v\n  * @param {?} k\n  * @return {?}\n  */\n  (v, k) => {\n    posParams[k] = v.path;\n  });\n  /** @type {?} */\n\n  const parameters = res.consumed.length > 0 ? Object.assign(Object.assign({}, posParams), res.consumed[res.consumed.length - 1].parameters) : posParams;\n  return {\n    consumedSegments: res.consumed,\n    lastChild: res.consumed.length,\n    parameters\n  };\n}\n/**\n * @param {?} nodes\n * @return {?}\n */\n\n\nfunction checkOutletNameUniqueness(nodes) {\n  /** @type {?} */\n  const names = {};\n  nodes.forEach(\n  /**\n  * @param {?} n\n  * @return {?}\n  */\n  n => {\n    /** @type {?} */\n    const routeWithSameOutletName = names[n.value.outlet];\n\n    if (routeWithSameOutletName) {\n      /** @type {?} */\n      const p = routeWithSameOutletName.url.map(\n      /**\n      * @param {?} s\n      * @return {?}\n      */\n      s => s.toString()).join('/');\n      /** @type {?} */\n\n      const c = n.value.url.map(\n      /**\n      * @param {?} s\n      * @return {?}\n      */\n      s => s.toString()).join('/');\n      throw new Error(`Two segments cannot have the same outlet name: '${p}' and '${c}'.`);\n    }\n\n    names[n.value.outlet] = n.value;\n  });\n}\n/**\n * @param {?} segmentGroup\n * @return {?}\n */\n\n\nfunction getSourceSegmentGroup(segmentGroup) {\n  /** @type {?} */\n  let s = segmentGroup;\n\n  while (s._sourceSegment) {\n    s = s._sourceSegment;\n  }\n\n  return s;\n}\n/**\n * @param {?} segmentGroup\n * @return {?}\n */\n\n\nfunction getPathIndexShift(segmentGroup) {\n  /** @type {?} */\n  let s = segmentGroup;\n  /** @type {?} */\n\n  let res = s._segmentIndexShift ? s._segmentIndexShift : 0;\n\n  while (s._sourceSegment) {\n    s = s._sourceSegment;\n    res += s._segmentIndexShift ? s._segmentIndexShift : 0;\n  }\n\n  return res - 1;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} consumedSegments\n * @param {?} slicedSegments\n * @param {?} config\n * @param {?} relativeLinkResolution\n * @return {?}\n */\n\n\nfunction split$1(segmentGroup, consumedSegments, slicedSegments, config, relativeLinkResolution) {\n  if (slicedSegments.length > 0 && containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, config)) {\n    /** @type {?} */\n    const s = new UrlSegmentGroup(consumedSegments, createChildrenForEmptyPaths(segmentGroup, consumedSegments, config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));\n    s._sourceSegment = segmentGroup;\n    s._segmentIndexShift = consumedSegments.length;\n    return {\n      segmentGroup: s,\n      slicedSegments: []\n    };\n  }\n\n  if (slicedSegments.length === 0 && containsEmptyPathMatches(segmentGroup, slicedSegments, config)) {\n    /** @type {?} */\n    const s = new UrlSegmentGroup(segmentGroup.segments, addEmptyPathsToChildrenIfNeeded(segmentGroup, consumedSegments, slicedSegments, config, segmentGroup.children, relativeLinkResolution));\n    s._sourceSegment = segmentGroup;\n    s._segmentIndexShift = consumedSegments.length;\n    return {\n      segmentGroup: s,\n      slicedSegments\n    };\n  }\n  /** @type {?} */\n\n\n  const s = new UrlSegmentGroup(segmentGroup.segments, segmentGroup.children);\n  s._sourceSegment = segmentGroup;\n  s._segmentIndexShift = consumedSegments.length;\n  return {\n    segmentGroup: s,\n    slicedSegments\n  };\n}\n/**\n * @param {?} segmentGroup\n * @param {?} consumedSegments\n * @param {?} slicedSegments\n * @param {?} routes\n * @param {?} children\n * @param {?} relativeLinkResolution\n * @return {?}\n */\n\n\nfunction addEmptyPathsToChildrenIfNeeded(segmentGroup, consumedSegments, slicedSegments, routes, children, relativeLinkResolution) {\n  /** @type {?} */\n  const res = {};\n\n  for (const r of routes) {\n    if (emptyPathMatch(segmentGroup, slicedSegments, r) && !children[getOutlet$1(r)]) {\n      /** @type {?} */\n      const s = new UrlSegmentGroup([], {});\n      s._sourceSegment = segmentGroup;\n\n      if (relativeLinkResolution === 'legacy') {\n        s._segmentIndexShift = segmentGroup.segments.length;\n      } else {\n        s._segmentIndexShift = consumedSegments.length;\n      }\n\n      res[getOutlet$1(r)] = s;\n    }\n  }\n\n  return Object.assign(Object.assign({}, children), res);\n}\n/**\n * @param {?} segmentGroup\n * @param {?} consumedSegments\n * @param {?} routes\n * @param {?} primarySegment\n * @return {?}\n */\n\n\nfunction createChildrenForEmptyPaths(segmentGroup, consumedSegments, routes, primarySegment) {\n  /** @type {?} */\n  const res = {};\n  res[PRIMARY_OUTLET] = primarySegment;\n  primarySegment._sourceSegment = segmentGroup;\n  primarySegment._segmentIndexShift = consumedSegments.length;\n\n  for (const r of routes) {\n    if (r.path === '' && getOutlet$1(r) !== PRIMARY_OUTLET) {\n      /** @type {?} */\n      const s = new UrlSegmentGroup([], {});\n      s._sourceSegment = segmentGroup;\n      s._segmentIndexShift = consumedSegments.length;\n      res[getOutlet$1(r)] = s;\n    }\n  }\n\n  return res;\n}\n/**\n * @param {?} segmentGroup\n * @param {?} slicedSegments\n * @param {?} routes\n * @return {?}\n */\n\n\nfunction containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, routes) {\n  return routes.some(\n  /**\n  * @param {?} r\n  * @return {?}\n  */\n  r => emptyPathMatch(segmentGroup, slicedSegments, r) && getOutlet$1(r) !== PRIMARY_OUTLET);\n}\n/**\n * @param {?} segmentGroup\n * @param {?} slicedSegments\n * @param {?} routes\n * @return {?}\n */\n\n\nfunction containsEmptyPathMatches(segmentGroup, slicedSegments, routes) {\n  return routes.some(\n  /**\n  * @param {?} r\n  * @return {?}\n  */\n  r => emptyPathMatch(segmentGroup, slicedSegments, r));\n}\n/**\n * @param {?} segmentGroup\n * @param {?} slicedSegments\n * @param {?} r\n * @return {?}\n */\n\n\nfunction emptyPathMatch(segmentGroup, slicedSegments, r) {\n  if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && r.pathMatch === 'full') {\n    return false;\n  }\n\n  return r.path === '' && r.redirectTo === undefined;\n}\n/**\n * @param {?} route\n * @return {?}\n */\n\n\nfunction getOutlet$1(route) {\n  return route.outlet || PRIMARY_OUTLET;\n}\n/**\n * @param {?} route\n * @return {?}\n */\n\n\nfunction getData(route) {\n  return route.data || {};\n}\n/**\n * @param {?} route\n * @return {?}\n */\n\n\nfunction getResolve(route) {\n  return route.resolve || {};\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/router/src/operators/recognize.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @param {?} rootComponentType\n * @param {?} config\n * @param {?} serializer\n * @param {?} paramsInheritanceStrategy\n * @param {?} relativeLinkResolution\n * @return {?}\n */\n\n\nfunction recognize$1(rootComponentType, config, serializer, paramsInheritanceStrategy, relativeLinkResolution) {\n  return (\n    /**\n    * @param {?} source\n    * @return {?}\n    */\n    function (source) {\n      return source.pipe(mergeMap(\n      /**\n      * @param {?} t\n      * @return {?}\n      */\n      t => recognize(rootComponentType, config, t.urlAfterRedirects, serializer(t.urlAfterRedirects), paramsInheritanceStrategy, relativeLinkResolution).pipe(map(\n      /**\n      * @param {?} targetSnapshot\n      * @return {?}\n      */\n      targetSnapshot => Object.assign(Object.assign({}, t), {\n        targetSnapshot\n      })))));\n    }\n  );\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/router/src/operators/resolve_data.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @param {?} paramsInheritanceStrategy\n * @param {?} moduleInjector\n * @return {?}\n */\n\n\nfunction resolveData(paramsInheritanceStrategy, moduleInjector) {\n  return (\n    /**\n    * @param {?} source\n    * @return {?}\n    */\n    function (source) {\n      return source.pipe(mergeMap(\n      /**\n      * @param {?} t\n      * @return {?}\n      */\n      t => {\n        const {\n          targetSnapshot,\n          guards: {\n            canActivateChecks\n          }\n        } = t;\n\n        if (!canActivateChecks.length) {\n          return of(t);\n        }\n\n        return from(canActivateChecks).pipe(concatMap(\n        /**\n        * @param {?} check\n        * @return {?}\n        */\n        check => runResolve(check.route,\n        /** @type {?} */\n        targetSnapshot, paramsInheritanceStrategy, moduleInjector)), reduce(\n        /**\n        * @param {?} _\n        * @param {?} __\n        * @return {?}\n        */\n        (_, __) => _), map(\n        /**\n        * @param {?} _\n        * @return {?}\n        */\n        _ => t));\n      }));\n    }\n  );\n}\n/**\n * @param {?} futureARS\n * @param {?} futureRSS\n * @param {?} paramsInheritanceStrategy\n * @param {?} moduleInjector\n * @return {?}\n */\n\n\nfunction runResolve(futureARS, futureRSS, paramsInheritanceStrategy, moduleInjector) {\n  /** @type {?} */\n  const resolve = futureARS._resolve;\n  return resolveNode(resolve, futureARS, futureRSS, moduleInjector).pipe(map(\n  /**\n  * @param {?} resolvedData\n  * @return {?}\n  */\n  resolvedData => {\n    futureARS._resolvedData = resolvedData;\n    futureARS.data = Object.assign(Object.assign({}, futureARS.data), inheritedParamsDataResolve(futureARS, paramsInheritanceStrategy).resolve);\n    return null;\n  }));\n}\n/**\n * @param {?} resolve\n * @param {?} futureARS\n * @param {?} futureRSS\n * @param {?} moduleInjector\n * @return {?}\n */\n\n\nfunction resolveNode(resolve, futureARS, futureRSS, moduleInjector) {\n  /** @type {?} */\n  const keys = Object.keys(resolve);\n\n  if (keys.length === 0) {\n    return of({});\n  }\n\n  if (keys.length === 1) {\n    /** @type {?} */\n    const key = keys[0];\n    return getResolver(resolve[key], futureARS, futureRSS, moduleInjector).pipe(map(\n    /**\n    * @param {?} value\n    * @return {?}\n    */\n    value => {\n      return {\n        [key]: value\n      };\n    }));\n  }\n  /** @type {?} */\n\n\n  const data = {};\n  /** @type {?} */\n\n  const runningResolvers$ = from(keys).pipe(mergeMap(\n  /**\n  * @param {?} key\n  * @return {?}\n  */\n  key => {\n    return getResolver(resolve[key], futureARS, futureRSS, moduleInjector).pipe(map(\n    /**\n    * @param {?} value\n    * @return {?}\n    */\n    value => {\n      data[key] = value;\n      return value;\n    }));\n  }));\n  return runningResolvers$.pipe(last$1(), map(\n  /**\n  * @return {?}\n  */\n  () => data));\n}\n/**\n * @param {?} injectionToken\n * @param {?} futureARS\n * @param {?} futureRSS\n * @param {?} moduleInjector\n * @return {?}\n */\n\n\nfunction getResolver(injectionToken, futureARS, futureRSS, moduleInjector) {\n  /** @type {?} */\n  const resolver = getToken(injectionToken, futureARS, moduleInjector);\n  return resolver.resolve ? wrapIntoObservable(resolver.resolve(futureARS, futureRSS)) : wrapIntoObservable(resolver(futureARS, futureRSS));\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/router/src/operators/switch_tap.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Perform a side effect through a switchMap for every emission on the source Observable,\n * but return an Observable that is identical to the source. It's essentially the same as\n * the `tap` operator, but if the side effectful `next` function returns an ObservableInput,\n * it will wait before continuing with the original value.\n * @template T\n * @param {?} next\n * @return {?}\n */\n\n\nfunction switchTap(next) {\n  return (\n    /**\n    * @param {?} source\n    * @return {?}\n    */\n    function (source) {\n      return source.pipe(switchMap(\n      /**\n      * @param {?} v\n      * @return {?}\n      */\n      v => {\n        /** @type {?} */\n        const nextResult = next(v);\n\n        if (nextResult) {\n          return from(nextResult).pipe(map(\n          /**\n          * @return {?}\n          */\n          () => v));\n        }\n\n        return from([v]);\n      }));\n    }\n  );\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/router/src/route_reuse_strategy.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * \\@description\n *\n * Provides a way to customize when activated routes get reused.\n *\n * \\@publicApi\n * @abstract\n */\n\n\nclass RouteReuseStrategy {}\n\nif (false) {\n  /**\n   * Determines if this route (and its subtree) should be detached to be reused later\n   * @abstract\n   * @param {?} route\n   * @return {?}\n   */\n  RouteReuseStrategy.prototype.shouldDetach = function (route) {};\n  /**\n   * Stores the detached route.\n   *\n   * Storing a `null` value should erase the previously stored value.\n   * @abstract\n   * @param {?} route\n   * @param {?} handle\n   * @return {?}\n   */\n\n\n  RouteReuseStrategy.prototype.store = function (route, handle) {};\n  /**\n   * Determines if this route (and its subtree) should be reattached\n   * @abstract\n   * @param {?} route\n   * @return {?}\n   */\n\n\n  RouteReuseStrategy.prototype.shouldAttach = function (route) {};\n  /**\n   * Retrieves the previously stored route\n   * @abstract\n   * @param {?} route\n   * @return {?}\n   */\n\n\n  RouteReuseStrategy.prototype.retrieve = function (route) {};\n  /**\n   * Determines if a route should be reused\n   * @abstract\n   * @param {?} future\n   * @param {?} curr\n   * @return {?}\n   */\n\n\n  RouteReuseStrategy.prototype.shouldReuseRoute = function (future, curr) {};\n}\n/**\n * Does not detach any subtrees. Reuses routes as long as their route config is the same.\n */\n\n\nclass DefaultRouteReuseStrategy {\n  /**\n   * @param {?} route\n   * @return {?}\n   */\n  shouldDetach(route) {\n    return false;\n  }\n  /**\n   * @param {?} route\n   * @param {?} detachedTree\n   * @return {?}\n   */\n\n\n  store(route, detachedTree) {}\n  /**\n   * @param {?} route\n   * @return {?}\n   */\n\n\n  shouldAttach(route) {\n    return false;\n  }\n  /**\n   * @param {?} route\n   * @return {?}\n   */\n\n\n  retrieve(route) {\n    return null;\n  }\n  /**\n   * @param {?} future\n   * @param {?} curr\n   * @return {?}\n   */\n\n\n  shouldReuseRoute(future, curr) {\n    return future.routeConfig === curr.routeConfig;\n  }\n\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/router/src/router_config_loader.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * The [DI token](guide/glossary/#di-token) for a router configuration.\n * @see `ROUTES`\n * \\@publicApi\n * @type {?}\n */\n\n\nconst ROUTES = new InjectionToken('ROUTES');\n\nclass RouterConfigLoader {\n  /**\n   * @param {?} loader\n   * @param {?} compiler\n   * @param {?=} onLoadStartListener\n   * @param {?=} onLoadEndListener\n   */\n  constructor(loader, compiler, onLoadStartListener, onLoadEndListener) {\n    this.loader = loader;\n    this.compiler = compiler;\n    this.onLoadStartListener = onLoadStartListener;\n    this.onLoadEndListener = onLoadEndListener;\n  }\n  /**\n   * @param {?} parentInjector\n   * @param {?} route\n   * @return {?}\n   */\n\n\n  load(parentInjector, route) {\n    if (this.onLoadStartListener) {\n      this.onLoadStartListener(route);\n    }\n    /** @type {?} */\n\n\n    const moduleFactory$ = this.loadModuleFactory(\n    /** @type {?} */\n    route.loadChildren);\n    return moduleFactory$.pipe(map(\n    /**\n    * @param {?} factory\n    * @return {?}\n    */\n    factory => {\n      if (this.onLoadEndListener) {\n        this.onLoadEndListener(route);\n      }\n      /** @type {?} */\n\n\n      const module = factory.create(parentInjector);\n      return new LoadedRouterConfig(flatten(module.injector.get(ROUTES)).map(standardizeConfig), module);\n    }));\n  }\n  /**\n   * @private\n   * @param {?} loadChildren\n   * @return {?}\n   */\n\n\n  loadModuleFactory(loadChildren) {\n    if (typeof loadChildren === 'string') {\n      return from(this.loader.load(loadChildren));\n    } else {\n      return wrapIntoObservable(loadChildren()).pipe(mergeMap(\n      /**\n      * @param {?} t\n      * @return {?}\n      */\n      t => {\n        if (t instanceof NgModuleFactory) {\n          return of(t);\n        } else {\n          return from(this.compiler.compileModuleAsync(t));\n        }\n      }));\n    }\n  }\n\n}\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  RouterConfigLoader.prototype.loader;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  RouterConfigLoader.prototype.compiler;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  RouterConfigLoader.prototype.onLoadStartListener;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  RouterConfigLoader.prototype.onLoadEndListener;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/router/src/url_handling_strategy.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * \\@description\n *\n * Provides a way to migrate AngularJS applications to Angular.\n *\n * \\@publicApi\n * @abstract\n */\n\n\nclass UrlHandlingStrategy {}\n\nif (false) {\n  /**\n   * Tells the router if this URL should be processed.\n   *\n   * When it returns true, the router will execute the regular navigation.\n   * When it returns false, the router will set the router state to an empty state.\n   * As a result, all the active components will be destroyed.\n   *\n   * @abstract\n   * @param {?} url\n   * @return {?}\n   */\n  UrlHandlingStrategy.prototype.shouldProcessUrl = function (url) {};\n  /**\n   * Extracts the part of the URL that should be handled by the router.\n   * The rest of the URL will remain untouched.\n   * @abstract\n   * @param {?} url\n   * @return {?}\n   */\n\n\n  UrlHandlingStrategy.prototype.extract = function (url) {};\n  /**\n   * Merges the URL fragment with the rest of the URL.\n   * @abstract\n   * @param {?} newUrlPart\n   * @param {?} rawUrl\n   * @return {?}\n   */\n\n\n  UrlHandlingStrategy.prototype.merge = function (newUrlPart, rawUrl) {};\n}\n/**\n * \\@publicApi\n */\n\n\nclass DefaultUrlHandlingStrategy {\n  /**\n   * @param {?} url\n   * @return {?}\n   */\n  shouldProcessUrl(url) {\n    return true;\n  }\n  /**\n   * @param {?} url\n   * @return {?}\n   */\n\n\n  extract(url) {\n    return url;\n  }\n  /**\n   * @param {?} newUrlPart\n   * @param {?} wholeUrl\n   * @return {?}\n   */\n\n\n  merge(newUrlPart, wholeUrl) {\n    return newUrlPart;\n  }\n\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/router/src/router.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * \\@description\n *\n * Options that modify the navigation strategy.\n *\n * \\@publicApi\n * @record\n */\n\n\nfunction NavigationExtras() {}\n\nif (false) {\n  /**\n   * Specifies a root URI to use for relative navigation.\n   *\n   * For example, consider the following route configuration where the parent route\n   * has two children.\n   *\n   * ```\n   * [{\n   *   path: 'parent',\n   *   component: ParentComponent,\n   *   children: [{\n   *     path: 'list',\n   *     component: ListComponent\n   *   },{\n   *     path: 'child',\n   *     component: ChildComponent\n   *   }]\n   * }]\n   * ```\n   *\n   * The following `go()` function navigates to the `list` route by\n   * interpreting the destination URI as relative to the activated `child`  route\n   *\n   * ```\n   * \\@Component({...})\n   *  class ChildComponent {\n   *    constructor(private router: Router, private route: ActivatedRoute) {}\n   *\n   *    go() {\n   *      this.router.navigate(['../list'], { relativeTo: this.route });\n   *    }\n   *  }\n   * ```\n   * @type {?|undefined}\n   */\n  NavigationExtras.prototype.relativeTo;\n  /**\n   * Sets query parameters to the URL.\n   *\n   * ```\n   * // Navigate to /results?page=1\n   * this.router.navigate(['/results'], { queryParams: { page: 1 } });\n   * ```\n   * @type {?|undefined}\n   */\n\n  NavigationExtras.prototype.queryParams;\n  /**\n   * Sets the hash fragment for the URL.\n   *\n   * ```\n   * // Navigate to /results#top\n   * this.router.navigate(['/results'], { fragment: 'top' });\n   * ```\n   * @type {?|undefined}\n   */\n\n  NavigationExtras.prototype.fragment;\n  /**\n   * **DEPRECATED**: Use `queryParamsHandling: \"preserve\"` instead to preserve\n   * query parameters for the next navigation.\n   *\n   * @deprecated since v4\n   * @type {?|undefined}\n   */\n\n  NavigationExtras.prototype.preserveQueryParams;\n  /**\n   * How to handle query parameters in the router link for the next navigation.\n   * One of:\n   * * `merge` : Merge new with current parameters.\n   * * `preserve` : Preserve current parameters.\n   *\n   * ```\n   * // from /results?page=1 to /view?page=1&page=2\n   * this.router.navigate(['/view'], { queryParams: { page: 2 },  queryParamsHandling: \"merge\" });\n   * ```\n   * @type {?|undefined}\n   */\n\n  NavigationExtras.prototype.queryParamsHandling;\n  /**\n   * When true, preserves the URL fragment for the next navigation\n   *\n   * ```\n   * // Preserve fragment from /results#top to /view#top\n   * this.router.navigate(['/view'], { preserveFragment: true });\n   * ```\n   * @type {?|undefined}\n   */\n\n  NavigationExtras.prototype.preserveFragment;\n  /**\n   * When true, navigates without pushing a new state into history.\n   *\n   * ```\n   * // Navigate silently to /view\n   * this.router.navigate(['/view'], { skipLocationChange: true });\n   * ```\n   * @type {?|undefined}\n   */\n\n  NavigationExtras.prototype.skipLocationChange;\n  /**\n   * When true, navigates while replacing the current state in history.\n   *\n   * ```\n   * // Navigate to /view\n   * this.router.navigate(['/view'], { replaceUrl: true });\n   * ```\n   * @type {?|undefined}\n   */\n\n  NavigationExtras.prototype.replaceUrl;\n  /**\n   * Developer-defined state that can be passed to any navigation.\n   * Access this value through the `Navigation.extras` object\n   * returned from `router.getCurrentNavigation()` while a navigation is executing.\n   *\n   * After a navigation completes, the router writes an object containing this\n   * value together with a `navigationId` to `history.state`.\n   * The value is written when `location.go()` or `location.replaceState()`\n   * is called before activating this route.\n   *\n   * Note that `history.state` does not pass an object equality test because\n   * the router adds the `navigationId` on each navigation.\n   * @type {?|undefined}\n   */\n\n  NavigationExtras.prototype.state;\n}\n/**\n * @param {?} error\n * @return {?}\n */\n\n\nfunction defaultErrorHandler(error) {\n  throw error;\n}\n/**\n * @param {?} error\n * @param {?} urlSerializer\n * @param {?} url\n * @return {?}\n */\n\n\nfunction defaultMalformedUriErrorHandler(error, urlSerializer, url) {\n  return urlSerializer.parse('/');\n}\n/**\n * \\@internal\n * @param {?} snapshot\n * @param {?} runExtras\n * @return {?}\n */\n\n\nfunction defaultRouterHook(snapshot, runExtras) {\n  return (\n    /** @type {?} */\n    of(null)\n  );\n}\n/**\n * \\@description\n *\n * A service that provides navigation and URL manipulation capabilities.\n *\n * @see `Route`.\n * @see [Routing and Navigation Guide](guide/router).\n *\n * \\@ngModule RouterModule\n *\n * \\@publicApi\n */\n\n\nclass Router {\n  /**\n   * Creates the router service.\n   * @param {?} rootComponentType\n   * @param {?} urlSerializer\n   * @param {?} rootContexts\n   * @param {?} location\n   * @param {?} injector\n   * @param {?} loader\n   * @param {?} compiler\n   * @param {?} config\n   */\n  // TODO: vsavkin make internal after the final is out.\n  constructor(rootComponentType, urlSerializer, rootContexts, location, injector, loader, compiler, config) {\n    this.rootComponentType = rootComponentType;\n    this.urlSerializer = urlSerializer;\n    this.rootContexts = rootContexts;\n    this.location = location;\n    this.config = config;\n    this.lastSuccessfulNavigation = null;\n    this.currentNavigation = null;\n    this.navigationId = 0;\n    this.isNgZoneEnabled = false;\n    /**\n     * An event stream for routing events in this NgModule.\n     */\n\n    this.events = new Subject();\n    /**\n     * A handler for navigation errors in this NgModule.\n     */\n\n    this.errorHandler = defaultErrorHandler;\n    /**\n     * A handler for errors thrown by `Router.parseUrl(url)`\n     * when `url` contains an invalid character.\n     * The most common case is a `%` sign\n     * that's not encoded and is not part of a percent encoded sequence.\n     */\n\n    this.malformedUriErrorHandler = defaultMalformedUriErrorHandler;\n    /**\n     * True if at least one navigation event has occurred,\n     * false otherwise.\n     */\n\n    this.navigated = false;\n    this.lastSuccessfulId = -1;\n    /**\n     * Hooks that enable you to pause navigation,\n     * either before or after the preactivation phase.\n     * Used by `RouterModule`.\n     *\n     * \\@internal\n     */\n\n    this.hooks = {\n      beforePreactivation: defaultRouterHook,\n      afterPreactivation: defaultRouterHook\n    };\n    /**\n     * A strategy for extracting and merging URLs.\n     * Used for AngularJS to Angular migrations.\n     */\n\n    this.urlHandlingStrategy = new DefaultUrlHandlingStrategy();\n    /**\n     * A strategy for re-using routes.\n     */\n\n    this.routeReuseStrategy = new DefaultRouteReuseStrategy();\n    /**\n     * How to handle a navigation request to the current URL. One of:\n     * - `'ignore'` :  The router ignores the request.\n     * - `'reload'` : The router reloads the URL. Use to implement a \"refresh\" feature.\n     */\n\n    this.onSameUrlNavigation = 'ignore';\n    /**\n     * How to merge parameters, data, and resolved data from parent to child\n     * routes. One of:\n     *\n     * - `'emptyOnly'` : Inherit parent parameters, data, and resolved data\n     * for path-less or component-less routes.\n     * - `'always'` : Inherit parent parameters, data, and resolved data\n     * for all child routes.\n     */\n\n    this.paramsInheritanceStrategy = 'emptyOnly';\n    /**\n     * Determines when the router updates the browser URL.\n     * By default (`\"deferred\"`), updates the browser URL after navigation has finished.\n     * Set to `'eager'` to update the browser URL at the beginning of navigation.\n     * You can choose to update early so that, if navigation fails,\n     * you can show an error message with the URL that failed.\n     */\n\n    this.urlUpdateStrategy = 'deferred';\n    /**\n     * Enables a bug fix that corrects relative link resolution in components with empty paths.\n     * @see `RouterModule`\n     */\n\n    this.relativeLinkResolution = 'legacy';\n    /** @type {?} */\n\n    const onLoadStart =\n    /**\n    * @param {?} r\n    * @return {?}\n    */\n    r => this.triggerEvent(new RouteConfigLoadStart(r));\n    /** @type {?} */\n\n\n    const onLoadEnd =\n    /**\n    * @param {?} r\n    * @return {?}\n    */\n    r => this.triggerEvent(new RouteConfigLoadEnd(r));\n\n    this.ngModule = injector.get(NgModuleRef);\n    this.console = injector.get(ɵConsole);\n    /** @type {?} */\n\n    const ngZone = injector.get(NgZone);\n    this.isNgZoneEnabled = ngZone instanceof NgZone;\n    this.resetConfig(config);\n    this.currentUrlTree = createEmptyUrlTree();\n    this.rawUrlTree = this.currentUrlTree;\n    this.browserUrlTree = this.currentUrlTree;\n    this.configLoader = new RouterConfigLoader(loader, compiler, onLoadStart, onLoadEnd);\n    this.routerState = createEmptyState(this.currentUrlTree, this.rootComponentType);\n    this.transitions = new BehaviorSubject({\n      id: 0,\n      currentUrlTree: this.currentUrlTree,\n      currentRawUrl: this.currentUrlTree,\n      extractedUrl: this.urlHandlingStrategy.extract(this.currentUrlTree),\n      urlAfterRedirects: this.urlHandlingStrategy.extract(this.currentUrlTree),\n      rawUrl: this.currentUrlTree,\n      extras: {},\n      resolve: null,\n      reject: null,\n      promise: Promise.resolve(true),\n      source: 'imperative',\n      restoredState: null,\n      currentSnapshot: this.routerState.snapshot,\n      targetSnapshot: null,\n      currentRouterState: this.routerState,\n      targetRouterState: null,\n      guards: {\n        canActivateChecks: [],\n        canDeactivateChecks: []\n      },\n      guardsResult: null\n    });\n    this.navigations = this.setupNavigations(this.transitions);\n    this.processNavigations();\n  }\n  /**\n   * @private\n   * @param {?} transitions\n   * @return {?}\n   */\n\n\n  setupNavigations(transitions) {\n    /** @type {?} */\n    const eventsSubject =\n    /** @type {?} */\n    this.events;\n    return (\n      /** @type {?} */\n\n      /** @type {?} */\n      transitions.pipe(filter(\n      /**\n      * @param {?} t\n      * @return {?}\n      */\n      t => t.id !== 0), // Extract URL\n      map(\n      /**\n      * @param {?} t\n      * @return {?}\n      */\n      t =>\n      /** @type {?} */\n      Object.assign(Object.assign({}, t), {\n        extractedUrl: this.urlHandlingStrategy.extract(t.rawUrl)\n      })), // Using switchMap so we cancel executing navigations when a new one comes in\n      switchMap(\n      /**\n      * @param {?} t\n      * @return {?}\n      */\n      t => {\n        /** @type {?} */\n        let completed = false;\n        /** @type {?} */\n\n        let errored = false;\n        return of(t).pipe( // Store the Navigation object\n        tap(\n        /**\n        * @param {?} t\n        * @return {?}\n        */\n        t => {\n          this.currentNavigation = {\n            id: t.id,\n            initialUrl: t.currentRawUrl,\n            extractedUrl: t.extractedUrl,\n            trigger: t.source,\n            extras: t.extras,\n            previousNavigation: this.lastSuccessfulNavigation ? Object.assign(Object.assign({}, this.lastSuccessfulNavigation), {\n              previousNavigation: null\n            }) : null\n          };\n        }), switchMap(\n        /**\n        * @param {?} t\n        * @return {?}\n        */\n        t => {\n          /** @type {?} */\n          const urlTransition = !this.navigated || t.extractedUrl.toString() !== this.browserUrlTree.toString();\n          /** @type {?} */\n\n          const processCurrentUrl = (this.onSameUrlNavigation === 'reload' ? true : urlTransition) && this.urlHandlingStrategy.shouldProcessUrl(t.rawUrl);\n\n          if (processCurrentUrl) {\n            return of(t).pipe( // Fire NavigationStart event\n            switchMap(\n            /**\n            * @param {?} t\n            * @return {?}\n            */\n            t => {\n              /** @type {?} */\n              const transition = this.transitions.getValue();\n              eventsSubject.next(new NavigationStart(t.id, this.serializeUrl(t.extractedUrl), t.source, t.restoredState));\n\n              if (transition !== this.transitions.getValue()) {\n                return EMPTY;\n              }\n\n              return [t];\n            }), // This delay is required to match old behavior that forced navigation to\n            // always be async\n            switchMap(\n            /**\n            * @param {?} t\n            * @return {?}\n            */\n            t => Promise.resolve(t)), // ApplyRedirects\n            applyRedirects$1(this.ngModule.injector, this.configLoader, this.urlSerializer, this.config), // Update the currentNavigation\n            tap(\n            /**\n            * @param {?} t\n            * @return {?}\n            */\n            t => {\n              this.currentNavigation = Object.assign(Object.assign({},\n              /** @type {?} */\n              this.currentNavigation), {\n                finalUrl: t.urlAfterRedirects\n              });\n            }), // Recognize\n            recognize$1(this.rootComponentType, this.config,\n            /**\n            * @param {?} url\n            * @return {?}\n            */\n            url => this.serializeUrl(url), this.paramsInheritanceStrategy, this.relativeLinkResolution), // Update URL if in `eager` update mode\n            tap(\n            /**\n            * @param {?} t\n            * @return {?}\n            */\n            t => {\n              if (this.urlUpdateStrategy === 'eager') {\n                if (!t.extras.skipLocationChange) {\n                  this.setBrowserUrl(t.urlAfterRedirects, !!t.extras.replaceUrl, t.id, t.extras.state);\n                }\n\n                this.browserUrlTree = t.urlAfterRedirects;\n              }\n            }), // Fire RoutesRecognized\n            tap(\n            /**\n            * @param {?} t\n            * @return {?}\n            */\n            t => {\n              /** @type {?} */\n              const routesRecognized = new RoutesRecognized(t.id, this.serializeUrl(t.extractedUrl), this.serializeUrl(t.urlAfterRedirects),\n              /** @type {?} */\n              t.targetSnapshot);\n              eventsSubject.next(routesRecognized);\n            }));\n          } else {\n            /** @type {?} */\n            const processPreviousUrl = urlTransition && this.rawUrlTree && this.urlHandlingStrategy.shouldProcessUrl(this.rawUrlTree);\n            /* When the current URL shouldn't be processed, but the previous one was, we\n             * handle this \"error condition\" by navigating to the previously successful URL,\n             * but leaving the URL intact.*/\n\n            if (processPreviousUrl) {\n              const {\n                id,\n                extractedUrl,\n                source,\n                restoredState,\n                extras\n              } = t;\n              /** @type {?} */\n\n              const navStart = new NavigationStart(id, this.serializeUrl(extractedUrl), source, restoredState);\n              eventsSubject.next(navStart);\n              /** @type {?} */\n\n              const targetSnapshot = createEmptyState(extractedUrl, this.rootComponentType).snapshot;\n              return of(Object.assign(Object.assign({}, t), {\n                targetSnapshot,\n                urlAfterRedirects: extractedUrl,\n                extras: Object.assign(Object.assign({}, extras), {\n                  skipLocationChange: false,\n                  replaceUrl: false\n                })\n              }));\n            } else {\n              /* When neither the current or previous URL can be processed, do nothing other\n               * than update router's internal reference to the current \"settled\" URL. This\n               * way the next navigation will be coming from the current URL in the browser.\n               */\n              this.rawUrlTree = t.rawUrl;\n              this.browserUrlTree = t.urlAfterRedirects;\n              t.resolve(null);\n              return EMPTY;\n            }\n          }\n        }), // Before Preactivation\n        switchTap(\n        /**\n        * @param {?} t\n        * @return {?}\n        */\n        t => {\n          const {\n            targetSnapshot,\n            id: navigationId,\n            extractedUrl: appliedUrlTree,\n            rawUrl: rawUrlTree,\n            extras: {\n              skipLocationChange,\n              replaceUrl\n            }\n          } = t;\n          return this.hooks.beforePreactivation(\n          /** @type {?} */\n          targetSnapshot, {\n            navigationId,\n            appliedUrlTree,\n            rawUrlTree,\n            skipLocationChange: !!skipLocationChange,\n            replaceUrl: !!replaceUrl\n          });\n        }), // --- GUARDS ---\n        tap(\n        /**\n        * @param {?} t\n        * @return {?}\n        */\n        t => {\n          /** @type {?} */\n          const guardsStart = new GuardsCheckStart(t.id, this.serializeUrl(t.extractedUrl), this.serializeUrl(t.urlAfterRedirects),\n          /** @type {?} */\n          t.targetSnapshot);\n          this.triggerEvent(guardsStart);\n        }), map(\n        /**\n        * @param {?} t\n        * @return {?}\n        */\n        t => Object.assign(Object.assign({}, t), {\n          guards: getAllRouteGuards(\n          /** @type {?} */\n          t.targetSnapshot, t.currentSnapshot, this.rootContexts)\n        })), checkGuards(this.ngModule.injector,\n        /**\n        * @param {?} evt\n        * @return {?}\n        */\n        evt => this.triggerEvent(evt)), tap(\n        /**\n        * @param {?} t\n        * @return {?}\n        */\n        t => {\n          if (isUrlTree(t.guardsResult)) {\n            /** @type {?} */\n            const error = navigationCancelingError(`Redirecting to \"${this.serializeUrl(t.guardsResult)}\"`);\n            error.url = t.guardsResult;\n            throw error;\n          }\n        }), tap(\n        /**\n        * @param {?} t\n        * @return {?}\n        */\n        t => {\n          /** @type {?} */\n          const guardsEnd = new GuardsCheckEnd(t.id, this.serializeUrl(t.extractedUrl), this.serializeUrl(t.urlAfterRedirects),\n          /** @type {?} */\n          t.targetSnapshot, !!t.guardsResult);\n          this.triggerEvent(guardsEnd);\n        }), filter(\n        /**\n        * @param {?} t\n        * @return {?}\n        */\n        t => {\n          if (!t.guardsResult) {\n            this.resetUrlToCurrentUrlTree();\n            /** @type {?} */\n\n            const navCancel = new NavigationCancel(t.id, this.serializeUrl(t.extractedUrl), '');\n            eventsSubject.next(navCancel);\n            t.resolve(false);\n            return false;\n          }\n\n          return true;\n        }), // --- RESOLVE ---\n        switchTap(\n        /**\n        * @param {?} t\n        * @return {?}\n        */\n        t => {\n          if (t.guards.canActivateChecks.length) {\n            return of(t).pipe(tap(\n            /**\n            * @param {?} t\n            * @return {?}\n            */\n            t => {\n              /** @type {?} */\n              const resolveStart = new ResolveStart(t.id, this.serializeUrl(t.extractedUrl), this.serializeUrl(t.urlAfterRedirects),\n              /** @type {?} */\n              t.targetSnapshot);\n              this.triggerEvent(resolveStart);\n            }), resolveData(this.paramsInheritanceStrategy, this.ngModule.injector), //\n            tap(\n            /**\n            * @param {?} t\n            * @return {?}\n            */\n            t => {\n              /** @type {?} */\n              const resolveEnd = new ResolveEnd(t.id, this.serializeUrl(t.extractedUrl), this.serializeUrl(t.urlAfterRedirects),\n              /** @type {?} */\n              t.targetSnapshot);\n              this.triggerEvent(resolveEnd);\n            }));\n          }\n\n          return undefined;\n        }), // --- AFTER PREACTIVATION ---\n        switchTap(\n        /**\n        * @param {?} t\n        * @return {?}\n        */\n        t => {\n          const {\n            targetSnapshot,\n            id: navigationId,\n            extractedUrl: appliedUrlTree,\n            rawUrl: rawUrlTree,\n            extras: {\n              skipLocationChange,\n              replaceUrl\n            }\n          } = t;\n          return this.hooks.afterPreactivation(\n          /** @type {?} */\n          targetSnapshot, {\n            navigationId,\n            appliedUrlTree,\n            rawUrlTree,\n            skipLocationChange: !!skipLocationChange,\n            replaceUrl: !!replaceUrl\n          });\n        }), map(\n        /**\n        * @param {?} t\n        * @return {?}\n        */\n        t => {\n          /** @type {?} */\n          const targetRouterState = createRouterState(this.routeReuseStrategy,\n          /** @type {?} */\n          t.targetSnapshot, t.currentRouterState);\n          return Object.assign(Object.assign({}, t), {\n            targetRouterState\n          });\n        }),\n        /* Once here, we are about to activate syncronously. The assumption is this will\n           succeed, and user code may read from the Router service. Therefore before\n           activation, we need to update router properties storing the current URL and the\n           RouterState, as well as updated the browser URL. All this should happen *before*\n           activating. */\n        tap(\n        /**\n        * @param {?} t\n        * @return {?}\n        */\n        t => {\n          this.currentUrlTree = t.urlAfterRedirects;\n          this.rawUrlTree = this.urlHandlingStrategy.merge(this.currentUrlTree, t.rawUrl);\n\n          /** @type {?} */\n          this.routerState =\n          /** @type {?} */\n          t.targetRouterState;\n\n          if (this.urlUpdateStrategy === 'deferred') {\n            if (!t.extras.skipLocationChange) {\n              this.setBrowserUrl(this.rawUrlTree, !!t.extras.replaceUrl, t.id, t.extras.state);\n            }\n\n            this.browserUrlTree = t.urlAfterRedirects;\n          }\n        }), activateRoutes(this.rootContexts, this.routeReuseStrategy,\n        /**\n        * @param {?} evt\n        * @return {?}\n        */\n        evt => this.triggerEvent(evt)), tap({\n          /**\n          * @return {?}\n          */\n          next() {\n            completed = true;\n          },\n\n          /**\n          * @return {?}\n          */\n          complete() {\n            completed = true;\n          }\n\n        }), finalize(\n        /**\n        * @return {?}\n        */\n        () => {\n          /* When the navigation stream finishes either through error or success, we set the\n           * `completed` or `errored` flag. However, there are some situations where we could\n           * get here without either of those being set. For instance, a redirect during\n           * NavigationStart. Therefore, this is a catch-all to make sure the NavigationCancel\n           * event is fired when a navigation gets cancelled but not caught by other means. */\n          if (!completed && !errored) {\n            // Must reset to current URL tree here to ensure history.state is set. On a fresh\n            // page load, if a new navigation comes in before a successful navigation\n            // completes, there will be nothing in history.state.navigationId. This can cause\n            // sync problems with AngularJS sync code which looks for a value here in order\n            // to determine whether or not to handle a given popstate event or to leave it\n            // to the Angualr router.\n            this.resetUrlToCurrentUrlTree();\n            /** @type {?} */\n\n            const navCancel = new NavigationCancel(t.id, this.serializeUrl(t.extractedUrl), `Navigation ID ${t.id} is not equal to the current navigation id ${this.navigationId}`);\n            eventsSubject.next(navCancel);\n            t.resolve(false);\n          } // currentNavigation should always be reset to null here. If navigation was\n          // successful, lastSuccessfulTransition will have already been set. Therefore we\n          // can safely set currentNavigation to null here.\n\n\n          this.currentNavigation = null;\n        }), catchError(\n        /**\n        * @param {?} e\n        * @return {?}\n        */\n        e => {\n          errored = true;\n          /* This error type is issued during Redirect, and is handled as a cancellation\n           * rather than an error. */\n\n          if (isNavigationCancelingError(e)) {\n            /** @type {?} */\n            const redirecting = isUrlTree(e.url);\n\n            if (!redirecting) {\n              // Set property only if we're not redirecting. If we landed on a page and\n              // redirect to `/` route, the new navigation is going to see the `/` isn't\n              // a change from the default currentUrlTree and won't navigate. This is\n              // only applicable with initial navigation, so setting `navigated` only when\n              // not redirecting resolves this scenario.\n              this.navigated = true;\n              this.resetStateAndUrl(t.currentRouterState, t.currentUrlTree, t.rawUrl);\n            }\n            /** @type {?} */\n\n\n            const navCancel = new NavigationCancel(t.id, this.serializeUrl(t.extractedUrl), e.message);\n            eventsSubject.next(navCancel); // When redirecting, we need to delay resolving the navigation\n            // promise and push it to the redirect navigation\n\n            if (!redirecting) {\n              t.resolve(false);\n            } else {\n              // setTimeout is required so this navigation finishes with\n              // the return EMPTY below. If it isn't allowed to finish\n              // processing, there can be multiple navigations to the same\n              // URL.\n              setTimeout(\n              /**\n              * @return {?}\n              */\n              () => {\n                /** @type {?} */\n                const mergedTree = this.urlHandlingStrategy.merge(e.url, this.rawUrlTree);\n                /** @type {?} */\n\n                const extras = {\n                  skipLocationChange: t.extras.skipLocationChange,\n                  replaceUrl: this.urlUpdateStrategy === 'eager'\n                };\n                return this.scheduleNavigation(mergedTree, 'imperative', null, extras, {\n                  resolve: t.resolve,\n                  reject: t.reject,\n                  promise: t.promise\n                });\n              }, 0);\n            }\n            /* All other errors should reset to the router's internal URL reference to the\n             * pre-error state. */\n\n          } else {\n            this.resetStateAndUrl(t.currentRouterState, t.currentUrlTree, t.rawUrl);\n            /** @type {?} */\n\n            const navError = new NavigationError(t.id, this.serializeUrl(t.extractedUrl), e);\n            eventsSubject.next(navError);\n\n            try {\n              t.resolve(this.errorHandler(e));\n            } catch (ee) {\n              t.reject(ee);\n            }\n          }\n\n          return EMPTY;\n        })); // TODO(jasonaden): remove cast once g3 is on updated TypeScript\n      }))\n    );\n  }\n  /**\n   * \\@internal\n   * TODO: this should be removed once the constructor of the router made internal\n   * @param {?} rootComponentType\n   * @return {?}\n   */\n\n\n  resetRootComponentType(rootComponentType) {\n    this.rootComponentType = rootComponentType; // TODO: vsavkin router 4.0 should make the root component set to null\n    // this will simplify the lifecycle of the router.\n\n    this.routerState.root.component = this.rootComponentType;\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n\n\n  getTransition() {\n    /** @type {?} */\n    const transition = this.transitions.value; // This value needs to be set. Other values such as extractedUrl are set on initial navigation\n    // but the urlAfterRedirects may not get set if we aren't processing the new URL *and* not\n    // processing the previous URL.\n\n    transition.urlAfterRedirects = this.browserUrlTree;\n    return transition;\n  }\n  /**\n   * @private\n   * @param {?} t\n   * @return {?}\n   */\n\n\n  setTransition(t) {\n    this.transitions.next(Object.assign(Object.assign({}, this.getTransition()), t));\n  }\n  /**\n   * Sets up the location change listener and performs the initial navigation.\n   * @return {?}\n   */\n\n\n  initialNavigation() {\n    this.setUpLocationChangeListener();\n\n    if (this.navigationId === 0) {\n      this.navigateByUrl(this.location.path(true), {\n        replaceUrl: true\n      });\n    }\n  }\n  /**\n   * Sets up the location change listener.\n   * @return {?}\n   */\n\n\n  setUpLocationChangeListener() {\n    // Don't need to use Zone.wrap any more, because zone.js\n    // already patch onPopState, so location change callback will\n    // run into ngZone\n    if (!this.locationSubscription) {\n      this.locationSubscription =\n      /** @type {?} */\n      this.location.subscribe(\n      /**\n      * @param {?} change\n      * @return {?}\n      */\n      change => {\n        /** @type {?} */\n        let rawUrlTree = this.parseUrl(change['url']);\n        /** @type {?} */\n\n        const source = change['type'] === 'popstate' ? 'popstate' : 'hashchange'; // Navigations coming from Angular router have a navigationId state property. When this\n        // exists, restore the state.\n\n        /** @type {?} */\n\n        const state = change.state && change.state.navigationId ? change.state : null;\n        setTimeout(\n        /**\n        * @return {?}\n        */\n        () => {\n          this.scheduleNavigation(rawUrlTree, source, state, {\n            replaceUrl: true\n          });\n        }, 0);\n      });\n    }\n  }\n  /**\n   * The current URL.\n   * @return {?}\n   */\n\n\n  get url() {\n    return this.serializeUrl(this.currentUrlTree);\n  }\n  /**\n   * The current Navigation object if one exists\n   * @return {?}\n   */\n\n\n  getCurrentNavigation() {\n    return this.currentNavigation;\n  }\n  /**\n   * \\@internal\n   * @param {?} event\n   * @return {?}\n   */\n\n\n  triggerEvent(event) {\n    /** @type {?} */\n    this.events.next(event);\n  }\n  /**\n   * Resets the configuration used for navigation and generating links.\n   *\n   * \\@usageNotes\n   *\n   * ```\n   * router.resetConfig([\n   *  { path: 'team/:id', component: TeamCmp, children: [\n   *    { path: 'simple', component: SimpleCmp },\n   *    { path: 'user/:name', component: UserCmp }\n   *  ]}\n   * ]);\n   * ```\n   * @param {?} config The route array for the new configuration.\n   *\n   * @return {?}\n   */\n\n\n  resetConfig(config) {\n    validateConfig(config);\n    this.config = config.map(standardizeConfig);\n    this.navigated = false;\n    this.lastSuccessfulId = -1;\n  }\n  /**\n   * \\@docsNotRequired\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    this.dispose();\n  }\n  /**\n   * Disposes of the router.\n   * @return {?}\n   */\n\n\n  dispose() {\n    if (this.locationSubscription) {\n      this.locationSubscription.unsubscribe();\n      this.locationSubscription =\n      /** @type {?} */\n      null;\n    }\n  }\n  /**\n   * Applies an array of commands to the current URL tree and creates a new URL tree.\n   *\n   * When given an activated route, applies the given commands starting from the route.\n   * Otherwise, applies the given command starting from the root.\n   *\n   * \\@usageNotes\n   *\n   * ```\n   * // create /team/33/user/11\n   * router.createUrlTree(['/team', 33, 'user', 11]);\n   *\n   * // create /team/33;expand=true/user/11\n   * router.createUrlTree(['/team', 33, {expand: true}, 'user', 11]);\n   *\n   * // you can collapse static segments like this (this works only with the first passed-in value):\n   * router.createUrlTree(['/team/33/user', userId]);\n   *\n   * // If the first segment can contain slashes, and you do not want the router to split it,\n   * // you can do the following:\n   * router.createUrlTree([{segmentPath: '/one/two'}]);\n   *\n   * // create /team/33/(user/11//right:chat)\n   * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: 'chat'}}]);\n   *\n   * // remove the right secondary node\n   * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: null}}]);\n   *\n   * // assuming the current url is `/team/33/user/11` and the route points to `user/11`\n   *\n   * // navigate to /team/33/user/11/details\n   * router.createUrlTree(['details'], {relativeTo: route});\n   *\n   * // navigate to /team/33/user/22\n   * router.createUrlTree(['../22'], {relativeTo: route});\n   *\n   * // navigate to /team/44/user/22\n   * router.createUrlTree(['../../team/44/user/22'], {relativeTo: route});\n   * ```\n   * @param {?} commands An array of commands to apply.\n   * @param {?=} navigationExtras Options that control the navigation strategy. This function\n   * only utilizes properties in `NavigationExtras` that would change the provided URL.\n   * @return {?} The new URL tree.\n   *\n   */\n\n\n  createUrlTree(commands, navigationExtras = {}) {\n    const {\n      relativeTo,\n      queryParams,\n      fragment,\n      preserveQueryParams,\n      queryParamsHandling,\n      preserveFragment\n    } = navigationExtras;\n\n    if (isDevMode() && preserveQueryParams &&\n    /** @type {?} */\n    console &&\n    /** @type {?} */\n    console.warn) {\n      console.warn('preserveQueryParams is deprecated, use queryParamsHandling instead.');\n    }\n    /** @type {?} */\n\n\n    const a = relativeTo || this.routerState.root;\n    /** @type {?} */\n\n    const f = preserveFragment ? this.currentUrlTree.fragment : fragment;\n    /** @type {?} */\n\n    let q = null;\n\n    if (queryParamsHandling) {\n      switch (queryParamsHandling) {\n        case 'merge':\n          q = Object.assign(Object.assign({}, this.currentUrlTree.queryParams), queryParams);\n          break;\n\n        case 'preserve':\n          q = this.currentUrlTree.queryParams;\n          break;\n\n        default:\n          q = queryParams || null;\n      }\n    } else {\n      q = preserveQueryParams ? this.currentUrlTree.queryParams : queryParams || null;\n    }\n\n    if (q !== null) {\n      q = this.removeEmptyProps(q);\n    }\n\n    return createUrlTree(a, this.currentUrlTree, commands,\n    /** @type {?} */\n    q,\n    /** @type {?} */\n    f);\n  }\n  /**\n   * Navigate based on the provided URL, which must be absolute.\n   *\n   * \\@usageNotes\n   *\n   * ```\n   * router.navigateByUrl(\"/team/33/user/11\");\n   *\n   * // Navigate without updating the URL\n   * router.navigateByUrl(\"/team/33/user/11\", { skipLocationChange: true });\n   * ```\n   *\n   * @param {?} url An absolute URL. The function does not apply any delta to the current URL.\n   * @param {?=} extras An object containing properties that modify the navigation strategy.\n   * The function ignores any properties in the `NavigationExtras` that would change the\n   * provided URL.\n   *\n   * @return {?} A Promise that resolves to 'true' when navigation succeeds,\n   * to 'false' when navigation fails, or is rejected on error.\n   *\n   */\n\n\n  navigateByUrl(url, extras = {\n    skipLocationChange: false\n  }) {\n    if (isDevMode() && this.isNgZoneEnabled && !NgZone.isInAngularZone()) {\n      this.console.warn(`Navigation triggered outside Angular zone, did you forget to call 'ngZone.run()'?`);\n    }\n    /** @type {?} */\n\n\n    const urlTree = isUrlTree(url) ? url : this.parseUrl(url);\n    /** @type {?} */\n\n    const mergedTree = this.urlHandlingStrategy.merge(urlTree, this.rawUrlTree);\n    return this.scheduleNavigation(mergedTree, 'imperative', null, extras);\n  }\n  /**\n   * Navigate based on the provided array of commands and a starting point.\n   * If no starting route is provided, the navigation is absolute.\n   *\n   * Returns a promise that:\n   * - resolves to 'true' when navigation succeeds,\n   * - resolves to 'false' when navigation fails,\n   * - is rejected when an error happens.\n   *\n   * \\@usageNotes\n   *\n   * ```\n   * router.navigate(['team', 33, 'user', 11], {relativeTo: route});\n   *\n   * // Navigate without updating the URL\n   * router.navigate(['team', 33, 'user', 11], {relativeTo: route, skipLocationChange: true});\n   * ```\n   *\n   * The first parameter of `navigate()` is a delta to be applied to the current URL\n   * or the one provided in the `relativeTo` property of the second parameter (the\n   * `NavigationExtras`).\n   *\n   * In order to affect this browser's `history.state` entry, the `state`\n   * parameter can be passed. This must be an object because the router\n   * will add the `navigationId` property to this object before creating\n   * the new history item.\n   * @param {?} commands\n   * @param {?=} extras\n   * @return {?}\n   */\n\n\n  navigate(commands, extras = {\n    skipLocationChange: false\n  }) {\n    validateCommands(commands);\n    return this.navigateByUrl(this.createUrlTree(commands, extras), extras);\n  }\n  /**\n   * Serializes a `UrlTree` into a string\n   * @param {?} url\n   * @return {?}\n   */\n\n\n  serializeUrl(url) {\n    return this.urlSerializer.serialize(url);\n  }\n  /**\n   * Parses a string into a `UrlTree`\n   * @param {?} url\n   * @return {?}\n   */\n\n\n  parseUrl(url) {\n    /** @type {?} */\n    let urlTree;\n\n    try {\n      urlTree = this.urlSerializer.parse(url);\n    } catch (e) {\n      urlTree = this.malformedUriErrorHandler(e, this.urlSerializer, url);\n    }\n\n    return urlTree;\n  }\n  /**\n   * Returns whether the url is activated\n   * @param {?} url\n   * @param {?} exact\n   * @return {?}\n   */\n\n\n  isActive(url, exact) {\n    if (isUrlTree(url)) {\n      return containsTree(this.currentUrlTree, url, exact);\n    }\n    /** @type {?} */\n\n\n    const urlTree = this.parseUrl(url);\n    return containsTree(this.currentUrlTree, urlTree, exact);\n  }\n  /**\n   * @private\n   * @param {?} params\n   * @return {?}\n   */\n\n\n  removeEmptyProps(params) {\n    return Object.keys(params).reduce(\n    /**\n    * @param {?} result\n    * @param {?} key\n    * @return {?}\n    */\n    (result, key) => {\n      /** @type {?} */\n      const value = params[key];\n\n      if (value !== null && value !== undefined) {\n        result[key] = value;\n      }\n\n      return result;\n    }, {});\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n\n\n  processNavigations() {\n    this.navigations.subscribe(\n    /**\n    * @param {?} t\n    * @return {?}\n    */\n    t => {\n      this.navigated = true;\n      this.lastSuccessfulId = t.id;\n\n      /** @type {?} */\n      this.events.next(new NavigationEnd(t.id, this.serializeUrl(t.extractedUrl), this.serializeUrl(this.currentUrlTree)));\n      this.lastSuccessfulNavigation = this.currentNavigation;\n      this.currentNavigation = null;\n      t.resolve(true);\n    },\n    /**\n    * @param {?} e\n    * @return {?}\n    */\n    e => {\n      this.console.warn(`Unhandled Navigation Error: `);\n    });\n  }\n  /**\n   * @private\n   * @param {?} rawUrl\n   * @param {?} source\n   * @param {?} restoredState\n   * @param {?} extras\n   * @param {?=} priorPromise\n   * @return {?}\n   */\n\n\n  scheduleNavigation(rawUrl, source, restoredState, extras, priorPromise) {\n    /** @type {?} */\n    const lastNavigation = this.getTransition(); // If the user triggers a navigation imperatively (e.g., by using navigateByUrl),\n    // and that navigation results in 'replaceState' that leads to the same URL,\n    // we should skip those.\n\n    if (lastNavigation && source !== 'imperative' && lastNavigation.source === 'imperative' && lastNavigation.rawUrl.toString() === rawUrl.toString()) {\n      return Promise.resolve(true); // return value is not used\n    } // Because of a bug in IE and Edge, the location class fires two events (popstate and\n    // hashchange) every single time. The second one should be ignored. Otherwise, the URL will\n    // flicker. Handles the case when a popstate was emitted first.\n\n\n    if (lastNavigation && source == 'hashchange' && lastNavigation.source === 'popstate' && lastNavigation.rawUrl.toString() === rawUrl.toString()) {\n      return Promise.resolve(true); // return value is not used\n    } // Because of a bug in IE and Edge, the location class fires two events (popstate and\n    // hashchange) every single time. The second one should be ignored. Otherwise, the URL will\n    // flicker. Handles the case when a hashchange was emitted first.\n\n\n    if (lastNavigation && source == 'popstate' && lastNavigation.source === 'hashchange' && lastNavigation.rawUrl.toString() === rawUrl.toString()) {\n      return Promise.resolve(true); // return value is not used\n    }\n    /** @type {?} */\n\n\n    let resolve;\n    /** @type {?} */\n\n    let reject;\n    /** @type {?} */\n\n    let promise;\n\n    if (priorPromise) {\n      resolve = priorPromise.resolve;\n      reject = priorPromise.reject;\n      promise = priorPromise.promise;\n    } else {\n      promise = new Promise(\n      /**\n      * @param {?} res\n      * @param {?} rej\n      * @return {?}\n      */\n      (res, rej) => {\n        resolve = res;\n        reject = rej;\n      });\n    }\n    /** @type {?} */\n\n\n    const id = ++this.navigationId;\n    this.setTransition({\n      id,\n      source,\n      restoredState,\n      currentUrlTree: this.currentUrlTree,\n      currentRawUrl: this.rawUrlTree,\n      rawUrl,\n      extras,\n      resolve,\n      reject,\n      promise,\n      currentSnapshot: this.routerState.snapshot,\n      currentRouterState: this.routerState\n    }); // Make sure that the error is propagated even though `processNavigations` catch\n    // handler does not rethrow\n\n    return promise.catch(\n    /**\n    * @param {?} e\n    * @return {?}\n    */\n    e => {\n      return Promise.reject(e);\n    });\n  }\n  /**\n   * @private\n   * @param {?} url\n   * @param {?} replaceUrl\n   * @param {?} id\n   * @param {?=} state\n   * @return {?}\n   */\n\n\n  setBrowserUrl(url, replaceUrl, id, state) {\n    /** @type {?} */\n    const path = this.urlSerializer.serialize(url);\n    state = state || {};\n\n    if (this.location.isCurrentPathEqualTo(path) || replaceUrl) {\n      // TODO(jasonaden): Remove first `navigationId` and rely on `ng` namespace.\n      this.location.replaceState(path, '', Object.assign(Object.assign({}, state), {\n        navigationId: id\n      }));\n    } else {\n      this.location.go(path, '', Object.assign(Object.assign({}, state), {\n        navigationId: id\n      }));\n    }\n  }\n  /**\n   * @private\n   * @param {?} storedState\n   * @param {?} storedUrl\n   * @param {?} rawUrl\n   * @return {?}\n   */\n\n\n  resetStateAndUrl(storedState, storedUrl, rawUrl) {\n    /** @type {?} */\n    this.routerState = storedState;\n    this.currentUrlTree = storedUrl;\n    this.rawUrlTree = this.urlHandlingStrategy.merge(this.currentUrlTree, rawUrl);\n    this.resetUrlToCurrentUrlTree();\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n\n\n  resetUrlToCurrentUrlTree() {\n    this.location.replaceState(this.urlSerializer.serialize(this.rawUrlTree), '', {\n      navigationId: this.lastSuccessfulId\n    });\n  }\n\n}\n\nRouter.ɵfac = function Router_Factory(t) {\n  ɵngcc0.ɵɵinvalidFactory();\n};\n\nRouter.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: Router\n});\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  Router.prototype.currentUrlTree;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  Router.prototype.rawUrlTree;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  Router.prototype.browserUrlTree;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  Router.prototype.transitions;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  Router.prototype.navigations;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  Router.prototype.lastSuccessfulNavigation;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  Router.prototype.currentNavigation;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  Router.prototype.locationSubscription;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  Router.prototype.navigationId;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  Router.prototype.configLoader;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  Router.prototype.ngModule;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  Router.prototype.console;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  Router.prototype.isNgZoneEnabled;\n  /**\n   * An event stream for routing events in this NgModule.\n   * @type {?}\n   */\n\n  Router.prototype.events;\n  /**\n   * The current state of routing in this NgModule.\n   * @type {?}\n   */\n\n  Router.prototype.routerState;\n  /**\n   * A handler for navigation errors in this NgModule.\n   * @type {?}\n   */\n\n  Router.prototype.errorHandler;\n  /**\n   * A handler for errors thrown by `Router.parseUrl(url)`\n   * when `url` contains an invalid character.\n   * The most common case is a `%` sign\n   * that's not encoded and is not part of a percent encoded sequence.\n   * @type {?}\n   */\n\n  Router.prototype.malformedUriErrorHandler;\n  /**\n   * True if at least one navigation event has occurred,\n   * false otherwise.\n   * @type {?}\n   */\n\n  Router.prototype.navigated;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  Router.prototype.lastSuccessfulId;\n  /**\n   * Hooks that enable you to pause navigation,\n   * either before or after the preactivation phase.\n   * Used by `RouterModule`.\n   *\n   * \\@internal\n   * @type {?}\n   */\n\n  Router.prototype.hooks;\n  /**\n   * A strategy for extracting and merging URLs.\n   * Used for AngularJS to Angular migrations.\n   * @type {?}\n   */\n\n  Router.prototype.urlHandlingStrategy;\n  /**\n   * A strategy for re-using routes.\n   * @type {?}\n   */\n\n  Router.prototype.routeReuseStrategy;\n  /**\n   * How to handle a navigation request to the current URL. One of:\n   * - `'ignore'` :  The router ignores the request.\n   * - `'reload'` : The router reloads the URL. Use to implement a \"refresh\" feature.\n   * @type {?}\n   */\n\n  Router.prototype.onSameUrlNavigation;\n  /**\n   * How to merge parameters, data, and resolved data from parent to child\n   * routes. One of:\n   *\n   * - `'emptyOnly'` : Inherit parent parameters, data, and resolved data\n   * for path-less or component-less routes.\n   * - `'always'` : Inherit parent parameters, data, and resolved data\n   * for all child routes.\n   * @type {?}\n   */\n\n  Router.prototype.paramsInheritanceStrategy;\n  /**\n   * Determines when the router updates the browser URL.\n   * By default (`\"deferred\"`), updates the browser URL after navigation has finished.\n   * Set to `'eager'` to update the browser URL at the beginning of navigation.\n   * You can choose to update early so that, if navigation fails,\n   * you can show an error message with the URL that failed.\n   * @type {?}\n   */\n\n  Router.prototype.urlUpdateStrategy;\n  /**\n   * Enables a bug fix that corrects relative link resolution in components with empty paths.\n   * @see `RouterModule`\n   * @type {?}\n   */\n\n  Router.prototype.relativeLinkResolution;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  Router.prototype.rootComponentType;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  Router.prototype.urlSerializer;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  Router.prototype.rootContexts;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  Router.prototype.location;\n  /** @type {?} */\n\n  Router.prototype.config;\n}\n/**\n * @param {?} commands\n * @return {?}\n */\n\n\nfunction validateCommands(commands) {\n  for (let i = 0; i < commands.length; i++) {\n    /** @type {?} */\n    const cmd = commands[i];\n\n    if (cmd == null) {\n      throw new Error(`The requested path contains ${cmd} segment at index ${i}`);\n    }\n  }\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/router/src/directives/router_link.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * \\@description\n *\n * Lets you link to specific routes in your app.\n *\n * Consider the following route configuration:\n * `[{ path: 'user/:name', component: UserCmp }]`.\n * When linking to this `user/:name` route, you use the `RouterLink` directive.\n *\n * If the link is static, you can use the directive as follows:\n * `<a routerLink=\"/user/bob\">link to user component</a>`\n *\n * If you use dynamic values to generate the link, you can pass an array of path\n * segments, followed by the params for each segment.\n *\n * For instance `['/team', teamId, 'user', userName, {details: true}]`\n * means that we want to generate a link to `/team/11/user/bob;details=true`.\n *\n * Multiple static segments can be merged into one\n * (e.g., `['/team/11/user', userName, {details: true}]`).\n *\n * The first segment name can be prepended with `/`, `./`, or `../`:\n * * If the first segment begins with `/`, the router will look up the route from the root of the\n *   app.\n * * If the first segment begins with `./`, or doesn't begin with a slash, the router will\n *   instead look in the children of the current activated route.\n * * And if the first segment begins with `../`, the router will go up one level.\n *\n * You can set query params and fragment as follows:\n *\n * ```\n * <a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" fragment=\"education\">\n *   link to user component\n * </a>\n * ```\n * RouterLink will use these to generate this link: `/user/bob#education?debug=true`.\n *\n * (Deprecated in v4.0.0 use `queryParamsHandling` instead) You can also tell the\n * directive to preserve the current query params and fragment:\n *\n * ```\n * <a [routerLink]=\"['/user/bob']\" preserveQueryParams preserveFragment>\n *   link to user component\n * </a>\n * ```\n *\n * You can tell the directive how to handle queryParams. Available options are:\n *  - `'merge'`: merge the queryParams into the current queryParams\n *  - `'preserve'`: preserve the current queryParams\n *  - default/`''`: use the queryParams only\n *\n * Same options for {\\@link NavigationExtras#queryParamsHandling\n * NavigationExtras#queryParamsHandling}.\n *\n * ```\n * <a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" queryParamsHandling=\"merge\">\n *   link to user component\n * </a>\n * ```\n *\n * You can provide a `state` value to be persisted to the browser's History.state\n * property (See https://developer.mozilla.org/en-US/docs/Web/API/History#Properties). It's\n * used as follows:\n *\n * ```\n * <a [routerLink]=\"['/user/bob']\" [state]=\"{tracingId: 123}\">\n *   link to user component\n * </a>\n * ```\n *\n * And later the value can be read from the router through `router.getCurrentNavigation`.\n * For example, to capture the `tracingId` above during the `NavigationStart` event:\n *\n * ```\n * // Get NavigationStart events\n * router.events.pipe(filter(e => e instanceof NavigationStart)).subscribe(e => {\n *   const navigation = router.getCurrentNavigation();\n *   tracingService.trace({id: navigation.extras.state.tracingId});\n * });\n * ```\n *\n * The router link directive always treats the provided input as a delta to the current url.\n *\n * For instance, if the current url is `/user/(box//aux:team)`.\n *\n * Then the following link `<a [routerLink]=\"['/user/jim']\">Jim</a>` will generate the link\n * `/user/(jim//aux:team)`.\n *\n * See {\\@link Router#createUrlTree createUrlTree} for more information.\n *\n * \\@ngModule RouterModule\n *\n * \\@publicApi\n */\n\n\nclass RouterLink {\n  /**\n   * @param {?} router\n   * @param {?} route\n   * @param {?} tabIndex\n   * @param {?} renderer\n   * @param {?} el\n   */\n  constructor(router, route, tabIndex, renderer, el) {\n    this.router = router;\n    this.route = route;\n    this.commands = [];\n\n    if (tabIndex == null) {\n      renderer.setAttribute(el.nativeElement, 'tabindex', '0');\n    }\n  }\n  /**\n   * @param {?} commands\n   * @return {?}\n   */\n\n\n  set routerLink(commands) {\n    if (commands != null) {\n      this.commands = Array.isArray(commands) ? commands : [commands];\n    } else {\n      this.commands = [];\n    }\n  }\n  /**\n   * @deprecated 4.0.0 use `queryParamsHandling` instead.\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set preserveQueryParams(value) {\n    if (isDevMode() &&\n    /** @type {?} */\n    console &&\n    /** @type {?} */\n    console.warn) {\n      console.warn('preserveQueryParams is deprecated!, use queryParamsHandling instead.');\n    }\n\n    this.preserve = value;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  onClick() {\n    /** @type {?} */\n    const extras = {\n      skipLocationChange: attrBoolValue(this.skipLocationChange),\n      replaceUrl: attrBoolValue(this.replaceUrl),\n      state: this.state\n    };\n    this.router.navigateByUrl(this.urlTree, extras);\n    return true;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  get urlTree() {\n    return this.router.createUrlTree(this.commands, {\n      relativeTo: this.route,\n      queryParams: this.queryParams,\n      fragment: this.fragment,\n      preserveQueryParams: attrBoolValue(this.preserve),\n      queryParamsHandling: this.queryParamsHandling,\n      preserveFragment: attrBoolValue(this.preserveFragment)\n    });\n  }\n\n}\n\nRouterLink.ɵfac = function RouterLink_Factory(t) {\n  return new (t || RouterLink)(ɵngcc0.ɵɵdirectiveInject(Router), ɵngcc0.ɵɵdirectiveInject(ActivatedRoute), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nRouterLink.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: RouterLink,\n  selectors: [[\"\", \"routerLink\", \"\", 5, \"a\", 5, \"area\"]],\n  hostBindings: function RouterLink_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function RouterLink_click_HostBindingHandler() {\n        return ctx.onClick();\n      });\n    }\n  },\n  inputs: {\n    routerLink: \"routerLink\",\n    preserveQueryParams: \"preserveQueryParams\",\n    queryParams: \"queryParams\",\n    fragment: \"fragment\",\n    queryParamsHandling: \"queryParamsHandling\",\n    preserveFragment: \"preserveFragment\",\n    skipLocationChange: \"skipLocationChange\",\n    replaceUrl: \"replaceUrl\",\n    state: \"state\"\n  }\n});\n/** @nocollapse */\n\nRouterLink.ctorParameters = () => [{\n  type: Router\n}, {\n  type: ActivatedRoute\n}, {\n  type: String,\n  decorators: [{\n    type: Attribute,\n    args: ['tabindex']\n  }]\n}, {\n  type: Renderer2\n}, {\n  type: ElementRef\n}];\n\nRouterLink.propDecorators = {\n  queryParams: [{\n    type: Input\n  }],\n  fragment: [{\n    type: Input\n  }],\n  queryParamsHandling: [{\n    type: Input\n  }],\n  preserveFragment: [{\n    type: Input\n  }],\n  skipLocationChange: [{\n    type: Input\n  }],\n  replaceUrl: [{\n    type: Input\n  }],\n  state: [{\n    type: Input\n  }],\n  routerLink: [{\n    type: Input\n  }],\n  preserveQueryParams: [{\n    type: Input\n  }],\n  onClick: [{\n    type: HostListener,\n    args: ['click']\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(RouterLink, [{\n    type: Directive,\n    args: [{\n      selector: ':not(a):not(area)[routerLink]'\n    }]\n  }], function () {\n    return [{\n      type: Router\n    }, {\n      type: ActivatedRoute\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }, {\n      type: ɵngcc0.Renderer2\n    }, {\n      type: ɵngcc0.ElementRef\n    }];\n  }, {\n    routerLink: [{\n      type: Input\n    }],\n    preserveQueryParams: [{\n      type: Input\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click']\n    }],\n    queryParams: [{\n      type: Input\n    }],\n    fragment: [{\n      type: Input\n    }],\n    queryParamsHandling: [{\n      type: Input\n    }],\n    preserveFragment: [{\n      type: Input\n    }],\n    skipLocationChange: [{\n      type: Input\n    }],\n    replaceUrl: [{\n      type: Input\n    }],\n    state: [{\n      type: Input\n    }]\n  });\n})();\n\nif (false) {\n  /** @type {?} */\n  RouterLink.prototype.queryParams;\n  /** @type {?} */\n\n  RouterLink.prototype.fragment;\n  /** @type {?} */\n\n  RouterLink.prototype.queryParamsHandling;\n  /** @type {?} */\n\n  RouterLink.prototype.preserveFragment;\n  /** @type {?} */\n\n  RouterLink.prototype.skipLocationChange;\n  /** @type {?} */\n\n  RouterLink.prototype.replaceUrl;\n  /** @type {?} */\n\n  RouterLink.prototype.state;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  RouterLink.prototype.commands;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  RouterLink.prototype.preserve;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  RouterLink.prototype.router;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  RouterLink.prototype.route;\n}\n/**\n * \\@description\n *\n * Lets you link to specific routes in your app.\n *\n * See `RouterLink` for more information.\n *\n * \\@ngModule RouterModule\n *\n * \\@publicApi\n */\n\n\nclass RouterLinkWithHref {\n  /**\n   * @param {?} router\n   * @param {?} route\n   * @param {?} locationStrategy\n   */\n  constructor(router, route, locationStrategy) {\n    this.router = router;\n    this.route = route;\n    this.locationStrategy = locationStrategy;\n    this.commands = [];\n    this.subscription = router.events.subscribe(\n    /**\n    * @param {?} s\n    * @return {?}\n    */\n    s => {\n      if (s instanceof NavigationEnd) {\n        this.updateTargetUrlAndHref();\n      }\n    });\n  }\n  /**\n   * @param {?} commands\n   * @return {?}\n   */\n\n\n  set routerLink(commands) {\n    if (commands != null) {\n      this.commands = Array.isArray(commands) ? commands : [commands];\n    } else {\n      this.commands = [];\n    }\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set preserveQueryParams(value) {\n    if (isDevMode() &&\n    /** @type {?} */\n    console &&\n    /** @type {?} */\n    console.warn) {\n      console.warn('preserveQueryParams is deprecated, use queryParamsHandling instead.');\n    }\n\n    this.preserve = value;\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n\n\n  ngOnChanges(changes) {\n    this.updateTargetUrlAndHref();\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n  /**\n   * @param {?} button\n   * @param {?} ctrlKey\n   * @param {?} metaKey\n   * @param {?} shiftKey\n   * @return {?}\n   */\n\n\n  onClick(button, ctrlKey, metaKey, shiftKey) {\n    if (button !== 0 || ctrlKey || metaKey || shiftKey) {\n      return true;\n    }\n\n    if (typeof this.target === 'string' && this.target != '_self') {\n      return true;\n    }\n    /** @type {?} */\n\n\n    const extras = {\n      skipLocationChange: attrBoolValue(this.skipLocationChange),\n      replaceUrl: attrBoolValue(this.replaceUrl),\n      state: this.state\n    };\n    this.router.navigateByUrl(this.urlTree, extras);\n    return false;\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n\n\n  updateTargetUrlAndHref() {\n    this.href = this.locationStrategy.prepareExternalUrl(this.router.serializeUrl(this.urlTree));\n  }\n  /**\n   * @return {?}\n   */\n\n\n  get urlTree() {\n    return this.router.createUrlTree(this.commands, {\n      relativeTo: this.route,\n      queryParams: this.queryParams,\n      fragment: this.fragment,\n      preserveQueryParams: attrBoolValue(this.preserve),\n      queryParamsHandling: this.queryParamsHandling,\n      preserveFragment: attrBoolValue(this.preserveFragment)\n    });\n  }\n\n}\n\nRouterLinkWithHref.ɵfac = function RouterLinkWithHref_Factory(t) {\n  return new (t || RouterLinkWithHref)(ɵngcc0.ɵɵdirectiveInject(Router), ɵngcc0.ɵɵdirectiveInject(ActivatedRoute), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.LocationStrategy));\n};\n\nRouterLinkWithHref.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: RouterLinkWithHref,\n  selectors: [[\"a\", \"routerLink\", \"\"], [\"area\", \"routerLink\", \"\"]],\n  hostVars: 2,\n  hostBindings: function RouterLinkWithHref_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function RouterLinkWithHref_click_HostBindingHandler($event) {\n        return ctx.onClick($event.button, $event.ctrlKey, $event.metaKey, $event.shiftKey);\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"href\", ctx.href, ɵngcc0.ɵɵsanitizeUrl);\n      ɵngcc0.ɵɵattribute(\"target\", ctx.target);\n    }\n  },\n  inputs: {\n    routerLink: \"routerLink\",\n    preserveQueryParams: \"preserveQueryParams\",\n    target: \"target\",\n    queryParams: \"queryParams\",\n    fragment: \"fragment\",\n    queryParamsHandling: \"queryParamsHandling\",\n    preserveFragment: \"preserveFragment\",\n    skipLocationChange: \"skipLocationChange\",\n    replaceUrl: \"replaceUrl\",\n    state: \"state\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\n/** @nocollapse */\n\nRouterLinkWithHref.ctorParameters = () => [{\n  type: Router\n}, {\n  type: ActivatedRoute\n}, {\n  type: LocationStrategy\n}];\n\nRouterLinkWithHref.propDecorators = {\n  target: [{\n    type: HostBinding,\n    args: ['attr.target']\n  }, {\n    type: Input\n  }],\n  queryParams: [{\n    type: Input\n  }],\n  fragment: [{\n    type: Input\n  }],\n  queryParamsHandling: [{\n    type: Input\n  }],\n  preserveFragment: [{\n    type: Input\n  }],\n  skipLocationChange: [{\n    type: Input\n  }],\n  replaceUrl: [{\n    type: Input\n  }],\n  state: [{\n    type: Input\n  }],\n  href: [{\n    type: HostBinding\n  }],\n  routerLink: [{\n    type: Input\n  }],\n  preserveQueryParams: [{\n    type: Input\n  }],\n  onClick: [{\n    type: HostListener,\n    args: ['click', ['$event.button', '$event.ctrlKey', '$event.metaKey', '$event.shiftKey']]\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(RouterLinkWithHref, [{\n    type: Directive,\n    args: [{\n      selector: 'a[routerLink],area[routerLink]'\n    }]\n  }], function () {\n    return [{\n      type: Router\n    }, {\n      type: ActivatedRoute\n    }, {\n      type: ɵngcc1.LocationStrategy\n    }];\n  }, {\n    routerLink: [{\n      type: Input\n    }],\n    preserveQueryParams: [{\n      type: Input\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click', ['$event.button', '$event.ctrlKey', '$event.metaKey', '$event.shiftKey']]\n    }],\n    href: [{\n      type: HostBinding\n    }],\n    target: [{\n      type: HostBinding,\n      args: ['attr.target']\n    }, {\n      type: Input\n    }],\n    queryParams: [{\n      type: Input\n    }],\n    fragment: [{\n      type: Input\n    }],\n    queryParamsHandling: [{\n      type: Input\n    }],\n    preserveFragment: [{\n      type: Input\n    }],\n    skipLocationChange: [{\n      type: Input\n    }],\n    replaceUrl: [{\n      type: Input\n    }],\n    state: [{\n      type: Input\n    }]\n  });\n})();\n\nif (false) {\n  /** @type {?} */\n  RouterLinkWithHref.prototype.target;\n  /** @type {?} */\n\n  RouterLinkWithHref.prototype.queryParams;\n  /** @type {?} */\n\n  RouterLinkWithHref.prototype.fragment;\n  /** @type {?} */\n\n  RouterLinkWithHref.prototype.queryParamsHandling;\n  /** @type {?} */\n\n  RouterLinkWithHref.prototype.preserveFragment;\n  /** @type {?} */\n\n  RouterLinkWithHref.prototype.skipLocationChange;\n  /** @type {?} */\n\n  RouterLinkWithHref.prototype.replaceUrl;\n  /** @type {?} */\n\n  RouterLinkWithHref.prototype.state;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  RouterLinkWithHref.prototype.commands;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  RouterLinkWithHref.prototype.subscription;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  RouterLinkWithHref.prototype.preserve;\n  /** @type {?} */\n\n  RouterLinkWithHref.prototype.href;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  RouterLinkWithHref.prototype.router;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  RouterLinkWithHref.prototype.route;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  RouterLinkWithHref.prototype.locationStrategy;\n}\n/**\n * @param {?} s\n * @return {?}\n */\n\n\nfunction attrBoolValue(s) {\n  return s === '' || !!s;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/router/src/directives/router_link_active.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n *\n * \\@description\n *\n * Lets you add a CSS class to an element when the link's route becomes active.\n *\n * This directive lets you add a CSS class to an element when the link's route\n * becomes active.\n *\n * Consider the following example:\n *\n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\">Bob</a>\n * ```\n *\n * When the url is either '/user' or '/user/bob', the active-link class will\n * be added to the `a` tag. If the url changes, the class will be removed.\n *\n * You can set more than one class, as follows:\n *\n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive=\"class1 class2\">Bob</a>\n * <a routerLink=\"/user/bob\" [routerLinkActive]=\"['class1', 'class2']\">Bob</a>\n * ```\n *\n * You can configure RouterLinkActive by passing `exact: true`. This will add the classes\n * only when the url matches the link exactly.\n *\n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{exact:\n * true}\">Bob</a>\n * ```\n *\n * You can assign the RouterLinkActive instance to a template variable and directly check\n * the `isActive` status.\n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive #rla=\"routerLinkActive\">\n *   Bob {{ rla.isActive ? '(already open)' : ''}}\n * </a>\n * ```\n *\n * Finally, you can apply the RouterLinkActive directive to an ancestor of a RouterLink.\n *\n * ```\n * <div routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{exact: true}\">\n *   <a routerLink=\"/user/jim\">Jim</a>\n *   <a routerLink=\"/user/bob\">Bob</a>\n * </div>\n * ```\n *\n * This will set the active-link class on the div tag if the url is either '/user/jim' or\n * '/user/bob'.\n *\n * \\@ngModule RouterModule\n *\n * \\@publicApi\n */\n\n\nclass RouterLinkActive {\n  /**\n   * @param {?} router\n   * @param {?} element\n   * @param {?} renderer\n   * @param {?=} link\n   * @param {?=} linkWithHref\n   */\n  constructor(router, element, renderer, link, linkWithHref) {\n    this.router = router;\n    this.element = element;\n    this.renderer = renderer;\n    this.link = link;\n    this.linkWithHref = linkWithHref;\n    this.classes = [];\n    this.isActive = false;\n    this.routerLinkActiveOptions = {\n      exact: false\n    };\n    this.subscription = router.events.subscribe(\n    /**\n    * @param {?} s\n    * @return {?}\n    */\n    s => {\n      if (s instanceof NavigationEnd) {\n        this.update();\n      }\n    });\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngAfterContentInit() {\n    this.links.changes.subscribe(\n    /**\n    * @param {?} _\n    * @return {?}\n    */\n    _ => this.update());\n    this.linksWithHrefs.changes.subscribe(\n    /**\n    * @param {?} _\n    * @return {?}\n    */\n    _ => this.update());\n    this.update();\n  }\n  /**\n   * @param {?} data\n   * @return {?}\n   */\n\n\n  set routerLinkActive(data) {\n    /** @type {?} */\n    const classes = Array.isArray(data) ? data : data.split(' ');\n    this.classes = classes.filter(\n    /**\n    * @param {?} c\n    * @return {?}\n    */\n    c => !!c);\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n\n\n  update() {\n    if (!this.links || !this.linksWithHrefs || !this.router.navigated) return;\n    Promise.resolve().then(\n    /**\n    * @return {?}\n    */\n    () => {\n      /** @type {?} */\n      const hasActiveLinks = this.hasActiveLinks();\n\n      if (this.isActive !== hasActiveLinks) {\n        /** @type {?} */\n        this.isActive = hasActiveLinks;\n        this.classes.forEach(\n        /**\n        * @param {?} c\n        * @return {?}\n        */\n        c => {\n          if (hasActiveLinks) {\n            this.renderer.addClass(this.element.nativeElement, c);\n          } else {\n            this.renderer.removeClass(this.element.nativeElement, c);\n          }\n        });\n      }\n    });\n  }\n  /**\n   * @private\n   * @param {?} router\n   * @return {?}\n   */\n\n\n  isLinkActive(router) {\n    return (\n      /**\n      * @param {?} link\n      * @return {?}\n      */\n      link => router.isActive(link.urlTree, this.routerLinkActiveOptions.exact)\n    );\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n\n\n  hasActiveLinks() {\n    /** @type {?} */\n    const isActiveCheckFn = this.isLinkActive(this.router);\n    return this.link && isActiveCheckFn(this.link) || this.linkWithHref && isActiveCheckFn(this.linkWithHref) || this.links.some(isActiveCheckFn) || this.linksWithHrefs.some(isActiveCheckFn);\n  }\n\n}\n\nRouterLinkActive.ɵfac = function RouterLinkActive_Factory(t) {\n  return new (t || RouterLinkActive)(ɵngcc0.ɵɵdirectiveInject(Router), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(RouterLink, 8), ɵngcc0.ɵɵdirectiveInject(RouterLinkWithHref, 8));\n};\n\nRouterLinkActive.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: RouterLinkActive,\n  selectors: [[\"\", \"routerLinkActive\", \"\"]],\n  contentQueries: function RouterLinkActive_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, RouterLink, true);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, RouterLinkWithHref, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.links = _t);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.linksWithHrefs = _t);\n    }\n  },\n  inputs: {\n    routerLinkActiveOptions: \"routerLinkActiveOptions\",\n    routerLinkActive: \"routerLinkActive\"\n  },\n  exportAs: [\"routerLinkActive\"],\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\n/** @nocollapse */\n\nRouterLinkActive.ctorParameters = () => [{\n  type: Router\n}, {\n  type: ElementRef\n}, {\n  type: Renderer2\n}, {\n  type: RouterLink,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: RouterLinkWithHref,\n  decorators: [{\n    type: Optional\n  }]\n}];\n\nRouterLinkActive.propDecorators = {\n  links: [{\n    type: ContentChildren,\n    args: [RouterLink, {\n      descendants: true\n    }]\n  }],\n  linksWithHrefs: [{\n    type: ContentChildren,\n    args: [RouterLinkWithHref, {\n      descendants: true\n    }]\n  }],\n  routerLinkActiveOptions: [{\n    type: Input\n  }],\n  routerLinkActive: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(RouterLinkActive, [{\n    type: Directive,\n    args: [{\n      selector: '[routerLinkActive]',\n      exportAs: 'routerLinkActive'\n    }]\n  }], function () {\n    return [{\n      type: Router\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.Renderer2\n    }, {\n      type: RouterLink,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: RouterLinkWithHref,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    routerLinkActiveOptions: [{\n      type: Input\n    }],\n    routerLinkActive: [{\n      type: Input\n    }],\n    links: [{\n      type: ContentChildren,\n      args: [RouterLink, {\n        descendants: true\n      }]\n    }],\n    linksWithHrefs: [{\n      type: ContentChildren,\n      args: [RouterLinkWithHref, {\n        descendants: true\n      }]\n    }]\n  });\n})();\n\nif (false) {\n  /** @type {?} */\n  RouterLinkActive.prototype.links;\n  /** @type {?} */\n\n  RouterLinkActive.prototype.linksWithHrefs;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  RouterLinkActive.prototype.classes;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  RouterLinkActive.prototype.subscription;\n  /** @type {?} */\n\n  RouterLinkActive.prototype.isActive;\n  /** @type {?} */\n\n  RouterLinkActive.prototype.routerLinkActiveOptions;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  RouterLinkActive.prototype.router;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  RouterLinkActive.prototype.element;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  RouterLinkActive.prototype.renderer;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  RouterLinkActive.prototype.link;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  RouterLinkActive.prototype.linkWithHref;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/router/src/router_outlet_context.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Store contextual information about a `RouterOutlet`\n *\n * \\@publicApi\n */\n\n\nclass OutletContext {\n  constructor() {\n    this.outlet = null;\n    this.route = null;\n    this.resolver = null;\n    this.children = new ChildrenOutletContexts();\n    this.attachRef = null;\n  }\n\n}\n\nif (false) {\n  /** @type {?} */\n  OutletContext.prototype.outlet;\n  /** @type {?} */\n\n  OutletContext.prototype.route;\n  /** @type {?} */\n\n  OutletContext.prototype.resolver;\n  /** @type {?} */\n\n  OutletContext.prototype.children;\n  /** @type {?} */\n\n  OutletContext.prototype.attachRef;\n}\n/**\n * Store contextual information about the children (= nested) `RouterOutlet`\n *\n * \\@publicApi\n */\n\n\nclass ChildrenOutletContexts {\n  constructor() {\n    // contexts for child outlets, by name.\n    this.contexts = new Map();\n  }\n  /**\n   * Called when a `RouterOutlet` directive is instantiated\n   * @param {?} childName\n   * @param {?} outlet\n   * @return {?}\n   */\n\n\n  onChildOutletCreated(childName, outlet) {\n    /** @type {?} */\n    const context = this.getOrCreateContext(childName);\n    context.outlet = outlet;\n    this.contexts.set(childName, context);\n  }\n  /**\n   * Called when a `RouterOutlet` directive is destroyed.\n   * We need to keep the context as the outlet could be destroyed inside a NgIf and might be\n   * re-created later.\n   * @param {?} childName\n   * @return {?}\n   */\n\n\n  onChildOutletDestroyed(childName) {\n    /** @type {?} */\n    const context = this.getContext(childName);\n\n    if (context) {\n      context.outlet = null;\n    }\n  }\n  /**\n   * Called when the corresponding route is deactivated during navigation.\n   * Because the component get destroyed, all children outlet are destroyed.\n   * @return {?}\n   */\n\n\n  onOutletDeactivated() {\n    /** @type {?} */\n    const contexts = this.contexts;\n    this.contexts = new Map();\n    return contexts;\n  }\n  /**\n   * @param {?} contexts\n   * @return {?}\n   */\n\n\n  onOutletReAttached(contexts) {\n    this.contexts = contexts;\n  }\n  /**\n   * @param {?} childName\n   * @return {?}\n   */\n\n\n  getOrCreateContext(childName) {\n    /** @type {?} */\n    let context = this.getContext(childName);\n\n    if (!context) {\n      context = new OutletContext();\n      this.contexts.set(childName, context);\n    }\n\n    return context;\n  }\n  /**\n   * @param {?} childName\n   * @return {?}\n   */\n\n\n  getContext(childName) {\n    return this.contexts.get(childName) || null;\n  }\n\n}\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  ChildrenOutletContexts.prototype.contexts;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/router/src/directives/router_outlet.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * \\@description\n *\n * Acts as a placeholder that Angular dynamically fills based on the current router state.\n *\n * Each outlet can have a unique name, determined by the optional `name` attribute.\n * The name cannot be set or changed dynamically. If not set, default value is \"primary\".\n *\n * ```\n * <router-outlet></router-outlet>\n * <router-outlet name='left'></router-outlet>\n * <router-outlet name='right'></router-outlet>\n * ```\n *\n * A router outlet emits an activate event when a new component is instantiated,\n * and a deactivate event when a component is destroyed.\n *\n * ```\n * <router-outlet\n *   (activate)='onActivate($event)'\n *   (deactivate)='onDeactivate($event)'></router-outlet>\n * ```\n * \\@ngModule RouterModule\n *\n * \\@publicApi\n */\n\n\nclass RouterOutlet {\n  /**\n   * @param {?} parentContexts\n   * @param {?} location\n   * @param {?} resolver\n   * @param {?} name\n   * @param {?} changeDetector\n   */\n  constructor(parentContexts, location, resolver, name, changeDetector) {\n    this.parentContexts = parentContexts;\n    this.location = location;\n    this.resolver = resolver;\n    this.changeDetector = changeDetector;\n    this.activated = null;\n    this._activatedRoute = null;\n    this.activateEvents = new EventEmitter();\n    this.deactivateEvents = new EventEmitter();\n    this.name = name || PRIMARY_OUTLET;\n    parentContexts.onChildOutletCreated(this.name, this);\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    this.parentContexts.onChildOutletDestroyed(this.name);\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnInit() {\n    if (!this.activated) {\n      // If the outlet was not instantiated at the time the route got activated we need to populate\n      // the outlet when it is initialized (ie inside a NgIf)\n\n      /** @type {?} */\n      const context = this.parentContexts.getContext(this.name);\n\n      if (context && context.route) {\n        if (context.attachRef) {\n          // `attachRef` is populated when there is an existing component to mount\n          this.attach(context.attachRef, context.route);\n        } else {\n          // otherwise the component defined in the configuration is created\n          this.activateWith(context.route, context.resolver || null);\n        }\n      }\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  get isActivated() {\n    return !!this.activated;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  get component() {\n    if (!this.activated) throw new Error('Outlet is not activated');\n    return this.activated.instance;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  get activatedRoute() {\n    if (!this.activated) throw new Error('Outlet is not activated');\n    return (\n      /** @type {?} */\n      this._activatedRoute\n    );\n  }\n  /**\n   * @return {?}\n   */\n\n\n  get activatedRouteData() {\n    if (this._activatedRoute) {\n      return this._activatedRoute.snapshot.data;\n    }\n\n    return {};\n  }\n  /**\n   * Called when the `RouteReuseStrategy` instructs to detach the subtree\n   * @return {?}\n   */\n\n\n  detach() {\n    if (!this.activated) throw new Error('Outlet is not activated');\n    this.location.detach();\n    /** @type {?} */\n\n    const cmp = this.activated;\n    this.activated = null;\n    this._activatedRoute = null;\n    return cmp;\n  }\n  /**\n   * Called when the `RouteReuseStrategy` instructs to re-attach a previously detached subtree\n   * @param {?} ref\n   * @param {?} activatedRoute\n   * @return {?}\n   */\n\n\n  attach(ref, activatedRoute) {\n    this.activated = ref;\n    this._activatedRoute = activatedRoute;\n    this.location.insert(ref.hostView);\n  }\n  /**\n   * @return {?}\n   */\n\n\n  deactivate() {\n    if (this.activated) {\n      /** @type {?} */\n      const c = this.component;\n      this.activated.destroy();\n      this.activated = null;\n      this._activatedRoute = null;\n      this.deactivateEvents.emit(c);\n    }\n  }\n  /**\n   * @param {?} activatedRoute\n   * @param {?} resolver\n   * @return {?}\n   */\n\n\n  activateWith(activatedRoute, resolver) {\n    if (this.isActivated) {\n      throw new Error('Cannot activate an already activated outlet');\n    }\n\n    this._activatedRoute = activatedRoute;\n    /** @type {?} */\n\n    const snapshot = activatedRoute._futureSnapshot;\n    /** @type {?} */\n\n    const component =\n    /** @type {?} */\n\n    /** @type {?} */\n    snapshot.routeConfig.component;\n    resolver = resolver || this.resolver;\n    /** @type {?} */\n\n    const factory = resolver.resolveComponentFactory(component);\n    /** @type {?} */\n\n    const childContexts = this.parentContexts.getOrCreateContext(this.name).children;\n    /** @type {?} */\n\n    const injector = new OutletInjector(activatedRoute, childContexts, this.location.injector);\n    this.activated = this.location.createComponent(factory, this.location.length, injector); // Calling `markForCheck` to make sure we will run the change detection when the\n    // `RouterOutlet` is inside a `ChangeDetectionStrategy.OnPush` component.\n\n    this.changeDetector.markForCheck();\n    this.activateEvents.emit(this.activated.instance);\n  }\n\n}\n\nRouterOutlet.ɵfac = function RouterOutlet_Factory(t) {\n  return new (t || RouterOutlet)(ɵngcc0.ɵɵdirectiveInject(ChildrenOutletContexts), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵinjectAttribute('name'), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n};\n\nRouterOutlet.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: RouterOutlet,\n  selectors: [[\"router-outlet\"]],\n  outputs: {\n    activateEvents: \"activate\",\n    deactivateEvents: \"deactivate\"\n  },\n  exportAs: [\"outlet\"]\n});\n/** @nocollapse */\n\nRouterOutlet.ctorParameters = () => [{\n  type: ChildrenOutletContexts\n}, {\n  type: ViewContainerRef\n}, {\n  type: ComponentFactoryResolver\n}, {\n  type: String,\n  decorators: [{\n    type: Attribute,\n    args: ['name']\n  }]\n}, {\n  type: ChangeDetectorRef\n}];\n\nRouterOutlet.propDecorators = {\n  activateEvents: [{\n    type: Output,\n    args: ['activate']\n  }],\n  deactivateEvents: [{\n    type: Output,\n    args: ['deactivate']\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(RouterOutlet, [{\n    type: Directive,\n    args: [{\n      selector: 'router-outlet',\n      exportAs: 'outlet'\n    }]\n  }], function () {\n    return [{\n      type: ChildrenOutletContexts\n    }, {\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: ɵngcc0.ComponentFactoryResolver\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['name']\n      }]\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }];\n  }, {\n    activateEvents: [{\n      type: Output,\n      args: ['activate']\n    }],\n    deactivateEvents: [{\n      type: Output,\n      args: ['deactivate']\n    }]\n  });\n})();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  RouterOutlet.prototype.activated;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  RouterOutlet.prototype._activatedRoute;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  RouterOutlet.prototype.name;\n  /** @type {?} */\n\n  RouterOutlet.prototype.activateEvents;\n  /** @type {?} */\n\n  RouterOutlet.prototype.deactivateEvents;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  RouterOutlet.prototype.parentContexts;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  RouterOutlet.prototype.location;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  RouterOutlet.prototype.resolver;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  RouterOutlet.prototype.changeDetector;\n}\n\nclass OutletInjector {\n  /**\n   * @param {?} route\n   * @param {?} childContexts\n   * @param {?} parent\n   */\n  constructor(route, childContexts, parent) {\n    this.route = route;\n    this.childContexts = childContexts;\n    this.parent = parent;\n  }\n  /**\n   * @param {?} token\n   * @param {?=} notFoundValue\n   * @return {?}\n   */\n\n\n  get(token, notFoundValue) {\n    if (token === ActivatedRoute) {\n      return this.route;\n    }\n\n    if (token === ChildrenOutletContexts) {\n      return this.childContexts;\n    }\n\n    return this.parent.get(token, notFoundValue);\n  }\n\n}\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  OutletInjector.prototype.route;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  OutletInjector.prototype.childContexts;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  OutletInjector.prototype.parent;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/router/src/router_preloader.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * \\@description\n *\n * Provides a preloading strategy.\n *\n * \\@publicApi\n * @abstract\n */\n\n\nclass PreloadingStrategy {}\n\nif (false) {\n  /**\n   * @abstract\n   * @param {?} route\n   * @param {?} fn\n   * @return {?}\n   */\n  PreloadingStrategy.prototype.preload = function (route, fn) {};\n}\n/**\n * \\@description\n *\n * Provides a preloading strategy that preloads all modules as quickly as possible.\n *\n * ```\n * RouteModule.forRoot(ROUTES, {preloadingStrategy: PreloadAllModules})\n * ```\n *\n * \\@publicApi\n */\n\n\nclass PreloadAllModules {\n  /**\n   * @param {?} route\n   * @param {?} fn\n   * @return {?}\n   */\n  preload(route, fn) {\n    return fn().pipe(catchError(\n    /**\n    * @return {?}\n    */\n    () => of(null)));\n  }\n\n}\n/**\n * \\@description\n *\n * Provides a preloading strategy that does not preload any modules.\n *\n * This strategy is enabled by default.\n *\n * \\@publicApi\n */\n\n\nclass NoPreloading {\n  /**\n   * @param {?} route\n   * @param {?} fn\n   * @return {?}\n   */\n  preload(route, fn) {\n    return of(null);\n  }\n\n}\n/**\n * The preloader optimistically loads all router configurations to\n * make navigations into lazily-loaded sections of the application faster.\n *\n * The preloader runs in the background. When the router bootstraps, the preloader\n * starts listening to all navigation events. After every such event, the preloader\n * will check if any configurations can be loaded lazily.\n *\n * If a route is protected by `canLoad` guards, the preloaded will not load it.\n *\n * \\@publicApi\n */\n\n\nclass RouterPreloader {\n  /**\n   * @param {?} router\n   * @param {?} moduleLoader\n   * @param {?} compiler\n   * @param {?} injector\n   * @param {?} preloadingStrategy\n   */\n  constructor(router, moduleLoader, compiler, injector, preloadingStrategy) {\n    this.router = router;\n    this.injector = injector;\n    this.preloadingStrategy = preloadingStrategy;\n    /** @type {?} */\n\n    const onStartLoad =\n    /**\n    * @param {?} r\n    * @return {?}\n    */\n    r => router.triggerEvent(new RouteConfigLoadStart(r));\n    /** @type {?} */\n\n\n    const onEndLoad =\n    /**\n    * @param {?} r\n    * @return {?}\n    */\n    r => router.triggerEvent(new RouteConfigLoadEnd(r));\n\n    this.loader = new RouterConfigLoader(moduleLoader, compiler, onStartLoad, onEndLoad);\n  }\n  /**\n   * @return {?}\n   */\n\n\n  setUpPreloading() {\n    this.subscription = this.router.events.pipe(filter(\n    /**\n    * @param {?} e\n    * @return {?}\n    */\n    e => e instanceof NavigationEnd), concatMap(\n    /**\n    * @return {?}\n    */\n    () => this.preload())).subscribe(\n    /**\n    * @return {?}\n    */\n    () => {});\n  }\n  /**\n   * @return {?}\n   */\n\n\n  preload() {\n    /** @type {?} */\n    const ngModule = this.injector.get(NgModuleRef);\n    return this.processRoutes(ngModule, this.router.config);\n  } // TODO(jasonaden): This class relies on code external to the class to call setUpPreloading. If\n  // this hasn't been done, ngOnDestroy will fail as this.subscription will be undefined. This\n  // should be refactored.\n\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n  /**\n   * @private\n   * @param {?} ngModule\n   * @param {?} routes\n   * @return {?}\n   */\n\n\n  processRoutes(ngModule, routes) {\n    /** @type {?} */\n    const res = [];\n\n    for (const route of routes) {\n      // we already have the config loaded, just recurse\n      if (route.loadChildren && !route.canLoad && route._loadedConfig) {\n        /** @type {?} */\n        const childConfig = route._loadedConfig;\n        res.push(this.processRoutes(childConfig.module, childConfig.routes)); // no config loaded, fetch the config\n      } else if (route.loadChildren && !route.canLoad) {\n        res.push(this.preloadConfig(ngModule, route)); // recurse into children\n      } else if (route.children) {\n        res.push(this.processRoutes(ngModule, route.children));\n      }\n    }\n\n    return from(res).pipe(mergeAll(), map(\n    /**\n    * @param {?} _\n    * @return {?}\n    */\n    _ => void 0));\n  }\n  /**\n   * @private\n   * @param {?} ngModule\n   * @param {?} route\n   * @return {?}\n   */\n\n\n  preloadConfig(ngModule, route) {\n    return this.preloadingStrategy.preload(route,\n    /**\n    * @return {?}\n    */\n    () => {\n      /** @type {?} */\n      const loaded$ = this.loader.load(ngModule.injector, route);\n      return loaded$.pipe(mergeMap(\n      /**\n      * @param {?} config\n      * @return {?}\n      */\n      config => {\n        route._loadedConfig = config;\n        return this.processRoutes(config.module, config.routes);\n      }));\n    });\n  }\n\n}\n\nRouterPreloader.ɵfac = function RouterPreloader_Factory(t) {\n  return new (t || RouterPreloader)(ɵngcc0.ɵɵinject(Router), ɵngcc0.ɵɵinject(ɵngcc0.NgModuleFactoryLoader), ɵngcc0.ɵɵinject(ɵngcc0.Compiler), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(PreloadingStrategy));\n};\n\nRouterPreloader.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: RouterPreloader,\n  factory: RouterPreloader.ɵfac\n});\n/** @nocollapse */\n\nRouterPreloader.ctorParameters = () => [{\n  type: Router\n}, {\n  type: NgModuleFactoryLoader\n}, {\n  type: Compiler\n}, {\n  type: Injector\n}, {\n  type: PreloadingStrategy\n}];\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(RouterPreloader, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: Router\n    }, {\n      type: ɵngcc0.NgModuleFactoryLoader\n    }, {\n      type: ɵngcc0.Compiler\n    }, {\n      type: ɵngcc0.Injector\n    }, {\n      type: PreloadingStrategy\n    }];\n  }, null);\n})();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  RouterPreloader.prototype.loader;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  RouterPreloader.prototype.subscription;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  RouterPreloader.prototype.router;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  RouterPreloader.prototype.injector;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  RouterPreloader.prototype.preloadingStrategy;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/router/src/router_scroller.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nclass RouterScroller {\n  /**\n   * @param {?} router\n   * @param {?} viewportScroller\n   * @param {?=} options\n   */\n  constructor(router, viewportScroller, options = {}) {\n    this.router = router;\n    this.viewportScroller = viewportScroller;\n    this.options = options;\n    this.lastId = 0;\n    this.lastSource = 'imperative';\n    this.restoredId = 0;\n    this.store = {}; // Default both options to 'disabled'\n\n    options.scrollPositionRestoration = options.scrollPositionRestoration || 'disabled';\n    options.anchorScrolling = options.anchorScrolling || 'disabled';\n  }\n  /**\n   * @return {?}\n   */\n\n\n  init() {\n    // we want to disable the automatic scrolling because having two places\n    // responsible for scrolling results race conditions, especially given\n    // that browser don't implement this behavior consistently\n    if (this.options.scrollPositionRestoration !== 'disabled') {\n      this.viewportScroller.setHistoryScrollRestoration('manual');\n    }\n\n    this.routerEventsSubscription = this.createScrollEvents();\n    this.scrollEventsSubscription = this.consumeScrollEvents();\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n\n\n  createScrollEvents() {\n    return this.router.events.subscribe(\n    /**\n    * @param {?} e\n    * @return {?}\n    */\n    e => {\n      if (e instanceof NavigationStart) {\n        // store the scroll position of the current stable navigations.\n        this.store[this.lastId] = this.viewportScroller.getScrollPosition();\n        this.lastSource = e.navigationTrigger;\n        this.restoredId = e.restoredState ? e.restoredState.navigationId : 0;\n      } else if (e instanceof NavigationEnd) {\n        this.lastId = e.id;\n        this.scheduleScrollEvent(e, this.router.parseUrl(e.urlAfterRedirects).fragment);\n      }\n    });\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n\n\n  consumeScrollEvents() {\n    return this.router.events.subscribe(\n    /**\n    * @param {?} e\n    * @return {?}\n    */\n    e => {\n      if (!(e instanceof Scroll)) return; // a popstate event. The pop state event will always ignore anchor scrolling.\n\n      if (e.position) {\n        if (this.options.scrollPositionRestoration === 'top') {\n          this.viewportScroller.scrollToPosition([0, 0]);\n        } else if (this.options.scrollPositionRestoration === 'enabled') {\n          this.viewportScroller.scrollToPosition(e.position);\n        } // imperative navigation \"forward\"\n\n      } else {\n        if (e.anchor && this.options.anchorScrolling === 'enabled') {\n          this.viewportScroller.scrollToAnchor(e.anchor);\n        } else if (this.options.scrollPositionRestoration !== 'disabled') {\n          this.viewportScroller.scrollToPosition([0, 0]);\n        }\n      }\n    });\n  }\n  /**\n   * @private\n   * @param {?} routerEvent\n   * @param {?} anchor\n   * @return {?}\n   */\n\n\n  scheduleScrollEvent(routerEvent, anchor) {\n    this.router.triggerEvent(new Scroll(routerEvent, this.lastSource === 'popstate' ? this.store[this.restoredId] : null, anchor));\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    if (this.routerEventsSubscription) {\n      this.routerEventsSubscription.unsubscribe();\n    }\n\n    if (this.scrollEventsSubscription) {\n      this.scrollEventsSubscription.unsubscribe();\n    }\n  }\n\n}\n\nRouterScroller.ɵfac = function RouterScroller_Factory(t) {\n  ɵngcc0.ɵɵinvalidFactory();\n};\n\nRouterScroller.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: RouterScroller\n});\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  RouterScroller.prototype.routerEventsSubscription;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  RouterScroller.prototype.scrollEventsSubscription;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  RouterScroller.prototype.lastId;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  RouterScroller.prototype.lastSource;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  RouterScroller.prototype.restoredId;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  RouterScroller.prototype.store;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  RouterScroller.prototype.router;\n  /**\n   * \\@docsNotRequired\n   * @type {?}\n   */\n\n  RouterScroller.prototype.viewportScroller;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  RouterScroller.prototype.options;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/router/src/router_module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * The directives defined in the `RouterModule`.\n * @type {?}\n */\n\n\nconst ROUTER_DIRECTIVES = [RouterOutlet, RouterLink, RouterLinkWithHref, RouterLinkActive, ɵEmptyOutletComponent];\n/**\n * A [DI token](guide/glossary/#di-token) for the router service.\n *\n * \\@publicApi\n * @type {?}\n */\n\nconst ROUTER_CONFIGURATION = new InjectionToken('ROUTER_CONFIGURATION');\n/**\n * \\@docsNotRequired\n * @type {?}\n */\n\nconst ROUTER_FORROOT_GUARD = new InjectionToken('ROUTER_FORROOT_GUARD');\nconst ɵ0 = {\n  enableTracing: false\n};\n/** @type {?} */\n\nconst ROUTER_PROVIDERS = [Location, {\n  provide: UrlSerializer,\n  useClass: DefaultUrlSerializer\n}, {\n  provide: Router,\n  useFactory: setupRouter,\n  deps: [UrlSerializer, ChildrenOutletContexts, Location, Injector, NgModuleFactoryLoader, Compiler, ROUTES, ROUTER_CONFIGURATION, [UrlHandlingStrategy, new Optional()], [RouteReuseStrategy, new Optional()]]\n}, ChildrenOutletContexts, {\n  provide: ActivatedRoute,\n  useFactory: rootRoute,\n  deps: [Router]\n}, {\n  provide: NgModuleFactoryLoader,\n  useClass: SystemJsNgModuleLoader\n}, RouterPreloader, NoPreloading, PreloadAllModules, {\n  provide: ROUTER_CONFIGURATION,\n  useValue: ɵ0\n}];\n/**\n * @return {?}\n */\n\nfunction routerNgProbeToken() {\n  return new NgProbeToken('Router', Router);\n}\n/**\n * \\@usageNotes\n *\n * RouterModule can be imported multiple times: once per lazily-loaded bundle.\n * Since the router deals with a global shared resource--location, we cannot have\n * more than one router service active.\n *\n * That is why there are two ways to create the module: `RouterModule.forRoot` and\n * `RouterModule.forChild`.\n *\n * * `forRoot` creates a module that contains all the directives, the given routes, and the router\n *   service itself.\n * * `forChild` creates a module that contains all the directives and the given routes, but does not\n *   include the router service.\n *\n * When registered at the root, the module should be used as follows\n *\n * ```\n * \\@NgModule({\n *   imports: [RouterModule.forRoot(ROUTES)]\n * })\n * class MyNgModule {}\n * ```\n *\n * For submodules and lazy loaded submodules the module should be used as follows:\n *\n * ```\n * \\@NgModule({\n *   imports: [RouterModule.forChild(ROUTES)]\n * })\n * class MyNgModule {}\n * ```\n *\n * \\@description\n *\n * Adds router directives and providers.\n *\n * Managing state transitions is one of the hardest parts of building applications. This is\n * especially true on the web, where you also need to ensure that the state is reflected in the URL.\n * In addition, we often want to split applications into multiple bundles and load them on demand.\n * Doing this transparently is not trivial.\n *\n * The Angular router service solves these problems. Using the router, you can declaratively specify\n * application states, manage state transitions while taking care of the URL, and load bundles on\n * demand.\n *\n * @see [Routing and Navigation](guide/router.html) for an\n * overview of how the router service should be used.\n *\n * \\@publicApi\n */\n\n\nclass RouterModule {\n  // Note: We are injecting the Router so it gets created eagerly...\n\n  /**\n   * @param {?} guard\n   * @param {?} router\n   */\n  constructor(guard, router) {}\n  /**\n   * Creates and configures a module with all the router providers and directives.\n   * Optionally sets up an application listener to perform an initial navigation.\n   *\n   * @param {?} routes An array of `Route` objects that define the navigation paths for the application.\n   * @param {?=} config An `ExtraOptions` configuration object that controls how navigation is performed.\n   * @return {?} The new router module.\n   */\n\n\n  static forRoot(routes, config) {\n    return {\n      ngModule: RouterModule,\n      providers: [ROUTER_PROVIDERS, provideRoutes(routes), {\n        provide: ROUTER_FORROOT_GUARD,\n        useFactory: provideForRootGuard,\n        deps: [[Router, new Optional(), new SkipSelf()]]\n      }, {\n        provide: ROUTER_CONFIGURATION,\n        useValue: config ? config : {}\n      }, {\n        provide: LocationStrategy,\n        useFactory: provideLocationStrategy,\n        deps: [PlatformLocation, [new Inject(APP_BASE_HREF), new Optional()], ROUTER_CONFIGURATION]\n      }, {\n        provide: RouterScroller,\n        useFactory: createRouterScroller,\n        deps: [Router, ViewportScroller, ROUTER_CONFIGURATION]\n      }, {\n        provide: PreloadingStrategy,\n        useExisting: config && config.preloadingStrategy ? config.preloadingStrategy : NoPreloading\n      }, {\n        provide: NgProbeToken,\n        multi: true,\n        useFactory: routerNgProbeToken\n      }, provideRouterInitializer()]\n    };\n  }\n  /**\n   * Creates a module with all the router directives and a provider registering routes.\n   * @param {?} routes\n   * @return {?}\n   */\n\n\n  static forChild(routes) {\n    return {\n      ngModule: RouterModule,\n      providers: [provideRoutes(routes)]\n    };\n  }\n\n}\n\nRouterModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: RouterModule\n});\nRouterModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function RouterModule_Factory(t) {\n    return new (t || RouterModule)(ɵngcc0.ɵɵinject(ROUTER_FORROOT_GUARD, 8), ɵngcc0.ɵɵinject(Router, 8));\n  }\n});\n/** @nocollapse */\n\nRouterModule.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [ROUTER_FORROOT_GUARD]\n  }]\n}, {\n  type: Router,\n  decorators: [{\n    type: Optional\n  }]\n}];\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(RouterModule, {\n    declarations: [RouterOutlet, RouterLink, RouterLinkWithHref, RouterLinkActive, ɵEmptyOutletComponent],\n    exports: [RouterOutlet, RouterLink, RouterLinkWithHref, RouterLinkActive, ɵEmptyOutletComponent]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(RouterModule, [{\n    type: NgModule,\n    args: [{\n      declarations: ROUTER_DIRECTIVES,\n      exports: ROUTER_DIRECTIVES,\n      entryComponents: [ɵEmptyOutletComponent]\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ROUTER_FORROOT_GUARD]\n      }]\n    }, {\n      type: Router,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/**\n * @param {?} router\n * @param {?} viewportScroller\n * @param {?} config\n * @return {?}\n */\n\n\nfunction createRouterScroller(router, viewportScroller, config) {\n  if (config.scrollOffset) {\n    viewportScroller.setOffset(config.scrollOffset);\n  }\n\n  return new RouterScroller(router, viewportScroller, config);\n}\n/**\n * @param {?} platformLocationStrategy\n * @param {?} baseHref\n * @param {?=} options\n * @return {?}\n */\n\n\nfunction provideLocationStrategy(platformLocationStrategy, baseHref, options = {}) {\n  return options.useHash ? new HashLocationStrategy(platformLocationStrategy, baseHref) : new PathLocationStrategy(platformLocationStrategy, baseHref);\n}\n/**\n * @param {?} router\n * @return {?}\n */\n\n\nfunction provideForRootGuard(router) {\n  if (router) {\n    throw new Error(`RouterModule.forRoot() called twice. Lazy loaded modules should use RouterModule.forChild() instead.`);\n  }\n\n  return 'guarded';\n}\n/**\n * Registers a [DI provider](guide/glossary#provider) for a set of routes.\n * \\@usageNotes\n *\n * ```\n * \\@NgModule({\n *   imports: [RouterModule.forChild(ROUTES)],\n *   providers: [provideRoutes(EXTRA_ROUTES)]\n * })\n * class MyNgModule {}\n * ```\n *\n * \\@publicApi\n * @param {?} routes The route configuration to provide.\n *\n * @return {?}\n */\n\n\nfunction provideRoutes(routes) {\n  return [{\n    provide: ANALYZE_FOR_ENTRY_COMPONENTS,\n    multi: true,\n    useValue: routes\n  }, {\n    provide: ROUTES,\n    multi: true,\n    useValue: routes\n  }];\n}\n/**\n * A set of configuration options for a router module, provided in the\n * `forRoot()` method.\n *\n * \\@publicApi\n * @record\n */\n\n\nfunction ExtraOptions() {}\n\nif (false) {\n  /**\n   * When true, log all internal navigation events to the console.\n   * Use for debugging.\n   * @type {?|undefined}\n   */\n  ExtraOptions.prototype.enableTracing;\n  /**\n   * When true, enable the location strategy that uses the URL fragment\n   * instead of the history API.\n   * @type {?|undefined}\n   */\n\n  ExtraOptions.prototype.useHash;\n  /**\n   * One of `enabled` or `disabled`.\n   * When set to `enabled`, the initial navigation starts before the root component is created.\n   * The bootstrap is blocked until the initial navigation is complete. This value is required for\n   * [server-side rendering](guide/universal) to work.\n   * When set to `disabled`, the initial navigation is not performed.\n   * The location listener is set up before the root component gets created.\n   * Use if there is a reason to have more control over when the router\n   * starts its initial navigation due to some complex initialization logic.\n   *\n   * Legacy values are deprecated since v4 and should not be used for new applications:\n   *\n   * * `legacy_enabled` - Default for compatibility.\n   * The initial navigation starts after the root component has been created,\n   * but the bootstrap is not blocked until the initial navigation is complete.\n   * * `legacy_disabled` - The initial navigation is not performed.\n   * The location listener is set up after the root component gets created.\n   * * `true` - same as `legacy_enabled`.\n   * * `false` - same as `legacy_disabled`.\n   * @type {?|undefined}\n   */\n\n  ExtraOptions.prototype.initialNavigation;\n  /**\n   * A custom error handler for failed navigations.\n   * @type {?|undefined}\n   */\n\n  ExtraOptions.prototype.errorHandler;\n  /**\n   * Configures a preloading strategy.\n   * One of `PreloadAllModules` or `NoPreloading` (the default).\n   * @type {?|undefined}\n   */\n\n  ExtraOptions.prototype.preloadingStrategy;\n  /**\n   * Define what the router should do if it receives a navigation request to the current URL.\n   * Default is `ignore`, which causes the router ignores the navigation.\n   * This can disable features such as a \"refresh\" button.\n   * Use this option to configure the behavior when navigating to the\n   * current URL. Default is 'ignore'.\n   * @type {?|undefined}\n   */\n\n  ExtraOptions.prototype.onSameUrlNavigation;\n  /**\n   * Configures if the scroll position needs to be restored when navigating back.\n   *\n   * * 'disabled'- (Default) Does nothing. Scroll position is maintained on navigation.\n   * * 'top'- Sets the scroll position to x = 0, y = 0 on all navigation.\n   * * 'enabled'- Restores the previous scroll position on backward navigation, else sets the\n   * position to the anchor if one is provided, or sets the scroll position to [0, 0] (forward\n   * navigation). This option will be the default in the future.\n   *\n   * You can implement custom scroll restoration behavior by adapting the enabled behavior as\n   * in the following example.\n   *\n   * ```typescript\n   * class AppModule {\n   *   constructor(router: Router, viewportScroller: ViewportScroller) {\n   *     router.events.pipe(\n   *       filter((e: Event): e is Scroll => e instanceof Scroll)\n   *     ).subscribe(e => {\n   *       if (e.position) {\n   *         // backward navigation\n   *         viewportScroller.scrollToPosition(e.position);\n   *       } else if (e.anchor) {\n   *         // anchor navigation\n   *         viewportScroller.scrollToAnchor(e.anchor);\n   *       } else {\n   *         // forward navigation\n   *         viewportScroller.scrollToPosition([0, 0]);\n   *       }\n   *     });\n   *   }\n   * }\n   * ```\n   * @type {?|undefined}\n   */\n\n  ExtraOptions.prototype.scrollPositionRestoration;\n  /**\n   * When set to 'enabled', scrolls to the anchor element when the URL has a fragment.\n   * Anchor scrolling is disabled by default.\n   *\n   * Anchor scrolling does not happen on 'popstate'. Instead, we restore the position\n   * that we stored or scroll to the top.\n   * @type {?|undefined}\n   */\n\n  ExtraOptions.prototype.anchorScrolling;\n  /**\n   * Configures the scroll offset the router will use when scrolling to an element.\n   *\n   * When given a tuple with x and y position value,\n   * the router uses that offset each time it scrolls.\n   * When given a function, the router invokes the function every time\n   * it restores scroll position.\n   * @type {?|undefined}\n   */\n\n  ExtraOptions.prototype.scrollOffset;\n  /**\n   * Defines how the router merges parameters, data, and resolved data from parent to child\n   * routes. By default ('emptyOnly'), inherits parent parameters only for\n   * path-less or component-less routes.\n   * Set to 'always' to enable unconditional inheritance of parent parameters.\n   * @type {?|undefined}\n   */\n\n  ExtraOptions.prototype.paramsInheritanceStrategy;\n  /**\n   * A custom handler for malformed URI errors. The handler is invoked when `encodedURI` contains\n   * invalid character sequences.\n   * The default implementation is to redirect to the root URL, dropping\n   * any path or parameter information. The function takes three parameters:\n   *\n   * - `'URIError'` - Error thrown when parsing a bad URL.\n   * - `'UrlSerializer'` - UrlSerializer that’s configured with the router.\n   * - `'url'` -  The malformed URL that caused the URIError\n   *\n   * @type {?|undefined}\n   */\n\n  ExtraOptions.prototype.malformedUriErrorHandler;\n  /**\n   * Defines when the router updates the browser URL. By default ('deferred'),\n   * update after successful navigation.\n   * Set to 'eager' if prefer to update the URL at the beginning of navigation.\n   * Updating the URL early allows you to handle a failure of navigation by\n   * showing an error message with the URL that failed.\n   * @type {?|undefined}\n   */\n\n  ExtraOptions.prototype.urlUpdateStrategy;\n  /**\n   * Enables a bug fix that corrects relative link resolution in components with empty paths.\n   * Example:\n   *\n   * ```\n   * const routes = [\n   *   {\n   *     path: '',\n   *     component: ContainerComponent,\n   *     children: [\n   *       { path: 'a', component: AComponent },\n   *       { path: 'b', component: BComponent },\n   *     ]\n   *   }\n   * ];\n   * ```\n   *\n   * From the `ContainerComponent`, this will not work:\n   *\n   * `<a [routerLink]=\"['./a']\">Link to A</a>`\n   *\n   * However, this will work:\n   *\n   * `<a [routerLink]=\"['../a']\">Link to A</a>`\n   *\n   * In other words, you're required to use `../` rather than `./`. This is currently the default\n   * behavior. Setting this option to `corrected` enables the fix.\n   * @type {?|undefined}\n   */\n\n  ExtraOptions.prototype.relativeLinkResolution;\n}\n/**\n * @param {?} urlSerializer\n * @param {?} contexts\n * @param {?} location\n * @param {?} injector\n * @param {?} loader\n * @param {?} compiler\n * @param {?} config\n * @param {?=} opts\n * @param {?=} urlHandlingStrategy\n * @param {?=} routeReuseStrategy\n * @return {?}\n */\n\n\nfunction setupRouter(urlSerializer, contexts, location, injector, loader, compiler, config, opts = {}, urlHandlingStrategy, routeReuseStrategy) {\n  /** @type {?} */\n  const router = new Router(null, urlSerializer, contexts, location, injector, loader, compiler, flatten(config));\n\n  if (urlHandlingStrategy) {\n    router.urlHandlingStrategy = urlHandlingStrategy;\n  }\n\n  if (routeReuseStrategy) {\n    router.routeReuseStrategy = routeReuseStrategy;\n  }\n\n  if (opts.errorHandler) {\n    router.errorHandler = opts.errorHandler;\n  }\n\n  if (opts.malformedUriErrorHandler) {\n    router.malformedUriErrorHandler = opts.malformedUriErrorHandler;\n  }\n\n  if (opts.enableTracing) {\n    /** @type {?} */\n    const dom = ɵgetDOM();\n    router.events.subscribe(\n    /**\n    * @param {?} e\n    * @return {?}\n    */\n    e => {\n      dom.logGroup(`Router Event: ${\n      /** @type {?} */\n      e.constructor.name}`);\n      dom.log(e.toString());\n      dom.log(e);\n      dom.logGroupEnd();\n    });\n  }\n\n  if (opts.onSameUrlNavigation) {\n    router.onSameUrlNavigation = opts.onSameUrlNavigation;\n  }\n\n  if (opts.paramsInheritanceStrategy) {\n    router.paramsInheritanceStrategy = opts.paramsInheritanceStrategy;\n  }\n\n  if (opts.urlUpdateStrategy) {\n    router.urlUpdateStrategy = opts.urlUpdateStrategy;\n  }\n\n  if (opts.relativeLinkResolution) {\n    router.relativeLinkResolution = opts.relativeLinkResolution;\n  }\n\n  return router;\n}\n/**\n * @param {?} router\n * @return {?}\n */\n\n\nfunction rootRoute(router) {\n  return router.routerState.root;\n}\n/**\n * Router initialization requires two steps:\n *\n * First, we start the navigation in a `APP_INITIALIZER` to block the bootstrap if\n * a resolver or a guard executes asynchronously.\n *\n * Next, we actually run activation in a `BOOTSTRAP_LISTENER`, using the\n * `afterPreactivation` hook provided by the router.\n * The router navigation starts, reaches the point when preactivation is done, and then\n * pauses. It waits for the hook to be resolved. We then resolve it only in a bootstrap listener.\n */\n\n\nclass RouterInitializer {\n  /**\n   * @param {?} injector\n   */\n  constructor(injector) {\n    this.injector = injector;\n    this.initNavigation = false;\n    this.resultOfPreactivationDone = new Subject();\n  }\n  /**\n   * @return {?}\n   */\n\n\n  appInitializer() {\n    /** @type {?} */\n    const p = this.injector.get(LOCATION_INITIALIZED, Promise.resolve(null));\n    return p.then(\n    /**\n    * @return {?}\n    */\n    () => {\n      /** @type {?} */\n      let resolve =\n      /** @type {?} */\n      null;\n      /** @type {?} */\n\n      const res = new Promise(\n      /**\n      * @param {?} r\n      * @return {?}\n      */\n      r => resolve = r);\n      /** @type {?} */\n\n      const router = this.injector.get(Router);\n      /** @type {?} */\n\n      const opts = this.injector.get(ROUTER_CONFIGURATION);\n\n      if (this.isLegacyDisabled(opts) || this.isLegacyEnabled(opts)) {\n        resolve(true);\n      } else if (opts.initialNavigation === 'disabled') {\n        router.setUpLocationChangeListener();\n        resolve(true);\n      } else if (opts.initialNavigation === 'enabled') {\n        router.hooks.afterPreactivation =\n        /**\n        * @return {?}\n        */\n        () => {\n          // only the initial navigation should be delayed\n          if (!this.initNavigation) {\n            this.initNavigation = true;\n            resolve(true);\n            return this.resultOfPreactivationDone; // subsequent navigations should not be delayed\n          } else {\n            return (\n              /** @type {?} */\n              of(null)\n            );\n          }\n        };\n\n        router.initialNavigation();\n      } else {\n        throw new Error(`Invalid initialNavigation options: '${opts.initialNavigation}'`);\n      }\n\n      return res;\n    });\n  }\n  /**\n   * @param {?} bootstrappedComponentRef\n   * @return {?}\n   */\n\n\n  bootstrapListener(bootstrappedComponentRef) {\n    /** @type {?} */\n    const opts = this.injector.get(ROUTER_CONFIGURATION);\n    /** @type {?} */\n\n    const preloader = this.injector.get(RouterPreloader);\n    /** @type {?} */\n\n    const routerScroller = this.injector.get(RouterScroller);\n    /** @type {?} */\n\n    const router = this.injector.get(Router);\n    /** @type {?} */\n\n    const ref = this.injector.get(ApplicationRef);\n\n    if (bootstrappedComponentRef !== ref.components[0]) {\n      return;\n    }\n\n    if (this.isLegacyEnabled(opts)) {\n      router.initialNavigation();\n    } else if (this.isLegacyDisabled(opts)) {\n      router.setUpLocationChangeListener();\n    }\n\n    preloader.setUpPreloading();\n    routerScroller.init();\n    router.resetRootComponentType(ref.componentTypes[0]);\n    this.resultOfPreactivationDone.next(\n    /** @type {?} */\n    null);\n    this.resultOfPreactivationDone.complete();\n  }\n  /**\n   * @private\n   * @param {?} opts\n   * @return {?}\n   */\n\n\n  isLegacyEnabled(opts) {\n    return opts.initialNavigation === 'legacy_enabled' || opts.initialNavigation === true || opts.initialNavigation === undefined;\n  }\n  /**\n   * @private\n   * @param {?} opts\n   * @return {?}\n   */\n\n\n  isLegacyDisabled(opts) {\n    return opts.initialNavigation === 'legacy_disabled' || opts.initialNavigation === false;\n  }\n\n}\n\nRouterInitializer.ɵfac = function RouterInitializer_Factory(t) {\n  return new (t || RouterInitializer)(ɵngcc0.ɵɵinject(ɵngcc0.Injector));\n};\n\nRouterInitializer.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: RouterInitializer,\n  factory: RouterInitializer.ɵfac\n});\n/** @nocollapse */\n\nRouterInitializer.ctorParameters = () => [{\n  type: Injector\n}];\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(RouterInitializer, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: ɵngcc0.Injector\n    }];\n  }, null);\n})();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  RouterInitializer.prototype.initNavigation;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  RouterInitializer.prototype.resultOfPreactivationDone;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  RouterInitializer.prototype.injector;\n}\n/**\n * @param {?} r\n * @return {?}\n */\n\n\nfunction getAppInitializer(r) {\n  return r.appInitializer.bind(r);\n}\n/**\n * @param {?} r\n * @return {?}\n */\n\n\nfunction getBootstrapListener(r) {\n  return r.bootstrapListener.bind(r);\n}\n/**\n * A [DI token](guide/glossary/#di-token) for the router initializer that\n * is called after the app is bootstrapped.\n *\n * \\@publicApi\n * @type {?}\n */\n\n\nconst ROUTER_INITIALIZER = new InjectionToken('Router Initializer');\n/**\n * @return {?}\n */\n\nfunction provideRouterInitializer() {\n  return [RouterInitializer, {\n    provide: APP_INITIALIZER,\n    multi: true,\n    useFactory: getAppInitializer,\n    deps: [RouterInitializer]\n  }, {\n    provide: ROUTER_INITIALIZER,\n    useFactory: getBootstrapListener,\n    deps: [RouterInitializer]\n  }, {\n    provide: APP_BOOTSTRAP_LISTENER,\n    multi: true,\n    useExisting: ROUTER_INITIALIZER\n  }];\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/router/src/version.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * \\@publicApi\n * @type {?}\n */\n\n\nconst VERSION = new Version('9.0.7');\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/router/src/private_export.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/router/src/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/router/public_api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/router/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ActivatedRoute, ActivatedRouteSnapshot, ActivationEnd, ActivationStart, ChildActivationEnd, ChildActivationStart, ChildrenOutletContexts, DefaultUrlSerializer, GuardsCheckEnd, GuardsCheckStart, NavigationCancel, NavigationEnd, NavigationError, NavigationStart, NoPreloading, OutletContext, PRIMARY_OUTLET, PreloadAllModules, PreloadingStrategy, ROUTER_CONFIGURATION, ROUTER_INITIALIZER, ROUTES, ResolveEnd, ResolveStart, RouteConfigLoadEnd, RouteConfigLoadStart, RouteReuseStrategy, Router, RouterEvent, RouterLink, RouterLinkActive, RouterLinkWithHref, RouterModule, RouterOutlet, RouterPreloader, RouterState, RouterStateSnapshot, RoutesRecognized, Scroll, UrlHandlingStrategy, UrlSegment, UrlSegmentGroup, UrlSerializer, UrlTree, VERSION, convertToParamMap, provideRoutes, ɵEmptyOutletComponent, ROUTER_PROVIDERS as ɵROUTER_PROVIDERS, ROUTER_FORROOT_GUARD as ɵangular_packages_router_router_a, routerNgProbeToken as ɵangular_packages_router_router_b, createRouterScroller as ɵangular_packages_router_router_c, provideLocationStrategy as ɵangular_packages_router_router_d, provideForRootGuard as ɵangular_packages_router_router_e, setupRouter as ɵangular_packages_router_router_f, rootRoute as ɵangular_packages_router_router_g, RouterInitializer as ɵangular_packages_router_router_h, getAppInitializer as ɵangular_packages_router_router_i, getBootstrapListener as ɵangular_packages_router_router_j, provideRouterInitializer as ɵangular_packages_router_router_k, ɵEmptyOutletComponent as ɵangular_packages_router_router_l, Tree as ɵangular_packages_router_router_m, TreeNode as ɵangular_packages_router_router_n, RouterScroller as ɵangular_packages_router_router_o, flatten as ɵflatten };","map":{"version":3,"sources":["../../../../../../packages/router/src/events.ts","../../../../../../packages/router/src/components/empty_outlet.ts","../../../../../../packages/router/src/shared.ts","../../../../../../packages/router/src/config.ts","../../../../../../packages/router/src/utils/collection.ts","../../../../../../packages/router/src/url_tree.ts","../../../../../../packages/router/src/utils/tree.ts","../../../../../../packages/router/src/router_state.ts","../../../../../../packages/router/src/create_router_state.ts","../../../../../../packages/router/src/create_url_tree.ts","../../../../../../packages/router/src/operators/activate_routes.ts","../../../../../../packages/router/src/utils/type_guards.ts","../../../../../../packages/router/src/apply_redirects.ts","../../../../../../packages/router/src/operators/apply_redirects.ts","../../../../../../packages/router/src/utils/preactivation.ts","../../../../../../packages/router/src/operators/prioritized_guard_value.ts","../../../../../../packages/router/src/operators/check_guards.ts","../../../../../../packages/router/src/recognize.ts","../../../../../../packages/router/src/operators/recognize.ts","../../../../../../packages/router/src/operators/resolve_data.ts","../../../../../../packages/router/src/operators/switch_tap.ts","../../../../../../packages/router/src/route_reuse_strategy.ts","../../../../../../packages/router/src/router_config_loader.ts","../../../../../../packages/router/src/url_handling_strategy.ts","../../../../../../packages/router/src/router.ts","../../../../../../packages/router/src/directives/router_link.ts","../../../../../../packages/router/src/directives/router_link_active.ts","../../../../../../packages/router/src/router_outlet_context.ts","../../../../../../packages/router/src/directives/router_outlet.ts","../../../../../../packages/router/src/router_preloader.ts","../../../../../../packages/router/src/router_scroller.ts","../../../../../../packages/router/src/router_module.ts","../../../../../../packages/router/src/version.ts","../../../../../../packages/router/router.ts"],"names":["EmptyOutletComponent","lastValue","isObservable","isPromise","applyRedirects","applyRedirectsFn","NoMatch","split","match","getOutlet","recognize","recognizeFn","last","Console","getDOM"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Route} from './config';\nimport {ActivatedRouteSnapshot, RouterStateSnapshot} from './router_state';\n\n/**\n * Identifies the call or event that triggered a navigation.\n *\n * * 'imperative': Triggered by `router.navigateByUrl()` or `router.navigate()`.\n * * 'popstate' : Triggered by a `popstate` event.\n * * 'hashchange'-: Triggered by a `hashchange` event.\n *\n * @publicApi\n */\nexport type NavigationTrigger = 'imperative' | 'popstate' | 'hashchange';\n\n/**\n * Base for events the router goes through, as opposed to events tied to a specific\n * route. Fired one time for any given navigation.\n *\n * @usageNotes\n *\n * ```ts\n * class MyService {\n *   constructor(public router: Router, logger: Logger) {\n *     router.events.pipe(\n *       filter(e => e instanceof RouterEvent)\n *     ).subscribe(e => {\n *       logger.log(e.id, e.url);\n *     });\n *   }\n * }\n * ```\n *\n * @see `Event`\n * @publicApi\n */\nexport class RouterEvent {\n  constructor(\n      /** A unique ID that the router assigns to every router navigation. */\n      public id: number,\n      /** The URL that is the destination for this navigation. */\n      public url: string) {}\n}\n\n/**\n * An event triggered when a navigation starts.\n *\n * @publicApi\n */\nexport class NavigationStart extends RouterEvent {\n  /**\n   * Identifies the call or event that triggered the navigation.\n   * An `imperative` trigger is a call to `router.navigateByUrl()` or `router.navigate()`.\n   *\n   */\n  navigationTrigger?: 'imperative'|'popstate'|'hashchange';\n\n  /**\n   * The navigation state that was previously supplied to the `pushState` call,\n   * when the navigation is triggered by a `popstate` event. Otherwise null.\n   *\n   * The state object is defined by `NavigationExtras`, and contains any\n   * developer-defined state value, as well as a unique ID that\n   * the router assigns to every router transition/navigation.\n   *\n   * From the perspective of the router, the router never \"goes back\".\n   * When the user clicks on the back button in the browser,\n   * a new navigation ID is created.\n   *\n   * Use the ID in this previous-state object to differentiate between a newly created\n   * state and one returned to by a `popstate` event, so that you can restore some\n   * remembered state, such as scroll position.\n   *\n   */\n  restoredState?: {[k: string]: any, navigationId: number}|null;\n\n  constructor(\n      /** @docsNotRequired */\n      id: number,\n      /** @docsNotRequired */\n      url: string,\n      /** @docsNotRequired */\n      navigationTrigger: 'imperative'|'popstate'|'hashchange' = 'imperative',\n      /** @docsNotRequired */\n      restoredState: {[k: string]: any, navigationId: number}|null = null) {\n    super(id, url);\n    this.navigationTrigger = navigationTrigger;\n    this.restoredState = restoredState;\n  }\n\n  /** @docsNotRequired */\n  toString(): string { return `NavigationStart(id: ${this.id}, url: '${this.url}')`; }\n}\n\n/**\n * An event triggered when a navigation ends successfully.\n *\n * @publicApi\n */\nexport class NavigationEnd extends RouterEvent {\n  constructor(\n      /** @docsNotRequired */\n      id: number,\n      /** @docsNotRequired */\n      url: string,\n      /** @docsNotRequired */\n      public urlAfterRedirects: string) {\n    super(id, url);\n  }\n\n  /** @docsNotRequired */\n  toString(): string {\n    return `NavigationEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}')`;\n  }\n}\n\n/**\n * An event triggered when a navigation is canceled, directly or indirectly.\n *\n * This can happen when a [route guard](guide/router#milestone-5-route-guards)\n * returns `false` or initiates a redirect by returning a `UrlTree`.\n *\n * @publicApi\n */\nexport class NavigationCancel extends RouterEvent {\n  constructor(\n      /** @docsNotRequired */\n      id: number,\n      /** @docsNotRequired */\n      url: string,\n      /** @docsNotRequired */\n      public reason: string) {\n    super(id, url);\n  }\n\n  /** @docsNotRequired */\n  toString(): string { return `NavigationCancel(id: ${this.id}, url: '${this.url}')`; }\n}\n\n/**\n * An event triggered when a navigation fails due to an unexpected error.\n *\n * @publicApi\n */\nexport class NavigationError extends RouterEvent {\n  constructor(\n      /** @docsNotRequired */\n      id: number,\n      /** @docsNotRequired */\n      url: string,\n      /** @docsNotRequired */\n      public error: any) {\n    super(id, url);\n  }\n\n  /** @docsNotRequired */\n  toString(): string {\n    return `NavigationError(id: ${this.id}, url: '${this.url}', error: ${this.error})`;\n  }\n}\n\n/**\n *An event triggered when routes are recognized.\n *\n * @publicApi\n */\nexport class RoutesRecognized extends RouterEvent {\n  constructor(\n      /** @docsNotRequired */\n      id: number,\n      /** @docsNotRequired */\n      url: string,\n      /** @docsNotRequired */\n      public urlAfterRedirects: string,\n      /** @docsNotRequired */\n      public state: RouterStateSnapshot) {\n    super(id, url);\n  }\n\n  /** @docsNotRequired */\n  toString(): string {\n    return `RoutesRecognized(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\n  }\n}\n\n/**\n * An event triggered at the start of the Guard phase of routing.\n *\n * @publicApi\n */\nexport class GuardsCheckStart extends RouterEvent {\n  constructor(\n      /** @docsNotRequired */\n      id: number,\n      /** @docsNotRequired */\n      url: string,\n      /** @docsNotRequired */\n      public urlAfterRedirects: string,\n      /** @docsNotRequired */\n      public state: RouterStateSnapshot) {\n    super(id, url);\n  }\n\n  toString(): string {\n    return `GuardsCheckStart(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\n  }\n}\n\n/**\n * An event triggered at the end of the Guard phase of routing.\n *\n * @publicApi\n */\nexport class GuardsCheckEnd extends RouterEvent {\n  constructor(\n      /** @docsNotRequired */\n      id: number,\n      /** @docsNotRequired */\n      url: string,\n      /** @docsNotRequired */\n      public urlAfterRedirects: string,\n      /** @docsNotRequired */\n      public state: RouterStateSnapshot,\n      /** @docsNotRequired */\n      public shouldActivate: boolean) {\n    super(id, url);\n  }\n\n  toString(): string {\n    return `GuardsCheckEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state}, shouldActivate: ${this.shouldActivate})`;\n  }\n}\n\n/**\n * An event triggered at the the start of the Resolve phase of routing.\n *\n * Runs in the \"resolve\" phase whether or not there is anything to resolve.\n * In future, may change to only run when there are things to be resolved.\n *\n * @publicApi\n */\nexport class ResolveStart extends RouterEvent {\n  constructor(\n      /** @docsNotRequired */\n      id: number,\n      /** @docsNotRequired */\n      url: string,\n      /** @docsNotRequired */\n      public urlAfterRedirects: string,\n      /** @docsNotRequired */\n      public state: RouterStateSnapshot) {\n    super(id, url);\n  }\n\n  toString(): string {\n    return `ResolveStart(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\n  }\n}\n\n/**\n * An event triggered at the end of the Resolve phase of routing.\n * @see `ResolveStart`.\n *\n * @publicApi\n */\nexport class ResolveEnd extends RouterEvent {\n  constructor(\n      /** @docsNotRequired */\n      id: number,\n      /** @docsNotRequired */\n      url: string,\n      /** @docsNotRequired */\n      public urlAfterRedirects: string,\n      /** @docsNotRequired */\n      public state: RouterStateSnapshot) {\n    super(id, url);\n  }\n\n  toString(): string {\n    return `ResolveEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;\n  }\n}\n\n/**\n * An event triggered before lazy loading a route configuration.\n *\n * @publicApi\n */\nexport class RouteConfigLoadStart {\n  constructor(\n      /** @docsNotRequired */\n      public route: Route) {}\n  toString(): string { return `RouteConfigLoadStart(path: ${this.route.path})`; }\n}\n\n/**\n * An event triggered when a route has been lazy loaded.\n *\n * @publicApi\n */\nexport class RouteConfigLoadEnd {\n  constructor(\n      /** @docsNotRequired */\n      public route: Route) {}\n  toString(): string { return `RouteConfigLoadEnd(path: ${this.route.path})`; }\n}\n\n/**\n * An event triggered at the start of the child-activation\n * part of the Resolve phase of routing.\n * @see  `ChildActivationEnd`\n * @see `ResolveStart`\n *\n * @publicApi\n */\nexport class ChildActivationStart {\n  constructor(\n      /** @docsNotRequired */\n      public snapshot: ActivatedRouteSnapshot) {}\n  toString(): string {\n    const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';\n    return `ChildActivationStart(path: '${path}')`;\n  }\n}\n\n/**\n * An event triggered at the end of the child-activation part\n * of the Resolve phase of routing.\n * @see `ChildActivationStart`\n * @see `ResolveStart` *\n * @publicApi\n */\nexport class ChildActivationEnd {\n  constructor(\n      /** @docsNotRequired */\n      public snapshot: ActivatedRouteSnapshot) {}\n  toString(): string {\n    const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';\n    return `ChildActivationEnd(path: '${path}')`;\n  }\n}\n\n/**\n * An event triggered at the start of the activation part\n * of the Resolve phase of routing.\n * @see ActivationEnd`\n * @see `ResolveStart`\n *\n * @publicApi\n */\nexport class ActivationStart {\n  constructor(\n      /** @docsNotRequired */\n      public snapshot: ActivatedRouteSnapshot) {}\n  toString(): string {\n    const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';\n    return `ActivationStart(path: '${path}')`;\n  }\n}\n\n/**\n * An event triggered at the end of the activation part\n * of the Resolve phase of routing.\n * @see `ActivationStart`\n * @see `ResolveStart`\n *\n * @publicApi\n */\nexport class ActivationEnd {\n  constructor(\n      /** @docsNotRequired */\n      public snapshot: ActivatedRouteSnapshot) {}\n  toString(): string {\n    const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';\n    return `ActivationEnd(path: '${path}')`;\n  }\n}\n\n/**\n * An event triggered by scrolling.\n *\n * @publicApi\n */\nexport class Scroll {\n  constructor(\n      /** @docsNotRequired */\n      readonly routerEvent: NavigationEnd,\n\n      /** @docsNotRequired */\n      readonly position: [number, number]|null,\n\n      /** @docsNotRequired */\n      readonly anchor: string|null) {}\n\n  toString(): string {\n    const pos = this.position ? `${this.position[0]}, ${this.position[1]}` : null;\n    return `Scroll(anchor: '${this.anchor}', position: '${pos}')`;\n  }\n}\n\n/**\n * Router events that allow you to track the lifecycle of the router.\n *\n * The sequence of router events is as follows:\n *\n * - `NavigationStart`,\n * - `RouteConfigLoadStart`,\n * - `RouteConfigLoadEnd`,\n * - `RoutesRecognized`,\n * - `GuardsCheckStart`,\n * - `ChildActivationStart`,\n * - `ActivationStart`,\n * - `GuardsCheckEnd`,\n * - `ResolveStart`,\n * - `ResolveEnd`,\n * - `ActivationEnd`\n * - `ChildActivationEnd`\n * - `NavigationEnd`,\n * - `NavigationCancel`,\n * - `NavigationError`\n * - `Scroll`\n *\n * @publicApi\n */\nexport type Event = RouterEvent | RouteConfigLoadStart | RouteConfigLoadEnd | ChildActivationStart |\n    ChildActivationEnd | ActivationStart | ActivationEnd | Scroll;\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component} from '@angular/core';\n\n/**\n * This component is used internally within the router to be a placeholder when an empty\n * router-outlet is needed. For example, with a config such as:\n *\n * `{path: 'parent', outlet: 'nav', children: [...]}`\n *\n * In order to render, there needs to be a component on this config, which will default\n * to this `EmptyOutletComponent`.\n */\n@Component({template: `<router-outlet></router-outlet>`})\nexport class ÉµEmptyOutletComponent {\n}\n\nexport {ÉµEmptyOutletComponent as EmptyOutletComponent};\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Route, UrlMatchResult} from './config';\nimport {UrlSegment, UrlSegmentGroup} from './url_tree';\n\n\n/**\n * The primary routing outlet.\n *\n * @publicApi\n */\nexport const PRIMARY_OUTLET = 'primary';\n\n/**\n * A collection of matrix and query URL parameters.\n * @see `convertToParamMap()`\n * @see `ParamMap`\n *\n * @publicApi\n */\nexport type Params = {\n  [key: string]: any;\n};\n\n/**\n * A map that provides access to the required and optional parameters\n * specific to a route.\n * The map supports retrieving a single value with `get()`\n * or multiple values with `getAll()`.\n *\n * @see [URLSearchParams](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams)\n *\n * @publicApi\n */\nexport interface ParamMap {\n  /**\n   * Reports whether the map contains a given parameter.\n   * @param name The parameter name.\n   * @returns True if the map contains the given parameter, false otherwise.\n   */\n  has(name: string): boolean;\n  /**\n   * Retrieves a single value for a parameter.\n   * @param name The parameter name.\n   * @return The parameter's single value,\n   * or the first value if the parameter has multiple values,\n   * or `null` when there is no such parameter.\n   */\n  get(name: string): string|null;\n  /**\n   * Retrieves multiple values for a parameter.\n   * @param name The parameter name.\n   * @return An array containing one or more values,\n   * or an empty array if there is no such parameter.\n   *\n   */\n  getAll(name: string): string[];\n\n  /** Names of the parameters in the map. */\n  readonly keys: string[];\n}\n\nclass ParamsAsMap implements ParamMap {\n  private params: Params;\n\n  constructor(params: Params) { this.params = params || {}; }\n\n  has(name: string): boolean { return this.params.hasOwnProperty(name); }\n\n  get(name: string): string|null {\n    if (this.has(name)) {\n      const v = this.params[name];\n      return Array.isArray(v) ? v[0] : v;\n    }\n\n    return null;\n  }\n\n  getAll(name: string): string[] {\n    if (this.has(name)) {\n      const v = this.params[name];\n      return Array.isArray(v) ? v : [v];\n    }\n\n    return [];\n  }\n\n  get keys(): string[] { return Object.keys(this.params); }\n}\n\n/**\n * Converts a `Params` instance to a `ParamMap`.\n * @param params The instance to convert.\n * @returns The new map instance.\n *\n * @publicApi\n */\nexport function convertToParamMap(params: Params): ParamMap {\n  return new ParamsAsMap(params);\n}\n\nconst NAVIGATION_CANCELING_ERROR = 'ngNavigationCancelingError';\n\nexport function navigationCancelingError(message: string) {\n  const error = Error('NavigationCancelingError: ' + message);\n  (error as any)[NAVIGATION_CANCELING_ERROR] = true;\n  return error;\n}\n\nexport function isNavigationCancelingError(error: Error) {\n  return error && (error as any)[NAVIGATION_CANCELING_ERROR];\n}\n\n// Matches the route configuration (`route`) against the actual URL (`segments`).\nexport function defaultUrlMatcher(\n    segments: UrlSegment[], segmentGroup: UrlSegmentGroup, route: Route): UrlMatchResult|null {\n  const parts = route.path !.split('/');\n\n  if (parts.length > segments.length) {\n    // The actual URL is shorter than the config, no match\n    return null;\n  }\n\n  if (route.pathMatch === 'full' &&\n      (segmentGroup.hasChildren() || parts.length < segments.length)) {\n    // The config is longer than the actual URL but we are looking for a full match, return null\n    return null;\n  }\n\n  const posParams: {[key: string]: UrlSegment} = {};\n\n  // Check each config part against the actual URL\n  for (let index = 0; index < parts.length; index++) {\n    const part = parts[index];\n    const segment = segments[index];\n    const isParameter = part.startsWith(':');\n    if (isParameter) {\n      posParams[part.substring(1)] = segment;\n    } else if (part !== segment.path) {\n      // The actual URL part does not match the config, no match\n      return null;\n    }\n  }\n\n  return {consumed: segments.slice(0, parts.length), posParams};\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModuleFactory, NgModuleRef, Type} from '@angular/core';\nimport {Observable} from 'rxjs';\n\nimport {EmptyOutletComponent} from './components/empty_outlet';\nimport {ActivatedRouteSnapshot} from './router_state';\nimport {PRIMARY_OUTLET} from './shared';\nimport {UrlSegment, UrlSegmentGroup} from './url_tree';\n\n\n/**\n * Represents a route configuration for the Router service.\n * An array of `Route` objects, used in `Router.config` and for nested route configurations\n * in `Route.children`.\n *\n * @see `Route`\n * @see `Router`\n * @publicApi\n */\nexport type Routes = Route[];\n\n/**\n * Represents the result of matching URLs with a custom matching function.\n *\n * * `consumed` is an array of the consumed URL segments.\n * * `posParams` is a map of positional parameters.\n *\n * @see `UrlMatcher()`\n * @publicApi\n */\nexport type UrlMatchResult = {\n  consumed: UrlSegment[]; posParams?: {[name: string]: UrlSegment};\n};\n\n/**\n * A function for matching a route against URLs. Implement a custom URL matcher\n * for `Route.matcher` when a combination of `path` and `pathMatch`\n * is not expressive enough. Cannot be used together with `path` and `pathMatch`.\n *\n * @param segments An array of URL segments.\n * @param group A segment group.\n * @param route The route to match against.\n * @returns The match-result.\n *\n * @usageNotes\n *\n * The following matcher matches HTML files.\n *\n * ```\n * export function htmlFiles(url: UrlSegment[]) {\n *   return url.length === 1 && url[0].path.endsWith('.html') ? ({consumed: url}) : null;\n * }\n *\n * export const routes = [{ matcher: htmlFiles, component: AnyComponent }];\n * ```\n *\n * @publicApi\n */\nexport type UrlMatcher = (segments: UrlSegment[], group: UrlSegmentGroup, route: Route) =>\n    UrlMatchResult;\n\n/**\n *\n * Represents static data associated with a particular route.\n *\n * @see `Route#data`\n *\n * @publicApi\n */\nexport type Data = {\n  [name: string]: any\n};\n\n/**\n *\n * Represents the resolved data associated with a particular route.\n *\n * @see `Route#resolve`.\n *\n * @publicApi\n */\nexport type ResolveData = {\n  [name: string]: any\n};\n\n/**\n *\n * A function that is called to resolve a collection of lazy-loaded routes.\n *\n * Often this function will be implemented using an ES dynamic `import()` expression. For example:\n *\n * ```\n * [{\n *   path: 'lazy',\n *   loadChildren: () => import('./lazy-route/lazy.module').then(mod => mod.LazyModule),\n * }];\n * ```\n *\n * This function _must_ match the form above: an arrow function of the form\n * `() => import('...').then(mod => mod.MODULE)`.\n *\n * @see `Route#loadChildren`.\n * @publicApi\n */\nexport type LoadChildrenCallback = () => Type<any>| NgModuleFactory<any>| Observable<Type<any>>|\n    Promise<NgModuleFactory<any>|Type<any>|any>;\n\n/**\n *\n * A string of the form `path/to/file#exportName` that acts as a URL for a set of routes to load,\n * or a function that returns such a set.\n *\n * The string form of `LoadChildren` is deprecated (see `DeprecatedLoadChildren`). The function\n * form (`LoadChildrenCallback`) should be used instead.\n *\n * @see `Route#loadChildren`.\n * @publicApi\n */\nexport type LoadChildren = LoadChildrenCallback | DeprecatedLoadChildren;\n\n/**\n * A string of the form `path/to/file#exportName` that acts as a URL for a set of routes to load.\n *\n * @see `Route#loadChildren`\n * @publicApi\n * @deprecated the `string` form of `loadChildren` is deprecated in favor of the proposed ES dynamic\n * `import()` expression, which offers a more natural and standards-based mechanism to dynamically\n * load an ES module at runtime.\n */\nexport type DeprecatedLoadChildren = string;\n\n/**\n *\n * How to handle query parameters in a router link.\n * One of:\n * - `merge` : Merge new with current parameters.\n * - `preserve` : Preserve current parameters.\n *\n * @see `NavigationExtras#queryParamsHandling`\n * @see `RouterLink`\n * @publicApi\n */\nexport type QueryParamsHandling = 'merge' | 'preserve' | '';\n\n/**\n *\n * A policy for when to run guards and resolvers on a route.\n *\n * @see `Route#runGuardsAndResolvers`\n * @publicApi\n */\nexport type RunGuardsAndResolvers = 'pathParamsChange' | 'pathParamsOrQueryParamsChange' |\n    'paramsChange' | 'paramsOrQueryParamsChange' | 'always' |\n    ((from: ActivatedRouteSnapshot, to: ActivatedRouteSnapshot) => boolean);\n\n/**\n * A configuration object that defines a single route.\n * A set of routes are collected in a `Routes` array to define a `Router` configuration.\n * The router attempts to match segments of a given URL against each route,\n * using the configuration options defined in this object.\n *\n * Supports static, parameterized, redirect, and wildcard routes, as well as\n * custom route data and resolve methods.\n *\n * For detailed usage information, see the [Routing Guide](guide/router).\n *\n * @usageNotes\n *\n * ### Simple Configuration\n *\n * The following route specifies that when navigating to, for example,\n * `/team/11/user/bob`, the router creates the 'Team' component\n * with the 'User' child component in it.\n *\n * ```\n * [{\n *   path: 'team/:id',\n  *  component: Team,\n *   children: [{\n *     path: 'user/:name',\n *     component: User\n *   }]\n * }]\n * ```\n *\n * ### Multiple Outlets\n *\n * The following route creates sibling components with multiple outlets.\n * When navigating to `/team/11(aux:chat/jim)`, the router creates the 'Team' component next to\n * the 'Chat' component. The 'Chat' component is placed into the 'aux' outlet.\n *\n * ```\n * [{\n *   path: 'team/:id',\n *   component: Team\n * }, {\n *   path: 'chat/:user',\n *   component: Chat\n *   outlet: 'aux'\n * }]\n * ```\n *\n * ### Wild Cards\n *\n * The following route uses wild-card notation to specify a component\n * that is always instantiated regardless of where you navigate to.\n *\n * ```\n * [{\n *   path: '**',\n *   component: WildcardComponent\n * }]\n * ```\n *\n * ### Redirects\n *\n * The following route uses the `redirectTo` property to ignore a segment of\n * a given URL when looking for a child path.\n *\n * When navigating to '/team/11/legacy/user/jim', the router changes the URL segment\n * '/team/11/legacy/user/jim' to '/team/11/user/jim', and then instantiates\n * the Team component with the User child component in it.\n *\n * ```\n * [{\n *   path: 'team/:id',\n *   component: Team,\n *   children: [{\n *     path: 'legacy/user/:name',\n *     redirectTo: 'user/:name'\n *   }, {\n *     path: 'user/:name',\n *     component: User\n *   }]\n * }]\n * ```\n *\n * The redirect path can be relative, as shown in this example, or absolute.\n * If we change the `redirectTo` value in the example to the absolute URL segment '/user/:name',\n * the result URL is also absolute, '/user/jim'.\n\n * ### Empty Path\n *\n * Empty-path route configurations can be used to instantiate components that do not 'consume'\n * any URL segments.\n *\n * In the following configuration, when navigating to\n * `/team/11`, the router instantiates the 'AllUsers' component.\n *\n * ```\n * [{\n *   path: 'team/:id',\n *   component: Team,\n *   children: [{\n *     path: '',\n *     component: AllUsers\n *   }, {\n *     path: 'user/:name',\n *     component: User\n *   }]\n * }]\n * ```\n *\n * Empty-path routes can have children. In the following example, when navigating\n * to `/team/11/user/jim`, the router instantiates the wrapper component with\n * the user component in it.\n *\n * Note that an empty path route inherits its parent's parameters and data.\n *\n * ```\n * [{\n *   path: 'team/:id',\n *   component: Team,\n *   children: [{\n *     path: '',\n *     component: WrapperCmp,\n *     children: [{\n *       path: 'user/:name',\n *       component: User\n *     }]\n *   }]\n * }]\n * ```\n *\n * ### Matching Strategy\n *\n * The default path-match strategy is 'prefix', which means that the router\n * checks URL elements from the left to see if the URL matches a specified path.\n * For example, '/team/11/user' matches 'team/:id'.\n *\n * ```\n * [{\n *   path: '',\n *   pathMatch: 'prefix', //default\n *   redirectTo: 'main'\n * }, {\n *   path: 'main',\n *   component: Main\n * }]\n * ```\n *\n * You can specify the path-match strategy 'full' to make sure that the path\n * covers the whole unconsumed URL. It is important to do this when redirecting\n * empty-path routes. Otherwise, because an empty path is a prefix of any URL,\n * the router would apply the redirect even when navigating to the redirect destination,\n * creating an endless loop.\n *\n * In the following example, supplying the 'full' `pathMatch` strategy ensures\n * that the router applies the redirect if and only if navigating to '/'.\n *\n * ```\n * [{\n *   path: '',\n *   pathMatch: 'full',\n *   redirectTo: 'main'\n * }, {\n *   path: 'main',\n *   component: Main\n * }]\n * ```\n *\n * ### Componentless Routes\n *\n * You can share parameters between sibling components.\n * For example, suppose that two sibling components should go next to each other,\n * and both of them require an ID parameter. You can accomplish this using a route\n * that does not specify a component at the top level.\n *\n * In the following example, 'MainChild' and 'AuxChild' are siblings.\n * When navigating to 'parent/10/(a//aux:b)', the route instantiates\n * the main child and aux child components next to each other.\n * For this to work, the application component must have the primary and aux outlets defined.\n *\n * ```\n * [{\n *    path: 'parent/:id',\n *    children: [\n *      { path: 'a', component: MainChild },\n *      { path: 'b', component: AuxChild, outlet: 'aux' }\n *    ]\n * }]\n * ```\n *\n * The router merges the parameters, data, and resolve of the componentless\n * parent into the parameters, data, and resolve of the children.\n *\n * This is especially useful when child components are defined\n * with an empty path string, as in the following example.\n * With this configuration, navigating to '/parent/10' creates\n * the main child and aux components.\n *\n * ```\n * [{\n *    path: 'parent/:id',\n *    children: [\n *      { path: '', component: MainChild },\n *      { path: '', component: AuxChild, outlet: 'aux' }\n *    ]\n * }]\n * ```\n *\n * ### Lazy Loading\n *\n * Lazy loading speeds up application load time by splitting the application\n * into multiple bundles and loading them on demand.\n * To use lazy loading, provide the `loadChildren` property  instead of the `children` property.\n *\n * Given the following example route, the router will lazy load\n * the associated module on demand using the browser native import system.\n *\n * ```\n * [{\n *   path: 'lazy',\n *   loadChildren: () => import('./lazy-route/lazy.module').then(mod => mod.LazyModule),\n * }];\n * ```\n *\n * @publicApi\n */\nexport interface Route {\n  /**\n   * The path to match against. Cannot be used together with a custom `matcher` function.\n   * A URL string that uses router matching notation.\n   * Can be a wild card (`**`) that matches any URL (see Usage Notes below).\n   * Default is \"/\" (the root path).\n   *\n   */\n  path?: string;\n  /**\n   * The path-matching strategy, one of 'prefix' or 'full'.\n   * Default is 'prefix'.\n   *\n   * By default, the router checks URL elements from the left to see if the URL\n   * matches a given  path, and stops when there is a match. For example,\n   * '/team/11/user' matches 'team/:id'.\n   *\n   * The path-match strategy 'full' matches against the entire URL.\n   * It is important to do this when redirecting empty-path routes.\n   * Otherwise, because an empty path is a prefix of any URL,\n   * the router would apply the redirect even when navigating\n   * to the redirect destination, creating an endless loop.\n   *\n   */\n  pathMatch?: string;\n  /**\n   * A custom URL-matching function. Cannot be used together with `path`.\n   */\n  matcher?: UrlMatcher;\n  /**\n   * The component to instantiate when the path matches.\n   * Can be empty if child routes specify components.\n   */\n  component?: Type<any>;\n  /**\n   * A URL to which to redirect when a the path matches.\n   * Absolute if the URL begins with a slash (/), otherwise relative to the path URL.\n   * When not present, router does not redirect.\n   */\n  redirectTo?: string;\n  /**\n   * Name of a `RouterOutlet` object where the component can be placed\n   * when the path matches.\n   */\n  outlet?: string;\n  /**\n   * An array of dependency-injection tokens used to look up `CanActivate()`\n   * handlers, in order to determine if the current user is allowed to\n   * activate the component. By default, any user can activate.\n   */\n  canActivate?: any[];\n  /**\n   * An array of DI tokens used to look up `CanActivateChild()` handlers,\n   * in order to determine if the current user is allowed to activate\n   * a child of the component. By default, any user can activate a child.\n   */\n  canActivateChild?: any[];\n  /**\n   * An array of DI tokens used to look up `CanDeactivate()`\n   * handlers, in order to determine if the current user is allowed to\n   * deactivate the component. By default, any user can deactivate.\n   *\n   */\n  canDeactivate?: any[];\n  /**\n   * An array of DI tokens used to look up `CanLoad()`\n   * handlers, in order to determine if the current user is allowed to\n   * load the component. By default, any user can load.\n   */\n  canLoad?: any[];\n  /**\n   * Additional developer-defined data provided to the component via\n   * `ActivatedRoute`. By default, no additional data is passed.\n   */\n  data?: Data;\n  /**\n   * A map of DI tokens used to look up data resolvers. See `Resolve`.\n   */\n  resolve?: ResolveData;\n  /**\n   * An array of child `Route` objects that specifies a nested route\n   * configuration.\n   */\n  children?: Routes;\n  /**\n   * A `LoadChildren` object specifying lazy-loaded child routes.\n   */\n  loadChildren?: LoadChildren;\n  /**\n   * Defines when guards and resolvers will be run. One of\n   * - `paramsOrQueryParamsChange` : Run when query parameters change.\n   * - `always` : Run on every execution.\n   * By default, guards and resolvers run only when the matrix\n   * parameters of the route change.\n   */\n  runGuardsAndResolvers?: RunGuardsAndResolvers;\n  /**\n   * Filled for routes with `loadChildren` once the module has been loaded\n   * @internal\n   */\n  _loadedConfig?: LoadedRouterConfig;\n}\n\nexport class LoadedRouterConfig {\n  constructor(public routes: Route[], public module: NgModuleRef<any>) {}\n}\n\nexport function validateConfig(config: Routes, parentPath: string = ''): void {\n  // forEach doesn't iterate undefined values\n  for (let i = 0; i < config.length; i++) {\n    const route: Route = config[i];\n    const fullPath: string = getFullPath(parentPath, route);\n    validateNode(route, fullPath);\n  }\n}\n\nfunction validateNode(route: Route, fullPath: string): void {\n  if (!route) {\n    throw new Error(`\n      Invalid configuration of route '${fullPath}': Encountered undefined route.\n      The reason might be an extra comma.\n\n      Example:\n      const routes: Routes = [\n        { path: '', redirectTo: '/dashboard', pathMatch: 'full' },\n        { path: 'dashboard',  component: DashboardComponent },, << two commas\n        { path: 'detail/:id', component: HeroDetailComponent }\n      ];\n    `);\n  }\n  if (Array.isArray(route)) {\n    throw new Error(`Invalid configuration of route '${fullPath}': Array cannot be specified`);\n  }\n  if (!route.component && !route.children && !route.loadChildren &&\n      (route.outlet && route.outlet !== PRIMARY_OUTLET)) {\n    throw new Error(\n        `Invalid configuration of route '${fullPath}': a componentless route without children or loadChildren cannot have a named outlet set`);\n  }\n  if (route.redirectTo && route.children) {\n    throw new Error(\n        `Invalid configuration of route '${fullPath}': redirectTo and children cannot be used together`);\n  }\n  if (route.redirectTo && route.loadChildren) {\n    throw new Error(\n        `Invalid configuration of route '${fullPath}': redirectTo and loadChildren cannot be used together`);\n  }\n  if (route.children && route.loadChildren) {\n    throw new Error(\n        `Invalid configuration of route '${fullPath}': children and loadChildren cannot be used together`);\n  }\n  if (route.redirectTo && route.component) {\n    throw new Error(\n        `Invalid configuration of route '${fullPath}': redirectTo and component cannot be used together`);\n  }\n  if (route.path && route.matcher) {\n    throw new Error(\n        `Invalid configuration of route '${fullPath}': path and matcher cannot be used together`);\n  }\n  if (route.redirectTo === void 0 && !route.component && !route.children && !route.loadChildren) {\n    throw new Error(\n        `Invalid configuration of route '${fullPath}'. One of the following must be provided: component, redirectTo, children or loadChildren`);\n  }\n  if (route.path === void 0 && route.matcher === void 0) {\n    throw new Error(\n        `Invalid configuration of route '${fullPath}': routes must have either a path or a matcher specified`);\n  }\n  if (typeof route.path === 'string' && route.path.charAt(0) === '/') {\n    throw new Error(`Invalid configuration of route '${fullPath}': path cannot start with a slash`);\n  }\n  if (route.path === '' && route.redirectTo !== void 0 && route.pathMatch === void 0) {\n    const exp =\n        `The default value of 'pathMatch' is 'prefix', but often the intent is to use 'full'.`;\n    throw new Error(\n        `Invalid configuration of route '{path: \"${fullPath}\", redirectTo: \"${route.redirectTo}\"}': please provide 'pathMatch'. ${exp}`);\n  }\n  if (route.pathMatch !== void 0 && route.pathMatch !== 'full' && route.pathMatch !== 'prefix') {\n    throw new Error(\n        `Invalid configuration of route '${fullPath}': pathMatch can only be set to 'prefix' or 'full'`);\n  }\n  if (route.children) {\n    validateConfig(route.children, fullPath);\n  }\n}\n\nfunction getFullPath(parentPath: string, currentRoute: Route): string {\n  if (!currentRoute) {\n    return parentPath;\n  }\n  if (!parentPath && !currentRoute.path) {\n    return '';\n  } else if (parentPath && !currentRoute.path) {\n    return `${parentPath}/`;\n  } else if (!parentPath && currentRoute.path) {\n    return currentRoute.path;\n  } else {\n    return `${parentPath}/${currentRoute.path}`;\n  }\n}\n\n/**\n * Makes a copy of the config and adds any default required properties.\n */\nexport function standardizeConfig(r: Route): Route {\n  const children = r.children && r.children.map(standardizeConfig);\n  const c = children ? {...r, children} : {...r};\n  if (!c.component && (children || c.loadChildren) && (c.outlet && c.outlet !== PRIMARY_OUTLET)) {\n    c.component = EmptyOutletComponent;\n  }\n  return c;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModuleFactory, ÉµisObservable as isObservable, ÉµisPromise as isPromise} from '@angular/core';\nimport {Observable, from, of } from 'rxjs';\nimport {concatAll, last as lastValue, map} from 'rxjs/operators';\n\nimport {PRIMARY_OUTLET, Params} from '../shared';\n\nexport function shallowEqualArrays(a: any[], b: any[]): boolean {\n  if (a.length !== b.length) return false;\n  for (let i = 0; i < a.length; ++i) {\n    if (!shallowEqual(a[i], b[i])) return false;\n  }\n  return true;\n}\n\nexport function shallowEqual(a: Params, b: Params): boolean {\n  // Casting Object.keys return values to include `undefined` as there are some cases\n  // in IE 11 where this can happen. Cannot provide a test because the behavior only\n  // exists in certain circumstances in IE 11, therefore doing this cast ensures the\n  // logic is correct for when this edge case is hit.\n  const k1 = Object.keys(a) as string[] | undefined;\n  const k2 = Object.keys(b) as string[] | undefined;\n  if (!k1 || !k2 || k1.length != k2.length) {\n    return false;\n  }\n  let key: string;\n  for (let i = 0; i < k1.length; i++) {\n    key = k1[i];\n    if (!equalArraysOrString(a[key], b[key])) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Test equality for arrays of strings or a string.\n */\nexport function equalArraysOrString(a: string | string[], b: string | string[]) {\n  if (Array.isArray(a) && Array.isArray(b)) {\n    if (a.length != b.length) return false;\n    return a.every(aItem => b.indexOf(aItem) > -1);\n  } else {\n    return a === b;\n  }\n}\n\n/**\n * Flattens single-level nested arrays.\n */\nexport function flatten<T>(arr: T[][]): T[] {\n  return Array.prototype.concat.apply([], arr);\n}\n\n/**\n * Return the last element of an array.\n */\nexport function last<T>(a: T[]): T|null {\n  return a.length > 0 ? a[a.length - 1] : null;\n}\n\n/**\n * Verifys all booleans in an array are `true`.\n */\nexport function and(bools: boolean[]): boolean {\n  return !bools.some(v => !v);\n}\n\nexport function forEach<K, V>(map: {[key: string]: V}, callback: (v: V, k: string) => void): void {\n  for (const prop in map) {\n    if (map.hasOwnProperty(prop)) {\n      callback(map[prop], prop);\n    }\n  }\n}\n\nexport function waitForMap<A, B>(\n    obj: {[k: string]: A}, fn: (k: string, a: A) => Observable<B>): Observable<{[k: string]: B}> {\n  if (Object.keys(obj).length === 0) {\n    return of ({});\n  }\n\n  const waitHead: Observable<B>[] = [];\n  const waitTail: Observable<B>[] = [];\n  const res: {[k: string]: B} = {};\n\n  forEach(obj, (a: A, k: string) => {\n    const mapped = fn(k, a).pipe(map((r: B) => res[k] = r));\n    if (k === PRIMARY_OUTLET) {\n      waitHead.push(mapped);\n    } else {\n      waitTail.push(mapped);\n    }\n  });\n\n  // Closure compiler has problem with using spread operator here. So we use \"Array.concat\".\n  // Note that we also need to cast the new promise because TypeScript cannot infer the type\n  // when calling the \"of\" function through \"Function.apply\"\n  return (of .apply(null, waitHead.concat(waitTail)) as Observable<Observable<B>>)\n      .pipe(concatAll(), lastValue(), map(() => res));\n}\n\nexport function wrapIntoObservable<T>(value: T | Promise<T>| Observable<T>): Observable<T> {\n  if (isObservable(value)) {\n    return value;\n  }\n\n  if (isPromise(value)) {\n    // Use `Promise.resolve()` to wrap promise-like instances.\n    // Required ie when a Resolver returns a AngularJS `$q` promise to correctly trigger the\n    // change detection.\n    return from(Promise.resolve(value));\n  }\n\n  return of (value);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PRIMARY_OUTLET, ParamMap, Params, convertToParamMap} from './shared';\nimport {equalArraysOrString, forEach, shallowEqual} from './utils/collection';\n\nexport function createEmptyUrlTree() {\n  return new UrlTree(new UrlSegmentGroup([], {}), {}, null);\n}\n\nexport function containsTree(container: UrlTree, containee: UrlTree, exact: boolean): boolean {\n  if (exact) {\n    return equalQueryParams(container.queryParams, containee.queryParams) &&\n        equalSegmentGroups(container.root, containee.root);\n  }\n\n  return containsQueryParams(container.queryParams, containee.queryParams) &&\n      containsSegmentGroup(container.root, containee.root);\n}\n\nfunction equalQueryParams(container: Params, containee: Params): boolean {\n  // TODO: This does not handle array params correctly.\n  return shallowEqual(container, containee);\n}\n\nfunction equalSegmentGroups(container: UrlSegmentGroup, containee: UrlSegmentGroup): boolean {\n  if (!equalPath(container.segments, containee.segments)) return false;\n  if (container.numberOfChildren !== containee.numberOfChildren) return false;\n  for (const c in containee.children) {\n    if (!container.children[c]) return false;\n    if (!equalSegmentGroups(container.children[c], containee.children[c])) return false;\n  }\n  return true;\n}\n\nfunction containsQueryParams(container: Params, containee: Params): boolean {\n  // TODO: This does not handle array params correctly.\n  return Object.keys(containee).length <= Object.keys(container).length &&\n      Object.keys(containee).every(key => equalArraysOrString(container[key], containee[key]));\n}\n\nfunction containsSegmentGroup(container: UrlSegmentGroup, containee: UrlSegmentGroup): boolean {\n  return containsSegmentGroupHelper(container, containee, containee.segments);\n}\n\nfunction containsSegmentGroupHelper(\n    container: UrlSegmentGroup, containee: UrlSegmentGroup, containeePaths: UrlSegment[]): boolean {\n  if (container.segments.length > containeePaths.length) {\n    const current = container.segments.slice(0, containeePaths.length);\n    if (!equalPath(current, containeePaths)) return false;\n    if (containee.hasChildren()) return false;\n    return true;\n\n  } else if (container.segments.length === containeePaths.length) {\n    if (!equalPath(container.segments, containeePaths)) return false;\n    for (const c in containee.children) {\n      if (!container.children[c]) return false;\n      if (!containsSegmentGroup(container.children[c], containee.children[c])) return false;\n    }\n    return true;\n\n  } else {\n    const current = containeePaths.slice(0, container.segments.length);\n    const next = containeePaths.slice(container.segments.length);\n    if (!equalPath(container.segments, current)) return false;\n    if (!container.children[PRIMARY_OUTLET]) return false;\n    return containsSegmentGroupHelper(container.children[PRIMARY_OUTLET], containee, next);\n  }\n}\n\n/**\n * @description\n *\n * Represents the parsed URL.\n *\n * Since a router state is a tree, and the URL is nothing but a serialized state, the URL is a\n * serialized tree.\n * UrlTree is a data structure that provides a lot of affordances in dealing with URLs\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * @Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const tree: UrlTree =\n *       router.parseUrl('/team/33/(user/victor//support:help)?debug=true#fragment');\n *     const f = tree.fragment; // return 'fragment'\n *     const q = tree.queryParams; // returns {debug: 'true'}\n *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\n *     const s: UrlSegment[] = g.segments; // returns 2 segments 'team' and '33'\n *     g.children[PRIMARY_OUTLET].segments; // returns 2 segments 'user' and 'victor'\n *     g.children['support'].segments; // return 1 segment 'help'\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nexport class UrlTree {\n  /** @internal */\n  // TODO(issue/24571): remove '!'.\n  _queryParamMap !: ParamMap;\n\n  /** @internal */\n  constructor(\n      /** The root segment group of the URL tree */\n      public root: UrlSegmentGroup,\n      /** The query params of the URL */\n      public queryParams: Params,\n      /** The fragment of the URL */\n      public fragment: string|null) {}\n\n  get queryParamMap(): ParamMap {\n    if (!this._queryParamMap) {\n      this._queryParamMap = convertToParamMap(this.queryParams);\n    }\n    return this._queryParamMap;\n  }\n\n  /** @docsNotRequired */\n  toString(): string { return DEFAULT_SERIALIZER.serialize(this); }\n}\n\n/**\n * @description\n *\n * Represents the parsed URL segment group.\n *\n * See `UrlTree` for more information.\n *\n * @publicApi\n */\nexport class UrlSegmentGroup {\n  /** @internal */\n  // TODO(issue/24571): remove '!'.\n  _sourceSegment !: UrlSegmentGroup;\n  /** @internal */\n  // TODO(issue/24571): remove '!'.\n  _segmentIndexShift !: number;\n  /** The parent node in the url tree */\n  parent: UrlSegmentGroup|null = null;\n\n  constructor(\n      /** The URL segments of this group. See `UrlSegment` for more information */\n      public segments: UrlSegment[],\n      /** The list of children of this group */\n      public children: {[key: string]: UrlSegmentGroup}) {\n    forEach(children, (v: any, k: any) => v.parent = this);\n  }\n\n  /** Whether the segment has child segments */\n  hasChildren(): boolean { return this.numberOfChildren > 0; }\n\n  /** Number of child segments */\n  get numberOfChildren(): number { return Object.keys(this.children).length; }\n\n  /** @docsNotRequired */\n  toString(): string { return serializePaths(this); }\n}\n\n\n/**\n * @description\n *\n * Represents a single URL segment.\n *\n * A UrlSegment is a part of a URL between the two slashes. It contains a path and the matrix\n * parameters associated with the segment.\n *\n * @usageNotes\n *Â ### Example\n *\n * ```\n * @Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const tree: UrlTree = router.parseUrl('/team;id=33');\n *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];\n *     const s: UrlSegment[] = g.segments;\n *     s[0].path; // returns 'team'\n *     s[0].parameters; // returns {id: 33}\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nexport class UrlSegment {\n  /** @internal */\n  // TODO(issue/24571): remove '!'.\n  _parameterMap !: ParamMap;\n\n  constructor(\n      /** The path part of a URL segment */\n      public path: string,\n\n      /** The matrix parameters associated with a segment */\n      public parameters: {[name: string]: string}) {}\n\n  get parameterMap() {\n    if (!this._parameterMap) {\n      this._parameterMap = convertToParamMap(this.parameters);\n    }\n    return this._parameterMap;\n  }\n\n  /** @docsNotRequired */\n  toString(): string { return serializePath(this); }\n}\n\nexport function equalSegments(as: UrlSegment[], bs: UrlSegment[]): boolean {\n  return equalPath(as, bs) && as.every((a, i) => shallowEqual(a.parameters, bs[i].parameters));\n}\n\nexport function equalPath(as: UrlSegment[], bs: UrlSegment[]): boolean {\n  if (as.length !== bs.length) return false;\n  return as.every((a, i) => a.path === bs[i].path);\n}\n\nexport function mapChildrenIntoArray<T>(\n    segment: UrlSegmentGroup, fn: (v: UrlSegmentGroup, k: string) => T[]): T[] {\n  let res: T[] = [];\n  forEach(segment.children, (child: UrlSegmentGroup, childOutlet: string) => {\n    if (childOutlet === PRIMARY_OUTLET) {\n      res = res.concat(fn(child, childOutlet));\n    }\n  });\n  forEach(segment.children, (child: UrlSegmentGroup, childOutlet: string) => {\n    if (childOutlet !== PRIMARY_OUTLET) {\n      res = res.concat(fn(child, childOutlet));\n    }\n  });\n  return res;\n}\n\n\n/**\n * @description\n *\n * Serializes and deserializes a URL string into a URL tree.\n *\n * The url serialization strategy is customizable. You can\n * make all URLs case insensitive by providing a custom UrlSerializer.\n *\n * See `DefaultUrlSerializer` for an example of a URL serializer.\n *\n * @publicApi\n */\nexport abstract class UrlSerializer {\n  /** Parse a url into a `UrlTree` */\n  abstract parse(url: string): UrlTree;\n\n  /** Converts a `UrlTree` into a url */\n  abstract serialize(tree: UrlTree): string;\n}\n\n/**\n * @description\n *\n * A default implementation of the `UrlSerializer`.\n *\n * Example URLs:\n *\n * ```\n * /inbox/33(popup:compose)\n * /inbox/33;open=true/messages/44\n * ```\n *\n * DefaultUrlSerializer uses parentheses to serialize secondary segments (e.g., popup:compose), the\n * colon syntax to specify the outlet, and the ';parameter=value' syntax (e.g., open=true) to\n * specify route specific parameters.\n *\n * @publicApi\n */\nexport class DefaultUrlSerializer implements UrlSerializer {\n  /** Parses a url into a `UrlTree` */\n  parse(url: string): UrlTree {\n    const p = new UrlParser(url);\n    return new UrlTree(p.parseRootSegment(), p.parseQueryParams(), p.parseFragment());\n  }\n\n  /** Converts a `UrlTree` into a url */\n  serialize(tree: UrlTree): string {\n    const segment = `/${serializeSegment(tree.root, true)}`;\n    const query = serializeQueryParams(tree.queryParams);\n    const fragment =\n        typeof tree.fragment === `string` ? `#${encodeUriFragment(tree.fragment !)}` : '';\n\n    return `${segment}${query}${fragment}`;\n  }\n}\n\nconst DEFAULT_SERIALIZER = new DefaultUrlSerializer();\n\nexport function serializePaths(segment: UrlSegmentGroup): string {\n  return segment.segments.map(p => serializePath(p)).join('/');\n}\n\nfunction serializeSegment(segment: UrlSegmentGroup, root: boolean): string {\n  if (!segment.hasChildren()) {\n    return serializePaths(segment);\n  }\n\n  if (root) {\n    const primary = segment.children[PRIMARY_OUTLET] ?\n        serializeSegment(segment.children[PRIMARY_OUTLET], false) :\n        '';\n    const children: string[] = [];\n\n    forEach(segment.children, (v: UrlSegmentGroup, k: string) => {\n      if (k !== PRIMARY_OUTLET) {\n        children.push(`${k}:${serializeSegment(v, false)}`);\n      }\n    });\n\n    return children.length > 0 ? `${primary}(${children.join('//')})` : primary;\n\n  } else {\n    const children = mapChildrenIntoArray(segment, (v: UrlSegmentGroup, k: string) => {\n      if (k === PRIMARY_OUTLET) {\n        return [serializeSegment(segment.children[PRIMARY_OUTLET], false)];\n      }\n\n      return [`${k}:${serializeSegment(v, false)}`];\n\n    });\n\n    return `${serializePaths(segment)}/(${children.join('//')})`;\n  }\n}\n\n/**\n * Encodes a URI string with the default encoding. This function will only ever be called from\n * `encodeUriQuery` or `encodeUriSegment` as it's the base set of encodings to be used. We need\n * a custom encoding because encodeURIComponent is too aggressive and encodes stuff that doesn't\n * have to be encoded per https://url.spec.whatwg.org.\n */\nfunction encodeUriString(s: string): string {\n  return encodeURIComponent(s)\n      .replace(/%40/g, '@')\n      .replace(/%3A/gi, ':')\n      .replace(/%24/g, '$')\n      .replace(/%2C/gi, ',');\n}\n\n/**\n * This function should be used to encode both keys and values in a query string key/value. In\n * the following URL, you need to call encodeUriQuery on \"k\" and \"v\":\n *\n * http://www.site.org/html;mk=mv?k=v#f\n */\nexport function encodeUriQuery(s: string): string {\n  return encodeUriString(s).replace(/%3B/gi, ';');\n}\n\n/**\n * This function should be used to encode a URL fragment. In the following URL, you need to call\n * encodeUriFragment on \"f\":\n *\n * http://www.site.org/html;mk=mv?k=v#f\n */\nexport function encodeUriFragment(s: string): string {\n  return encodeURI(s);\n}\n\n/**\n * This function should be run on any URI segment as well as the key and value in a key/value\n * pair for matrix params. In the following URL, you need to call encodeUriSegment on \"html\",\n * \"mk\", and \"mv\":\n *\n * http://www.site.org/html;mk=mv?k=v#f\n */\nexport function encodeUriSegment(s: string): string {\n  return encodeUriString(s).replace(/\\(/g, '%28').replace(/\\)/g, '%29').replace(/%26/gi, '&');\n}\n\nexport function decode(s: string): string {\n  return decodeURIComponent(s);\n}\n\n// Query keys/values should have the \"+\" replaced first, as \"+\" in a query string is \" \".\n// decodeURIComponent function will not decode \"+\" as a space.\nexport function decodeQuery(s: string): string {\n  return decode(s.replace(/\\+/g, '%20'));\n}\n\nexport function serializePath(path: UrlSegment): string {\n  return `${encodeUriSegment(path.path)}${serializeMatrixParams(path.parameters)}`;\n}\n\nfunction serializeMatrixParams(params: {[key: string]: string}): string {\n  return Object.keys(params)\n      .map(key => `;${encodeUriSegment(key)}=${encodeUriSegment(params[key])}`)\n      .join('');\n}\n\nfunction serializeQueryParams(params: {[key: string]: any}): string {\n  const strParams: string[] = Object.keys(params).map((name) => {\n    const value = params[name];\n    return Array.isArray(value) ?\n        value.map(v => `${encodeUriQuery(name)}=${encodeUriQuery(v)}`).join('&') :\n        `${encodeUriQuery(name)}=${encodeUriQuery(value)}`;\n  });\n\n  return strParams.length ? `?${strParams.join(\"&\")}` : '';\n}\n\nconst SEGMENT_RE = /^[^\\/()?;=#]+/;\nfunction matchSegments(str: string): string {\n  const match = str.match(SEGMENT_RE);\n  return match ? match[0] : '';\n}\n\nconst QUERY_PARAM_RE = /^[^=?&#]+/;\n// Return the name of the query param at the start of the string or an empty string\nfunction matchQueryParams(str: string): string {\n  const match = str.match(QUERY_PARAM_RE);\n  return match ? match[0] : '';\n}\n\nconst QUERY_PARAM_VALUE_RE = /^[^?&#]+/;\n// Return the value of the query param at the start of the string or an empty string\nfunction matchUrlQueryParamValue(str: string): string {\n  const match = str.match(QUERY_PARAM_VALUE_RE);\n  return match ? match[0] : '';\n}\n\nclass UrlParser {\n  private remaining: string;\n\n  constructor(private url: string) { this.remaining = url; }\n\n  parseRootSegment(): UrlSegmentGroup {\n    this.consumeOptional('/');\n\n    if (this.remaining === '' || this.peekStartsWith('?') || this.peekStartsWith('#')) {\n      return new UrlSegmentGroup([], {});\n    }\n\n    // The root segment group never has segments\n    return new UrlSegmentGroup([], this.parseChildren());\n  }\n\n  parseQueryParams(): Params {\n    const params: Params = {};\n    if (this.consumeOptional('?')) {\n      do {\n        this.parseQueryParam(params);\n      } while (this.consumeOptional('&'));\n    }\n    return params;\n  }\n\n  parseFragment(): string|null {\n    return this.consumeOptional('#') ? decodeURIComponent(this.remaining) : null;\n  }\n\n  private parseChildren(): {[outlet: string]: UrlSegmentGroup} {\n    if (this.remaining === '') {\n      return {};\n    }\n\n    this.consumeOptional('/');\n\n    const segments: UrlSegment[] = [];\n    if (!this.peekStartsWith('(')) {\n      segments.push(this.parseSegment());\n    }\n\n    while (this.peekStartsWith('/') && !this.peekStartsWith('//') && !this.peekStartsWith('/(')) {\n      this.capture('/');\n      segments.push(this.parseSegment());\n    }\n\n    let children: {[outlet: string]: UrlSegmentGroup} = {};\n    if (this.peekStartsWith('/(')) {\n      this.capture('/');\n      children = this.parseParens(true);\n    }\n\n    let res: {[outlet: string]: UrlSegmentGroup} = {};\n    if (this.peekStartsWith('(')) {\n      res = this.parseParens(false);\n    }\n\n    if (segments.length > 0 || Object.keys(children).length > 0) {\n      res[PRIMARY_OUTLET] = new UrlSegmentGroup(segments, children);\n    }\n\n    return res;\n  }\n\n  // parse a segment with its matrix parameters\n  // ie `name;k1=v1;k2`\n  private parseSegment(): UrlSegment {\n    const path = matchSegments(this.remaining);\n    if (path === '' && this.peekStartsWith(';')) {\n      throw new Error(`Empty path url segment cannot have parameters: '${this.remaining}'.`);\n    }\n\n    this.capture(path);\n    return new UrlSegment(decode(path), this.parseMatrixParams());\n  }\n\n  private parseMatrixParams(): {[key: string]: any} {\n    const params: {[key: string]: any} = {};\n    while (this.consumeOptional(';')) {\n      this.parseParam(params);\n    }\n    return params;\n  }\n\n  private parseParam(params: {[key: string]: any}): void {\n    const key = matchSegments(this.remaining);\n    if (!key) {\n      return;\n    }\n    this.capture(key);\n    let value: any = '';\n    if (this.consumeOptional('=')) {\n      const valueMatch = matchSegments(this.remaining);\n      if (valueMatch) {\n        value = valueMatch;\n        this.capture(value);\n      }\n    }\n\n    params[decode(key)] = decode(value);\n  }\n\n  // Parse a single query parameter `name[=value]`\n  private parseQueryParam(params: Params): void {\n    const key = matchQueryParams(this.remaining);\n    if (!key) {\n      return;\n    }\n    this.capture(key);\n    let value: any = '';\n    if (this.consumeOptional('=')) {\n      const valueMatch = matchUrlQueryParamValue(this.remaining);\n      if (valueMatch) {\n        value = valueMatch;\n        this.capture(value);\n      }\n    }\n\n    const decodedKey = decodeQuery(key);\n    const decodedVal = decodeQuery(value);\n\n    if (params.hasOwnProperty(decodedKey)) {\n      // Append to existing values\n      let currentVal = params[decodedKey];\n      if (!Array.isArray(currentVal)) {\n        currentVal = [currentVal];\n        params[decodedKey] = currentVal;\n      }\n      currentVal.push(decodedVal);\n    } else {\n      // Create a new value\n      params[decodedKey] = decodedVal;\n    }\n  }\n\n  // parse `(a/b//outlet_name:c/d)`\n  private parseParens(allowPrimary: boolean): {[outlet: string]: UrlSegmentGroup} {\n    const segments: {[key: string]: UrlSegmentGroup} = {};\n    this.capture('(');\n\n    while (!this.consumeOptional(')') && this.remaining.length > 0) {\n      const path = matchSegments(this.remaining);\n\n      const next = this.remaining[path.length];\n\n      // if is is not one of these characters, then the segment was unescaped\n      // or the group was not closed\n      if (next !== '/' && next !== ')' && next !== ';') {\n        throw new Error(`Cannot parse url '${this.url}'`);\n      }\n\n      let outletName: string = undefined !;\n      if (path.indexOf(':') > -1) {\n        outletName = path.substr(0, path.indexOf(':'));\n        this.capture(outletName);\n        this.capture(':');\n      } else if (allowPrimary) {\n        outletName = PRIMARY_OUTLET;\n      }\n\n      const children = this.parseChildren();\n      segments[outletName] = Object.keys(children).length === 1 ? children[PRIMARY_OUTLET] :\n                                                                  new UrlSegmentGroup([], children);\n      this.consumeOptional('//');\n    }\n\n    return segments;\n  }\n\n  private peekStartsWith(str: string): boolean { return this.remaining.startsWith(str); }\n\n  // Consumes the prefix when it is present and returns whether it has been consumed\n  private consumeOptional(str: string): boolean {\n    if (this.peekStartsWith(str)) {\n      this.remaining = this.remaining.substring(str.length);\n      return true;\n    }\n    return false;\n  }\n\n  private capture(str: string): void {\n    if (!this.consumeOptional(str)) {\n      throw new Error(`Expected \"${str}\".`);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport class Tree<T> {\n  /** @internal */\n  _root: TreeNode<T>;\n\n  constructor(root: TreeNode<T>) { this._root = root; }\n\n  get root(): T { return this._root.value; }\n\n  /**\n   * @internal\n   */\n  parent(t: T): T|null {\n    const p = this.pathFromRoot(t);\n    return p.length > 1 ? p[p.length - 2] : null;\n  }\n\n  /**\n   * @internal\n   */\n  children(t: T): T[] {\n    const n = findNode(t, this._root);\n    return n ? n.children.map(t => t.value) : [];\n  }\n\n  /**\n   * @internal\n   */\n  firstChild(t: T): T|null {\n    const n = findNode(t, this._root);\n    return n && n.children.length > 0 ? n.children[0].value : null;\n  }\n\n  /**\n   * @internal\n   */\n  siblings(t: T): T[] {\n    const p = findPath(t, this._root);\n    if (p.length < 2) return [];\n\n    const c = p[p.length - 2].children.map(c => c.value);\n    return c.filter(cc => cc !== t);\n  }\n\n  /**\n   * @internal\n   */\n  pathFromRoot(t: T): T[] { return findPath(t, this._root).map(s => s.value); }\n}\n\n\n// DFS for the node matching the value\nfunction findNode<T>(value: T, node: TreeNode<T>): TreeNode<T>|null {\n  if (value === node.value) return node;\n\n  for (const child of node.children) {\n    const node = findNode(value, child);\n    if (node) return node;\n  }\n\n  return null;\n}\n\n// Return the path to the node with the given value using DFS\nfunction findPath<T>(value: T, node: TreeNode<T>): TreeNode<T>[] {\n  if (value === node.value) return [node];\n\n  for (const child of node.children) {\n    const path = findPath(value, child);\n    if (path.length) {\n      path.unshift(node);\n      return path;\n    }\n  }\n\n  return [];\n}\n\nexport class TreeNode<T> {\n  constructor(public value: T, public children: TreeNode<T>[]) {}\n\n  toString(): string { return `TreeNode(${this.value})`; }\n}\n\n// Return the list of T indexed by outlet name\nexport function nodeChildrenAsMap<T extends{outlet: string}>(node: TreeNode<T>| null) {\n  const map: {[outlet: string]: TreeNode<T>} = {};\n\n  if (node) {\n    node.children.forEach(child => map[child.value.outlet] = child);\n  }\n\n  return map;\n}","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '@angular/core';\nimport {BehaviorSubject, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\nimport {Data, ResolveData, Route} from './config';\nimport {PRIMARY_OUTLET, ParamMap, Params, convertToParamMap} from './shared';\nimport {UrlSegment, UrlSegmentGroup, UrlTree, equalSegments} from './url_tree';\nimport {shallowEqual, shallowEqualArrays} from './utils/collection';\nimport {Tree, TreeNode} from './utils/tree';\n\n\n\n/**\n * Represents the state of the router as a tree of activated routes.\n *\n * @usageNotes\n *\n * Every node in the route tree is an `ActivatedRoute` instance\n * that knows about the \"consumed\" URL segments, the extracted parameters,\n * and the resolved data.\n * Use the `ActivatedRoute` properties to traverse the tree from any node.\n *\n * ### Example\n *\n * ```\n * @Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const state: RouterState = router.routerState;\n *     const root: ActivatedRoute = state.root;\n *     const child = root.firstChild;\n *     const id: Observable<string> = child.params.map(p => p.id);\n *     //...\n *   }\n * }\n * ```\n *\n * @see `ActivatedRoute`\n *\n * @publicApi\n */\nexport class RouterState extends Tree<ActivatedRoute> {\n  /** @internal */\n  constructor(\n      root: TreeNode<ActivatedRoute>,\n      /** The current snapshot of the router state */\n      public snapshot: RouterStateSnapshot) {\n    super(root);\n    setRouterState(<RouterState>this, root);\n  }\n\n  toString(): string { return this.snapshot.toString(); }\n}\n\nexport function createEmptyState(urlTree: UrlTree, rootComponent: Type<any>| null): RouterState {\n  const snapshot = createEmptyStateSnapshot(urlTree, rootComponent);\n  const emptyUrl = new BehaviorSubject([new UrlSegment('', {})]);\n  const emptyParams = new BehaviorSubject({});\n  const emptyData = new BehaviorSubject({});\n  const emptyQueryParams = new BehaviorSubject({});\n  const fragment = new BehaviorSubject('');\n  const activated = new ActivatedRoute(\n      emptyUrl, emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent,\n      snapshot.root);\n  activated.snapshot = snapshot.root;\n  return new RouterState(new TreeNode<ActivatedRoute>(activated, []), snapshot);\n}\n\nexport function createEmptyStateSnapshot(\n    urlTree: UrlTree, rootComponent: Type<any>| null): RouterStateSnapshot {\n  const emptyParams = {};\n  const emptyData = {};\n  const emptyQueryParams = {};\n  const fragment = '';\n  const activated = new ActivatedRouteSnapshot(\n      [], emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, null,\n      urlTree.root, -1, {});\n  return new RouterStateSnapshot('', new TreeNode<ActivatedRouteSnapshot>(activated, []));\n}\n\n/**\n * Provides access to information about a route associated with a component\n * that is loaded in an outlet.\n * Use to traverse the `RouterState` tree and extract information from nodes.\n *\n * {@example router/activated-route/module.ts region=\"activated-route\"\n *     header=\"activated-route.component.ts\"}\n *\n * @publicApi\n */\nexport class ActivatedRoute {\n  /** The current snapshot of this route */\n  snapshot !: ActivatedRouteSnapshot;\n  /** @internal */\n  _futureSnapshot: ActivatedRouteSnapshot;\n  /** @internal */\n  _routerState !: RouterState;\n  /** @internal */\n  _paramMap !: Observable<ParamMap>;\n  /** @internal */\n  _queryParamMap !: Observable<ParamMap>;\n\n  /** @internal */\n  constructor(\n      /** An observable of the URL segments matched by this route. */\n      public url: Observable<UrlSegment[]>,\n      /** An observable of the matrix parameters scoped to this route. */\n      public params: Observable<Params>,\n      /** An observable of the query parameters shared by all the routes. */\n      public queryParams: Observable<Params>,\n      /** An observable of the URL fragment shared by all the routes. */\n      public fragment: Observable<string>,\n      /** An observable of the static and resolved data of this route. */\n      public data: Observable<Data>,\n      /** The outlet name of the route, a constant. */\n      public outlet: string,\n      /** The component of the route, a constant. */\n      // TODO(vsavkin): remove |string\n      public component: Type<any>|string|null, futureSnapshot: ActivatedRouteSnapshot) {\n    this._futureSnapshot = futureSnapshot;\n  }\n\n  /** The configuration used to match this route. */\n  get routeConfig(): Route|null { return this._futureSnapshot.routeConfig; }\n\n  /** The root of the router state. */\n  get root(): ActivatedRoute { return this._routerState.root; }\n\n  /** The parent of this route in the router state tree. */\n  get parent(): ActivatedRoute|null { return this._routerState.parent(this); }\n\n  /** The first child of this route in the router state tree. */\n  get firstChild(): ActivatedRoute|null { return this._routerState.firstChild(this); }\n\n  /** The children of this route in the router state tree. */\n  get children(): ActivatedRoute[] { return this._routerState.children(this); }\n\n  /** The path from the root of the router state tree to this route. */\n  get pathFromRoot(): ActivatedRoute[] { return this._routerState.pathFromRoot(this); }\n\n  /** An Observable that contains a map of the required and optional parameters\n   * specific to the route.\n   * The map supports retrieving single and multiple values from the same parameter. */\n  get paramMap(): Observable<ParamMap> {\n    if (!this._paramMap) {\n      this._paramMap = this.params.pipe(map((p: Params): ParamMap => convertToParamMap(p)));\n    }\n    return this._paramMap;\n  }\n\n  /**\n   * An Observable that contains a map of the query parameters available to all routes.\n   * The map supports retrieving single and multiple values from the query parameter.\n   */\n  get queryParamMap(): Observable<ParamMap> {\n    if (!this._queryParamMap) {\n      this._queryParamMap =\n          this.queryParams.pipe(map((p: Params): ParamMap => convertToParamMap(p)));\n    }\n    return this._queryParamMap;\n  }\n\n  toString(): string {\n    return this.snapshot ? this.snapshot.toString() : `Future(${this._futureSnapshot})`;\n  }\n}\n\nexport type ParamsInheritanceStrategy = 'emptyOnly' | 'always';\n\n/** @internal */\nexport type Inherited = {\n  params: Params,\n  data: Data,\n  resolve: Data,\n};\n\n/**\n * Returns the inherited params, data, and resolve for a given route.\n * By default, this only inherits values up to the nearest path-less or component-less route.\n * @internal\n */\nexport function inheritedParamsDataResolve(\n    route: ActivatedRouteSnapshot,\n    paramsInheritanceStrategy: ParamsInheritanceStrategy = 'emptyOnly'): Inherited {\n  const pathFromRoot = route.pathFromRoot;\n\n  let inheritingStartingFrom = 0;\n  if (paramsInheritanceStrategy !== 'always') {\n    inheritingStartingFrom = pathFromRoot.length - 1;\n\n    while (inheritingStartingFrom >= 1) {\n      const current = pathFromRoot[inheritingStartingFrom];\n      const parent = pathFromRoot[inheritingStartingFrom - 1];\n      // current route is an empty path => inherits its parent's params and data\n      if (current.routeConfig && current.routeConfig.path === '') {\n        inheritingStartingFrom--;\n\n        // parent is componentless => current route should inherit its params and data\n      } else if (!parent.component) {\n        inheritingStartingFrom--;\n\n      } else {\n        break;\n      }\n    }\n  }\n\n  return flattenInherited(pathFromRoot.slice(inheritingStartingFrom));\n}\n\n/** @internal */\nfunction flattenInherited(pathFromRoot: ActivatedRouteSnapshot[]): Inherited {\n  return pathFromRoot.reduce((res, curr) => {\n    const params = {...res.params, ...curr.params};\n    const data = {...res.data, ...curr.data};\n    const resolve = {...res.resolve, ...curr._resolvedData};\n    return {params, data, resolve};\n  }, <any>{params: {}, data: {}, resolve: {}});\n}\n\n/**\n * @description\n *\n * Contains the information about a route associated with a component loaded in an\n * outlet at a particular moment in time. ActivatedRouteSnapshot can also be used to\n * traverse the router state tree.\n *\n * ```\n * @Component({templateUrl:'./my-component.html'})\n * class MyComponent {\n *   constructor(route: ActivatedRoute) {\n *     const id: string = route.snapshot.params.id;\n *     const url: string = route.snapshot.url.join('');\n *     const user = route.snapshot.data.user;\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nexport class ActivatedRouteSnapshot {\n  /** The configuration used to match this route **/\n  public readonly routeConfig: Route|null;\n  /** @internal **/\n  _urlSegment: UrlSegmentGroup;\n  /** @internal */\n  _lastPathIndex: number;\n  /** @internal */\n  _resolve: ResolveData;\n  /** @internal */\n  // TODO(issue/24571): remove '!'.\n  _resolvedData !: Data;\n  /** @internal */\n  // TODO(issue/24571): remove '!'.\n  _routerState !: RouterStateSnapshot;\n  /** @internal */\n  // TODO(issue/24571): remove '!'.\n  _paramMap !: ParamMap;\n  /** @internal */\n  // TODO(issue/24571): remove '!'.\n  _queryParamMap !: ParamMap;\n\n  /** @internal */\n  constructor(\n      /** The URL segments matched by this route */\n      public url: UrlSegment[],\n      /** The matrix parameters scoped to this route */\n      public params: Params,\n      /** The query parameters shared by all the routes */\n      public queryParams: Params,\n      /** The URL fragment shared by all the routes */\n      public fragment: string,\n      /** The static and resolved data of this route */\n      public data: Data,\n      /** The outlet name of the route */\n      public outlet: string,\n      /** The component of the route */\n      public component: Type<any>|string|null, routeConfig: Route|null, urlSegment: UrlSegmentGroup,\n      lastPathIndex: number, resolve: ResolveData) {\n    this.routeConfig = routeConfig;\n    this._urlSegment = urlSegment;\n    this._lastPathIndex = lastPathIndex;\n    this._resolve = resolve;\n  }\n\n  /** The root of the router state */\n  get root(): ActivatedRouteSnapshot { return this._routerState.root; }\n\n  /** The parent of this route in the router state tree */\n  get parent(): ActivatedRouteSnapshot|null { return this._routerState.parent(this); }\n\n  /** The first child of this route in the router state tree */\n  get firstChild(): ActivatedRouteSnapshot|null { return this._routerState.firstChild(this); }\n\n  /** The children of this route in the router state tree */\n  get children(): ActivatedRouteSnapshot[] { return this._routerState.children(this); }\n\n  /** The path from the root of the router state tree to this route */\n  get pathFromRoot(): ActivatedRouteSnapshot[] { return this._routerState.pathFromRoot(this); }\n\n  get paramMap(): ParamMap {\n    if (!this._paramMap) {\n      this._paramMap = convertToParamMap(this.params);\n    }\n    return this._paramMap;\n  }\n\n  get queryParamMap(): ParamMap {\n    if (!this._queryParamMap) {\n      this._queryParamMap = convertToParamMap(this.queryParams);\n    }\n    return this._queryParamMap;\n  }\n\n  toString(): string {\n    const url = this.url.map(segment => segment.toString()).join('/');\n    const matched = this.routeConfig ? this.routeConfig.path : '';\n    return `Route(url:'${url}', path:'${matched}')`;\n  }\n}\n\n/**\n * @description\n *\n * Represents the state of the router at a moment in time.\n *\n * This is a tree of activated route snapshots. Every node in this tree knows about\n * the \"consumed\" URL segments, the extracted parameters, and the resolved data.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * @Component({templateUrl:'template.html'})\n * class MyComponent {\n *   constructor(router: Router) {\n *     const state: RouterState = router.routerState;\n *     const snapshot: RouterStateSnapshot = state.snapshot;\n *     const root: ActivatedRouteSnapshot = snapshot.root;\n *     const child = root.firstChild;\n *     const id: Observable<string> = child.params.map(p => p.id);\n *     //...\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nexport class RouterStateSnapshot extends Tree<ActivatedRouteSnapshot> {\n  /** @internal */\n  constructor(\n      /** The url from which this snapshot was created */\n      public url: string, root: TreeNode<ActivatedRouteSnapshot>) {\n    super(root);\n    setRouterState(<RouterStateSnapshot>this, root);\n  }\n\n  toString(): string { return serializeNode(this._root); }\n}\n\nfunction setRouterState<U, T extends{_routerState: U}>(state: U, node: TreeNode<T>): void {\n  node.value._routerState = state;\n  node.children.forEach(c => setRouterState(state, c));\n}\n\nfunction serializeNode(node: TreeNode<ActivatedRouteSnapshot>): string {\n  const c = node.children.length > 0 ? ` { ${node.children.map(serializeNode).join(', ')} } ` : '';\n  return `${node.value}${c}`;\n}\n\n/**\n * The expectation is that the activate route is created with the right set of parameters.\n * So we push new values into the observables only when they are not the initial values.\n * And we detect that by checking if the snapshot field is set.\n */\nexport function advanceActivatedRoute(route: ActivatedRoute): void {\n  if (route.snapshot) {\n    const currentSnapshot = route.snapshot;\n    const nextSnapshot = route._futureSnapshot;\n    route.snapshot = nextSnapshot;\n    if (!shallowEqual(currentSnapshot.queryParams, nextSnapshot.queryParams)) {\n      (<any>route.queryParams).next(nextSnapshot.queryParams);\n    }\n    if (currentSnapshot.fragment !== nextSnapshot.fragment) {\n      (<any>route.fragment).next(nextSnapshot.fragment);\n    }\n    if (!shallowEqual(currentSnapshot.params, nextSnapshot.params)) {\n      (<any>route.params).next(nextSnapshot.params);\n    }\n    if (!shallowEqualArrays(currentSnapshot.url, nextSnapshot.url)) {\n      (<any>route.url).next(nextSnapshot.url);\n    }\n    if (!shallowEqual(currentSnapshot.data, nextSnapshot.data)) {\n      (<any>route.data).next(nextSnapshot.data);\n    }\n  } else {\n    route.snapshot = route._futureSnapshot;\n\n    // this is for resolved data\n    (<any>route.data).next(route._futureSnapshot.data);\n  }\n}\n\n\nexport function equalParamsAndUrlSegments(\n    a: ActivatedRouteSnapshot, b: ActivatedRouteSnapshot): boolean {\n  const equalUrlParams = shallowEqual(a.params, b.params) && equalSegments(a.url, b.url);\n  const parentsMismatch = !a.parent !== !b.parent;\n\n  return equalUrlParams && !parentsMismatch &&\n      (!a.parent || equalParamsAndUrlSegments(a.parent, b.parent !));\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BehaviorSubject} from 'rxjs';\n\nimport {DetachedRouteHandleInternal, RouteReuseStrategy} from './route_reuse_strategy';\nimport {ActivatedRoute, ActivatedRouteSnapshot, RouterState, RouterStateSnapshot} from './router_state';\nimport {TreeNode} from './utils/tree';\n\nexport function createRouterState(\n    routeReuseStrategy: RouteReuseStrategy, curr: RouterStateSnapshot,\n    prevState: RouterState): RouterState {\n  const root = createNode(routeReuseStrategy, curr._root, prevState ? prevState._root : undefined);\n  return new RouterState(root, curr);\n}\n\nfunction createNode(\n    routeReuseStrategy: RouteReuseStrategy, curr: TreeNode<ActivatedRouteSnapshot>,\n    prevState?: TreeNode<ActivatedRoute>): TreeNode<ActivatedRoute> {\n  // reuse an activated route that is currently displayed on the screen\n  if (prevState && routeReuseStrategy.shouldReuseRoute(curr.value, prevState.value.snapshot)) {\n    const value = prevState.value;\n    value._futureSnapshot = curr.value;\n    const children = createOrReuseChildren(routeReuseStrategy, curr, prevState);\n    return new TreeNode<ActivatedRoute>(value, children);\n\n    // retrieve an activated route that is used to be displayed, but is not currently displayed\n  } else {\n    const detachedRouteHandle =\n        <DetachedRouteHandleInternal>routeReuseStrategy.retrieve(curr.value);\n    if (detachedRouteHandle) {\n      const tree: TreeNode<ActivatedRoute> = detachedRouteHandle.route;\n      setFutureSnapshotsOfActivatedRoutes(curr, tree);\n      return tree;\n\n    } else {\n      const value = createActivatedRoute(curr.value);\n      const children = curr.children.map(c => createNode(routeReuseStrategy, c));\n      return new TreeNode<ActivatedRoute>(value, children);\n    }\n  }\n}\n\nfunction setFutureSnapshotsOfActivatedRoutes(\n    curr: TreeNode<ActivatedRouteSnapshot>, result: TreeNode<ActivatedRoute>): void {\n  if (curr.value.routeConfig !== result.value.routeConfig) {\n    throw new Error('Cannot reattach ActivatedRouteSnapshot created from a different route');\n  }\n  if (curr.children.length !== result.children.length) {\n    throw new Error('Cannot reattach ActivatedRouteSnapshot with a different number of children');\n  }\n  result.value._futureSnapshot = curr.value;\n  for (let i = 0; i < curr.children.length; ++i) {\n    setFutureSnapshotsOfActivatedRoutes(curr.children[i], result.children[i]);\n  }\n}\n\nfunction createOrReuseChildren(\n    routeReuseStrategy: RouteReuseStrategy, curr: TreeNode<ActivatedRouteSnapshot>,\n    prevState: TreeNode<ActivatedRoute>) {\n  return curr.children.map(child => {\n    for (const p of prevState.children) {\n      if (routeReuseStrategy.shouldReuseRoute(p.value.snapshot, child.value)) {\n        return createNode(routeReuseStrategy, child, p);\n      }\n    }\n    return createNode(routeReuseStrategy, child);\n  });\n}\n\nfunction createActivatedRoute(c: ActivatedRouteSnapshot) {\n  return new ActivatedRoute(\n      new BehaviorSubject(c.url), new BehaviorSubject(c.params), new BehaviorSubject(c.queryParams),\n      new BehaviorSubject(c.fragment), new BehaviorSubject(c.data), c.outlet, c.component, c);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActivatedRoute} from './router_state';\nimport {PRIMARY_OUTLET, Params} from './shared';\nimport {UrlSegment, UrlSegmentGroup, UrlTree} from './url_tree';\nimport {forEach, last, shallowEqual} from './utils/collection';\n\nexport function createUrlTree(\n    route: ActivatedRoute, urlTree: UrlTree, commands: any[], queryParams: Params,\n    fragment: string): UrlTree {\n  if (commands.length === 0) {\n    return tree(urlTree.root, urlTree.root, urlTree, queryParams, fragment);\n  }\n\n  const nav = computeNavigation(commands);\n\n  if (nav.toRoot()) {\n    return tree(urlTree.root, new UrlSegmentGroup([], {}), urlTree, queryParams, fragment);\n  }\n\n  const startingPosition = findStartingPosition(nav, urlTree, route);\n\n  const segmentGroup = startingPosition.processChildren ?\n      updateSegmentGroupChildren(\n          startingPosition.segmentGroup, startingPosition.index, nav.commands) :\n      updateSegmentGroup(startingPosition.segmentGroup, startingPosition.index, nav.commands);\n  return tree(startingPosition.segmentGroup, segmentGroup, urlTree, queryParams, fragment);\n}\n\nfunction isMatrixParams(command: any): boolean {\n  return typeof command === 'object' && command != null && !command.outlets && !command.segmentPath;\n}\n\nfunction tree(\n    oldSegmentGroup: UrlSegmentGroup, newSegmentGroup: UrlSegmentGroup, urlTree: UrlTree,\n    queryParams: Params, fragment: string): UrlTree {\n  let qp: any = {};\n  if (queryParams) {\n    forEach(queryParams, (value: any, name: any) => {\n      qp[name] = Array.isArray(value) ? value.map((v: any) => `${v}`) : `${value}`;\n    });\n  }\n\n  if (urlTree.root === oldSegmentGroup) {\n    return new UrlTree(newSegmentGroup, qp, fragment);\n  }\n\n  return new UrlTree(replaceSegment(urlTree.root, oldSegmentGroup, newSegmentGroup), qp, fragment);\n}\n\nfunction replaceSegment(\n    current: UrlSegmentGroup, oldSegment: UrlSegmentGroup,\n    newSegment: UrlSegmentGroup): UrlSegmentGroup {\n  const children: {[key: string]: UrlSegmentGroup} = {};\n  forEach(current.children, (c: UrlSegmentGroup, outletName: string) => {\n    if (c === oldSegment) {\n      children[outletName] = newSegment;\n    } else {\n      children[outletName] = replaceSegment(c, oldSegment, newSegment);\n    }\n  });\n  return new UrlSegmentGroup(current.segments, children);\n}\n\nclass Navigation {\n  constructor(\n      public isAbsolute: boolean, public numberOfDoubleDots: number, public commands: any[]) {\n    if (isAbsolute && commands.length > 0 && isMatrixParams(commands[0])) {\n      throw new Error('Root segment cannot have matrix parameters');\n    }\n\n    const cmdWithOutlet = commands.find(c => typeof c === 'object' && c != null && c.outlets);\n    if (cmdWithOutlet && cmdWithOutlet !== last(commands)) {\n      throw new Error('{outlets:{}} has to be the last command');\n    }\n  }\n\n  public toRoot(): boolean {\n    return this.isAbsolute && this.commands.length === 1 && this.commands[0] == '/';\n  }\n}\n\n/** Transforms commands to a normalized `Navigation` */\nfunction computeNavigation(commands: any[]): Navigation {\n  if ((typeof commands[0] === 'string') && commands.length === 1 && commands[0] === '/') {\n    return new Navigation(true, 0, commands);\n  }\n\n  let numberOfDoubleDots = 0;\n  let isAbsolute = false;\n\n  const res: any[] = commands.reduce((res, cmd, cmdIdx) => {\n    if (typeof cmd === 'object' && cmd != null) {\n      if (cmd.outlets) {\n        const outlets: {[k: string]: any} = {};\n        forEach(cmd.outlets, (commands: any, name: string) => {\n          outlets[name] = typeof commands === 'string' ? commands.split('/') : commands;\n        });\n        return [...res, {outlets}];\n      }\n\n      if (cmd.segmentPath) {\n        return [...res, cmd.segmentPath];\n      }\n    }\n\n    if (!(typeof cmd === 'string')) {\n      return [...res, cmd];\n    }\n\n    if (cmdIdx === 0) {\n      cmd.split('/').forEach((urlPart, partIndex) => {\n        if (partIndex == 0 && urlPart === '.') {\n          // skip './a'\n        } else if (partIndex == 0 && urlPart === '') {  //  '/a'\n          isAbsolute = true;\n        } else if (urlPart === '..') {  //  '../a'\n          numberOfDoubleDots++;\n        } else if (urlPart != '') {\n          res.push(urlPart);\n        }\n      });\n\n      return res;\n    }\n\n    return [...res, cmd];\n  }, []);\n\n  return new Navigation(isAbsolute, numberOfDoubleDots, res);\n}\n\nclass Position {\n  constructor(\n      public segmentGroup: UrlSegmentGroup, public processChildren: boolean, public index: number) {\n  }\n}\n\nfunction findStartingPosition(nav: Navigation, tree: UrlTree, route: ActivatedRoute): Position {\n  if (nav.isAbsolute) {\n    return new Position(tree.root, true, 0);\n  }\n\n  if (route.snapshot._lastPathIndex === -1) {\n    return new Position(route.snapshot._urlSegment, true, 0);\n  }\n\n  const modifier = isMatrixParams(nav.commands[0]) ? 0 : 1;\n  const index = route.snapshot._lastPathIndex + modifier;\n  return createPositionApplyingDoubleDots(\n      route.snapshot._urlSegment, index, nav.numberOfDoubleDots);\n}\n\nfunction createPositionApplyingDoubleDots(\n    group: UrlSegmentGroup, index: number, numberOfDoubleDots: number): Position {\n  let g = group;\n  let ci = index;\n  let dd = numberOfDoubleDots;\n  while (dd > ci) {\n    dd -= ci;\n    g = g.parent !;\n    if (!g) {\n      throw new Error('Invalid number of \\'../\\'');\n    }\n    ci = g.segments.length;\n  }\n  return new Position(g, false, ci - dd);\n}\n\nfunction getPath(command: any): any {\n  if (typeof command === 'object' && command != null && command.outlets) {\n    return command.outlets[PRIMARY_OUTLET];\n  }\n  return `${command}`;\n}\n\nfunction getOutlets(commands: any[]): {[k: string]: any[]} {\n  if (!(typeof commands[0] === 'object')) return {[PRIMARY_OUTLET]: commands};\n  if (commands[0].outlets === undefined) return {[PRIMARY_OUTLET]: commands};\n  return commands[0].outlets;\n}\n\nfunction updateSegmentGroup(\n    segmentGroup: UrlSegmentGroup, startIndex: number, commands: any[]): UrlSegmentGroup {\n  if (!segmentGroup) {\n    segmentGroup = new UrlSegmentGroup([], {});\n  }\n  if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n    return updateSegmentGroupChildren(segmentGroup, startIndex, commands);\n  }\n\n  const m = prefixedWith(segmentGroup, startIndex, commands);\n  const slicedCommands = commands.slice(m.commandIndex);\n  if (m.match && m.pathIndex < segmentGroup.segments.length) {\n    const g = new UrlSegmentGroup(segmentGroup.segments.slice(0, m.pathIndex), {});\n    g.children[PRIMARY_OUTLET] =\n        new UrlSegmentGroup(segmentGroup.segments.slice(m.pathIndex), segmentGroup.children);\n    return updateSegmentGroupChildren(g, 0, slicedCommands);\n  } else if (m.match && slicedCommands.length === 0) {\n    return new UrlSegmentGroup(segmentGroup.segments, {});\n  } else if (m.match && !segmentGroup.hasChildren()) {\n    return createNewSegmentGroup(segmentGroup, startIndex, commands);\n  } else if (m.match) {\n    return updateSegmentGroupChildren(segmentGroup, 0, slicedCommands);\n  } else {\n    return createNewSegmentGroup(segmentGroup, startIndex, commands);\n  }\n}\n\nfunction updateSegmentGroupChildren(\n    segmentGroup: UrlSegmentGroup, startIndex: number, commands: any[]): UrlSegmentGroup {\n  if (commands.length === 0) {\n    return new UrlSegmentGroup(segmentGroup.segments, {});\n  } else {\n    const outlets = getOutlets(commands);\n    const children: {[key: string]: UrlSegmentGroup} = {};\n\n    forEach(outlets, (commands: any, outlet: string) => {\n      if (commands !== null) {\n        children[outlet] = updateSegmentGroup(segmentGroup.children[outlet], startIndex, commands);\n      }\n    });\n\n    forEach(segmentGroup.children, (child: UrlSegmentGroup, childOutlet: string) => {\n      if (outlets[childOutlet] === undefined) {\n        children[childOutlet] = child;\n      }\n    });\n    return new UrlSegmentGroup(segmentGroup.segments, children);\n  }\n}\n\nfunction prefixedWith(segmentGroup: UrlSegmentGroup, startIndex: number, commands: any[]) {\n  let currentCommandIndex = 0;\n  let currentPathIndex = startIndex;\n\n  const noMatch = {match: false, pathIndex: 0, commandIndex: 0};\n  while (currentPathIndex < segmentGroup.segments.length) {\n    if (currentCommandIndex >= commands.length) return noMatch;\n    const path = segmentGroup.segments[currentPathIndex];\n    const curr = getPath(commands[currentCommandIndex]);\n    const next =\n        currentCommandIndex < commands.length - 1 ? commands[currentCommandIndex + 1] : null;\n\n    if (currentPathIndex > 0 && curr === undefined) break;\n\n    if (curr && next && (typeof next === 'object') && next.outlets === undefined) {\n      if (!compare(curr, next, path)) return noMatch;\n      currentCommandIndex += 2;\n    } else {\n      if (!compare(curr, {}, path)) return noMatch;\n      currentCommandIndex++;\n    }\n    currentPathIndex++;\n  }\n\n  return {match: true, pathIndex: currentPathIndex, commandIndex: currentCommandIndex};\n}\n\nfunction createNewSegmentGroup(\n    segmentGroup: UrlSegmentGroup, startIndex: number, commands: any[]): UrlSegmentGroup {\n  const paths = segmentGroup.segments.slice(0, startIndex);\n\n  let i = 0;\n  while (i < commands.length) {\n    if (typeof commands[i] === 'object' && commands[i].outlets !== undefined) {\n      const children = createNewSegmentChildren(commands[i].outlets);\n      return new UrlSegmentGroup(paths, children);\n    }\n\n    // if we start with an object literal, we need to reuse the path part from the segment\n    if (i === 0 && isMatrixParams(commands[0])) {\n      const p = segmentGroup.segments[startIndex];\n      paths.push(new UrlSegment(p.path, commands[0]));\n      i++;\n      continue;\n    }\n\n    const curr = getPath(commands[i]);\n    const next = (i < commands.length - 1) ? commands[i + 1] : null;\n    if (curr && next && isMatrixParams(next)) {\n      paths.push(new UrlSegment(curr, stringify(next)));\n      i += 2;\n    } else {\n      paths.push(new UrlSegment(curr, {}));\n      i++;\n    }\n  }\n  return new UrlSegmentGroup(paths, {});\n}\n\nfunction createNewSegmentChildren(outlets: {[name: string]: any}): any {\n  const children: {[key: string]: UrlSegmentGroup} = {};\n  forEach(outlets, (commands: any, outlet: string) => {\n    if (commands !== null) {\n      children[outlet] = createNewSegmentGroup(new UrlSegmentGroup([], {}), 0, commands);\n    }\n  });\n  return children;\n}\n\nfunction stringify(params: {[key: string]: any}): {[key: string]: string} {\n  const res: {[key: string]: string} = {};\n  forEach(params, (v: any, k: string) => res[k] = `${v}`);\n  return res;\n}\n\nfunction compare(path: string, params: {[key: string]: any}, segment: UrlSegment): boolean {\n  return path == segment.path && shallowEqual(params, segment.parameters);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MonoTypeOperatorFunction} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\nimport {LoadedRouterConfig} from '../config';\nimport {ActivationEnd, ChildActivationEnd, Event} from '../events';\nimport {DetachedRouteHandleInternal, RouteReuseStrategy} from '../route_reuse_strategy';\nimport {NavigationTransition} from '../router';\nimport {ChildrenOutletContexts} from '../router_outlet_context';\nimport {ActivatedRoute, ActivatedRouteSnapshot, RouterState, advanceActivatedRoute} from '../router_state';\nimport {forEach} from '../utils/collection';\nimport {TreeNode, nodeChildrenAsMap} from '../utils/tree';\n\nexport const activateRoutes =\n    (rootContexts: ChildrenOutletContexts, routeReuseStrategy: RouteReuseStrategy,\n     forwardEvent: (evt: Event) => void): MonoTypeOperatorFunction<NavigationTransition> =>\n        map(t => {\n          new ActivateRoutes(\n              routeReuseStrategy, t.targetRouterState !, t.currentRouterState, forwardEvent)\n              .activate(rootContexts);\n          return t;\n        });\n\nexport class ActivateRoutes {\n  constructor(\n      private routeReuseStrategy: RouteReuseStrategy, private futureState: RouterState,\n      private currState: RouterState, private forwardEvent: (evt: Event) => void) {}\n\n  activate(parentContexts: ChildrenOutletContexts): void {\n    const futureRoot = this.futureState._root;\n    const currRoot = this.currState ? this.currState._root : null;\n\n    this.deactivateChildRoutes(futureRoot, currRoot, parentContexts);\n    advanceActivatedRoute(this.futureState.root);\n    this.activateChildRoutes(futureRoot, currRoot, parentContexts);\n  }\n\n  // De-activate the child route that are not re-used for the future state\n  private deactivateChildRoutes(\n      futureNode: TreeNode<ActivatedRoute>, currNode: TreeNode<ActivatedRoute>|null,\n      contexts: ChildrenOutletContexts): void {\n    const children: {[outletName: string]: TreeNode<ActivatedRoute>} = nodeChildrenAsMap(currNode);\n\n    // Recurse on the routes active in the future state to de-activate deeper children\n    futureNode.children.forEach(futureChild => {\n      const childOutletName = futureChild.value.outlet;\n      this.deactivateRoutes(futureChild, children[childOutletName], contexts);\n      delete children[childOutletName];\n    });\n\n    // De-activate the routes that will not be re-used\n    forEach(children, (v: TreeNode<ActivatedRoute>, childName: string) => {\n      this.deactivateRouteAndItsChildren(v, contexts);\n    });\n  }\n\n  private deactivateRoutes(\n      futureNode: TreeNode<ActivatedRoute>, currNode: TreeNode<ActivatedRoute>,\n      parentContext: ChildrenOutletContexts): void {\n    const future = futureNode.value;\n    const curr = currNode ? currNode.value : null;\n\n    if (future === curr) {\n      // Reusing the node, check to see if the children need to be de-activated\n      if (future.component) {\n        // If we have a normal route, we need to go through an outlet.\n        const context = parentContext.getContext(future.outlet);\n        if (context) {\n          this.deactivateChildRoutes(futureNode, currNode, context.children);\n        }\n      } else {\n        // if we have a componentless route, we recurse but keep the same outlet map.\n        this.deactivateChildRoutes(futureNode, currNode, parentContext);\n      }\n    } else {\n      if (curr) {\n        // Deactivate the current route which will not be re-used\n        this.deactivateRouteAndItsChildren(currNode, parentContext);\n      }\n    }\n  }\n\n  private deactivateRouteAndItsChildren(\n      route: TreeNode<ActivatedRoute>, parentContexts: ChildrenOutletContexts): void {\n    if (this.routeReuseStrategy.shouldDetach(route.value.snapshot)) {\n      this.detachAndStoreRouteSubtree(route, parentContexts);\n    } else {\n      this.deactivateRouteAndOutlet(route, parentContexts);\n    }\n  }\n\n  private detachAndStoreRouteSubtree(\n      route: TreeNode<ActivatedRoute>, parentContexts: ChildrenOutletContexts): void {\n    const context = parentContexts.getContext(route.value.outlet);\n    if (context && context.outlet) {\n      const componentRef = context.outlet.detach();\n      const contexts = context.children.onOutletDeactivated();\n      this.routeReuseStrategy.store(route.value.snapshot, {componentRef, route, contexts});\n    }\n  }\n\n  private deactivateRouteAndOutlet(\n      route: TreeNode<ActivatedRoute>, parentContexts: ChildrenOutletContexts): void {\n    const context = parentContexts.getContext(route.value.outlet);\n\n    if (context) {\n      const children: {[outletName: string]: any} = nodeChildrenAsMap(route);\n      const contexts = route.value.component ? context.children : parentContexts;\n\n      forEach(children, (v: any, k: string) => this.deactivateRouteAndItsChildren(v, contexts));\n\n      if (context.outlet) {\n        // Destroy the component\n        context.outlet.deactivate();\n        // Destroy the contexts for all the outlets that were in the component\n        context.children.onOutletDeactivated();\n      }\n    }\n  }\n\n  private activateChildRoutes(\n      futureNode: TreeNode<ActivatedRoute>, currNode: TreeNode<ActivatedRoute>|null,\n      contexts: ChildrenOutletContexts): void {\n    const children: {[outlet: string]: any} = nodeChildrenAsMap(currNode);\n    futureNode.children.forEach(c => {\n      this.activateRoutes(c, children[c.value.outlet], contexts);\n      this.forwardEvent(new ActivationEnd(c.value.snapshot));\n    });\n    if (futureNode.children.length) {\n      this.forwardEvent(new ChildActivationEnd(futureNode.value.snapshot));\n    }\n  }\n\n  private activateRoutes(\n      futureNode: TreeNode<ActivatedRoute>, currNode: TreeNode<ActivatedRoute>,\n      parentContexts: ChildrenOutletContexts): void {\n    const future = futureNode.value;\n    const curr = currNode ? currNode.value : null;\n\n    advanceActivatedRoute(future);\n\n    // reusing the node\n    if (future === curr) {\n      if (future.component) {\n        // If we have a normal route, we need to go through an outlet.\n        const context = parentContexts.getOrCreateContext(future.outlet);\n        this.activateChildRoutes(futureNode, currNode, context.children);\n      } else {\n        // if we have a componentless route, we recurse but keep the same outlet map.\n        this.activateChildRoutes(futureNode, currNode, parentContexts);\n      }\n    } else {\n      if (future.component) {\n        // if we have a normal route, we need to place the component into the outlet and recurse.\n        const context = parentContexts.getOrCreateContext(future.outlet);\n\n        if (this.routeReuseStrategy.shouldAttach(future.snapshot)) {\n          const stored =\n              (<DetachedRouteHandleInternal>this.routeReuseStrategy.retrieve(future.snapshot));\n          this.routeReuseStrategy.store(future.snapshot, null);\n          context.children.onOutletReAttached(stored.contexts);\n          context.attachRef = stored.componentRef;\n          context.route = stored.route.value;\n          if (context.outlet) {\n            // Attach right away when the outlet has already been instantiated\n            // Otherwise attach from `RouterOutlet.ngOnInit` when it is instantiated\n            context.outlet.attach(stored.componentRef, stored.route.value);\n          }\n          advanceActivatedRouteNodeAndItsChildren(stored.route);\n        } else {\n          const config = parentLoadedConfig(future.snapshot);\n          const cmpFactoryResolver = config ? config.module.componentFactoryResolver : null;\n\n          context.attachRef = null;\n          context.route = future;\n          context.resolver = cmpFactoryResolver;\n          if (context.outlet) {\n            // Activate the outlet when it has already been instantiated\n            // Otherwise it will get activated from its `ngOnInit` when instantiated\n            context.outlet.activateWith(future, cmpFactoryResolver);\n          }\n\n          this.activateChildRoutes(futureNode, null, context.children);\n        }\n      } else {\n        // if we have a componentless route, we recurse but keep the same outlet map.\n        this.activateChildRoutes(futureNode, null, parentContexts);\n      }\n    }\n  }\n}\n\nfunction advanceActivatedRouteNodeAndItsChildren(node: TreeNode<ActivatedRoute>): void {\n  advanceActivatedRoute(node.value);\n  node.children.forEach(advanceActivatedRouteNodeAndItsChildren);\n}\n\nfunction parentLoadedConfig(snapshot: ActivatedRouteSnapshot): LoadedRouterConfig|null {\n  for (let s = snapshot.parent; s; s = s.parent) {\n    const route = s.routeConfig;\n    if (route && route._loadedConfig) return route._loadedConfig;\n    if (route && route.component) return null;\n  }\n\n  return null;\n}","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CanActivate, CanActivateChild, CanDeactivate, CanLoad} from '../interfaces';\nimport {UrlTree} from '../url_tree';\n\n/**\n * Simple function check, but generic so type inference will flow. Example:\n *\n * function product(a: number, b: number) {\n *   return a * b;\n * }\n *\n * if (isFunction<product>(fn)) {\n *   return fn(1, 2);\n * } else {\n *   throw \"Must provide the `product` function\";\n * }\n */\nexport function isFunction<T>(v: any): v is T {\n  return typeof v === 'function';\n}\n\nexport function isBoolean(v: any): v is boolean {\n  return typeof v === 'boolean';\n}\n\nexport function isUrlTree(v: any): v is UrlTree {\n  return v instanceof UrlTree;\n}\n\nexport function isCanLoad(guard: any): guard is CanLoad {\n  return guard && isFunction<CanLoad>(guard.canLoad);\n}\n\nexport function isCanActivate(guard: any): guard is CanActivate {\n  return guard && isFunction<CanActivate>(guard.canActivate);\n}\n\nexport function isCanActivateChild(guard: any): guard is CanActivateChild {\n  return guard && isFunction<CanActivateChild>(guard.canActivateChild);\n}\n\nexport function isCanDeactivate<T>(guard: any): guard is CanDeactivate<T> {\n  return guard && isFunction<CanDeactivate<T>>(guard.canDeactivate);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector, NgModuleRef} from '@angular/core';\nimport {EmptyError, Observable, Observer, from, of } from 'rxjs';\nimport {catchError, concatAll, every, first, map, mergeMap} from 'rxjs/operators';\n\nimport {LoadedRouterConfig, Route, Routes} from './config';\nimport {CanLoadFn} from './interfaces';\nimport {RouterConfigLoader} from './router_config_loader';\nimport {PRIMARY_OUTLET, Params, defaultUrlMatcher, navigationCancelingError} from './shared';\nimport {UrlSegment, UrlSegmentGroup, UrlSerializer, UrlTree} from './url_tree';\nimport {forEach, waitForMap, wrapIntoObservable} from './utils/collection';\nimport {isCanLoad, isFunction} from './utils/type_guards';\n\nclass NoMatch {\n  public segmentGroup: UrlSegmentGroup|null;\n\n  constructor(segmentGroup?: UrlSegmentGroup) { this.segmentGroup = segmentGroup || null; }\n}\n\nclass AbsoluteRedirect {\n  constructor(public urlTree: UrlTree) {}\n}\n\nfunction noMatch(segmentGroup: UrlSegmentGroup): Observable<UrlSegmentGroup> {\n  return new Observable<UrlSegmentGroup>(\n      (obs: Observer<UrlSegmentGroup>) => obs.error(new NoMatch(segmentGroup)));\n}\n\nfunction absoluteRedirect(newTree: UrlTree): Observable<any> {\n  return new Observable<UrlSegmentGroup>(\n      (obs: Observer<UrlSegmentGroup>) => obs.error(new AbsoluteRedirect(newTree)));\n}\n\nfunction namedOutletsRedirect(redirectTo: string): Observable<any> {\n  return new Observable<UrlSegmentGroup>(\n      (obs: Observer<UrlSegmentGroup>) => obs.error(new Error(\n          `Only absolute redirects can have named outlets. redirectTo: '${redirectTo}'`)));\n}\n\nfunction canLoadFails(route: Route): Observable<LoadedRouterConfig> {\n  return new Observable<LoadedRouterConfig>(\n      (obs: Observer<LoadedRouterConfig>) => obs.error(navigationCancelingError(\n          `Cannot load children because the guard of the route \"path: '${route.path}'\" returned false`)));\n}\n\n/**\n * Returns the `UrlTree` with the redirection applied.\n *\n * Lazy modules are loaded along the way.\n */\nexport function applyRedirects(\n    moduleInjector: Injector, configLoader: RouterConfigLoader, urlSerializer: UrlSerializer,\n    urlTree: UrlTree, config: Routes): Observable<UrlTree> {\n  return new ApplyRedirects(moduleInjector, configLoader, urlSerializer, urlTree, config).apply();\n}\n\nclass ApplyRedirects {\n  private allowRedirects: boolean = true;\n  private ngModule: NgModuleRef<any>;\n\n  constructor(\n      moduleInjector: Injector, private configLoader: RouterConfigLoader,\n      private urlSerializer: UrlSerializer, private urlTree: UrlTree, private config: Routes) {\n    this.ngModule = moduleInjector.get(NgModuleRef);\n  }\n\n  apply(): Observable<UrlTree> {\n    const expanded$ =\n        this.expandSegmentGroup(this.ngModule, this.config, this.urlTree.root, PRIMARY_OUTLET);\n    const urlTrees$ = expanded$.pipe(\n        map((rootSegmentGroup: UrlSegmentGroup) => this.createUrlTree(\n                rootSegmentGroup, this.urlTree.queryParams, this.urlTree.fragment !)));\n    return urlTrees$.pipe(catchError((e: any) => {\n      if (e instanceof AbsoluteRedirect) {\n        // after an absolute redirect we do not apply any more redirects!\n        this.allowRedirects = false;\n        // we need to run matching, so we can fetch all lazy-loaded modules\n        return this.match(e.urlTree);\n      }\n\n      if (e instanceof NoMatch) {\n        throw this.noMatchError(e);\n      }\n\n      throw e;\n    }));\n  }\n\n  private match(tree: UrlTree): Observable<UrlTree> {\n    const expanded$ =\n        this.expandSegmentGroup(this.ngModule, this.config, tree.root, PRIMARY_OUTLET);\n    const mapped$ = expanded$.pipe(\n        map((rootSegmentGroup: UrlSegmentGroup) =>\n                this.createUrlTree(rootSegmentGroup, tree.queryParams, tree.fragment !)));\n    return mapped$.pipe(catchError((e: any): Observable<UrlTree> => {\n      if (e instanceof NoMatch) {\n        throw this.noMatchError(e);\n      }\n\n      throw e;\n    }));\n  }\n\n  private noMatchError(e: NoMatch): any {\n    return new Error(`Cannot match any routes. URL Segment: '${e.segmentGroup}'`);\n  }\n\n  private createUrlTree(rootCandidate: UrlSegmentGroup, queryParams: Params, fragment: string):\n      UrlTree {\n    const root = rootCandidate.segments.length > 0 ?\n        new UrlSegmentGroup([], {[PRIMARY_OUTLET]: rootCandidate}) :\n        rootCandidate;\n    return new UrlTree(root, queryParams, fragment);\n  }\n\n  private expandSegmentGroup(\n      ngModule: NgModuleRef<any>, routes: Route[], segmentGroup: UrlSegmentGroup,\n      outlet: string): Observable<UrlSegmentGroup> {\n    if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n      return this.expandChildren(ngModule, routes, segmentGroup)\n          .pipe(map((children: any) => new UrlSegmentGroup([], children)));\n    }\n\n    return this.expandSegment(ngModule, segmentGroup, routes, segmentGroup.segments, outlet, true);\n  }\n\n  // Recursively expand segment groups for all the child outlets\n  private expandChildren(\n      ngModule: NgModuleRef<any>, routes: Route[],\n      segmentGroup: UrlSegmentGroup): Observable<{[name: string]: UrlSegmentGroup}> {\n    return waitForMap(\n        segmentGroup.children,\n        (childOutlet, child) => this.expandSegmentGroup(ngModule, routes, child, childOutlet));\n  }\n\n  private expandSegment(\n      ngModule: NgModuleRef<any>, segmentGroup: UrlSegmentGroup, routes: Route[],\n      segments: UrlSegment[], outlet: string,\n      allowRedirects: boolean): Observable<UrlSegmentGroup> {\n    return of (...routes).pipe(\n        map((r: any) => {\n          const expanded$ = this.expandSegmentAgainstRoute(\n              ngModule, segmentGroup, routes, r, segments, outlet, allowRedirects);\n          return expanded$.pipe(catchError((e: any) => {\n            if (e instanceof NoMatch) {\n              // TODO(i): this return type doesn't match the declared Observable<UrlSegmentGroup> -\n              // talk to Jason\n              return of (null) as any;\n            }\n            throw e;\n          }));\n        }),\n        concatAll(), first((s: any) => !!s), catchError((e: any, _: any) => {\n          if (e instanceof EmptyError || e.name === 'EmptyError') {\n            if (this.noLeftoversInUrl(segmentGroup, segments, outlet)) {\n              return of (new UrlSegmentGroup([], {}));\n            }\n            throw new NoMatch(segmentGroup);\n          }\n          throw e;\n        }));\n  }\n\n  private noLeftoversInUrl(segmentGroup: UrlSegmentGroup, segments: UrlSegment[], outlet: string):\n      boolean {\n    return segments.length === 0 && !segmentGroup.children[outlet];\n  }\n\n  private expandSegmentAgainstRoute(\n      ngModule: NgModuleRef<any>, segmentGroup: UrlSegmentGroup, routes: Route[], route: Route,\n      paths: UrlSegment[], outlet: string, allowRedirects: boolean): Observable<UrlSegmentGroup> {\n    if (getOutlet(route) !== outlet) {\n      return noMatch(segmentGroup);\n    }\n\n    if (route.redirectTo === undefined) {\n      return this.matchSegmentAgainstRoute(ngModule, segmentGroup, route, paths);\n    }\n\n    if (allowRedirects && this.allowRedirects) {\n      return this.expandSegmentAgainstRouteUsingRedirect(\n          ngModule, segmentGroup, routes, route, paths, outlet);\n    }\n\n    return noMatch(segmentGroup);\n  }\n\n  private expandSegmentAgainstRouteUsingRedirect(\n      ngModule: NgModuleRef<any>, segmentGroup: UrlSegmentGroup, routes: Route[], route: Route,\n      segments: UrlSegment[], outlet: string): Observable<UrlSegmentGroup> {\n    if (route.path === '**') {\n      return this.expandWildCardWithParamsAgainstRouteUsingRedirect(\n          ngModule, routes, route, outlet);\n    }\n\n    return this.expandRegularSegmentAgainstRouteUsingRedirect(\n        ngModule, segmentGroup, routes, route, segments, outlet);\n  }\n\n  private expandWildCardWithParamsAgainstRouteUsingRedirect(\n      ngModule: NgModuleRef<any>, routes: Route[], route: Route,\n      outlet: string): Observable<UrlSegmentGroup> {\n    const newTree = this.applyRedirectCommands([], route.redirectTo !, {});\n    if (route.redirectTo !.startsWith('/')) {\n      return absoluteRedirect(newTree);\n    }\n\n    return this.lineralizeSegments(route, newTree).pipe(mergeMap((newSegments: UrlSegment[]) => {\n      const group = new UrlSegmentGroup(newSegments, {});\n      return this.expandSegment(ngModule, group, routes, newSegments, outlet, false);\n    }));\n  }\n\n  private expandRegularSegmentAgainstRouteUsingRedirect(\n      ngModule: NgModuleRef<any>, segmentGroup: UrlSegmentGroup, routes: Route[], route: Route,\n      segments: UrlSegment[], outlet: string): Observable<UrlSegmentGroup> {\n    const {matched, consumedSegments, lastChild, positionalParamSegments} =\n        match(segmentGroup, route, segments);\n    if (!matched) return noMatch(segmentGroup);\n\n    const newTree = this.applyRedirectCommands(\n        consumedSegments, route.redirectTo !, <any>positionalParamSegments);\n    if (route.redirectTo !.startsWith('/')) {\n      return absoluteRedirect(newTree);\n    }\n\n    return this.lineralizeSegments(route, newTree).pipe(mergeMap((newSegments: UrlSegment[]) => {\n      return this.expandSegment(\n          ngModule, segmentGroup, routes, newSegments.concat(segments.slice(lastChild)), outlet,\n          false);\n    }));\n  }\n\n  private matchSegmentAgainstRoute(\n      ngModule: NgModuleRef<any>, rawSegmentGroup: UrlSegmentGroup, route: Route,\n      segments: UrlSegment[]): Observable<UrlSegmentGroup> {\n    if (route.path === '**') {\n      if (route.loadChildren) {\n        return this.configLoader.load(ngModule.injector, route)\n            .pipe(map((cfg: LoadedRouterConfig) => {\n              route._loadedConfig = cfg;\n              return new UrlSegmentGroup(segments, {});\n            }));\n      }\n\n      return of (new UrlSegmentGroup(segments, {}));\n    }\n\n    const {matched, consumedSegments, lastChild} = match(rawSegmentGroup, route, segments);\n    if (!matched) return noMatch(rawSegmentGroup);\n\n    const rawSlicedSegments = segments.slice(lastChild);\n    const childConfig$ = this.getChildConfig(ngModule, route, segments);\n\n    return childConfig$.pipe(mergeMap((routerConfig: LoadedRouterConfig) => {\n      const childModule = routerConfig.module;\n      const childConfig = routerConfig.routes;\n\n      const {segmentGroup, slicedSegments} =\n          split(rawSegmentGroup, consumedSegments, rawSlicedSegments, childConfig);\n\n      if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {\n        const expanded$ = this.expandChildren(childModule, childConfig, segmentGroup);\n        return expanded$.pipe(\n            map((children: any) => new UrlSegmentGroup(consumedSegments, children)));\n      }\n\n      if (childConfig.length === 0 && slicedSegments.length === 0) {\n        return of (new UrlSegmentGroup(consumedSegments, {}));\n      }\n\n      const expanded$ = this.expandSegment(\n          childModule, segmentGroup, childConfig, slicedSegments, PRIMARY_OUTLET, true);\n      return expanded$.pipe(\n          map((cs: UrlSegmentGroup) =>\n                  new UrlSegmentGroup(consumedSegments.concat(cs.segments), cs.children)));\n    }));\n  }\n\n  private getChildConfig(ngModule: NgModuleRef<any>, route: Route, segments: UrlSegment[]):\n      Observable<LoadedRouterConfig> {\n    if (route.children) {\n      // The children belong to the same module\n      return of (new LoadedRouterConfig(route.children, ngModule));\n    }\n\n    if (route.loadChildren) {\n      // lazy children belong to the loaded module\n      if (route._loadedConfig !== undefined) {\n        return of (route._loadedConfig);\n      }\n\n      return runCanLoadGuard(ngModule.injector, route, segments)\n          .pipe(mergeMap((shouldLoad: boolean) => {\n            if (shouldLoad) {\n              return this.configLoader.load(ngModule.injector, route)\n                  .pipe(map((cfg: LoadedRouterConfig) => {\n                    route._loadedConfig = cfg;\n                    return cfg;\n                  }));\n            }\n            return canLoadFails(route);\n          }));\n    }\n\n    return of (new LoadedRouterConfig([], ngModule));\n  }\n\n  private lineralizeSegments(route: Route, urlTree: UrlTree): Observable<UrlSegment[]> {\n    let res: UrlSegment[] = [];\n    let c = urlTree.root;\n    while (true) {\n      res = res.concat(c.segments);\n      if (c.numberOfChildren === 0) {\n        return of (res);\n      }\n\n      if (c.numberOfChildren > 1 || !c.children[PRIMARY_OUTLET]) {\n        return namedOutletsRedirect(route.redirectTo !);\n      }\n\n      c = c.children[PRIMARY_OUTLET];\n    }\n  }\n\n  private applyRedirectCommands(\n      segments: UrlSegment[], redirectTo: string, posParams: {[k: string]: UrlSegment}): UrlTree {\n    return this.applyRedirectCreatreUrlTree(\n        redirectTo, this.urlSerializer.parse(redirectTo), segments, posParams);\n  }\n\n  private applyRedirectCreatreUrlTree(\n      redirectTo: string, urlTree: UrlTree, segments: UrlSegment[],\n      posParams: {[k: string]: UrlSegment}): UrlTree {\n    const newRoot = this.createSegmentGroup(redirectTo, urlTree.root, segments, posParams);\n    return new UrlTree(\n        newRoot, this.createQueryParams(urlTree.queryParams, this.urlTree.queryParams),\n        urlTree.fragment);\n  }\n\n  private createQueryParams(redirectToParams: Params, actualParams: Params): Params {\n    const res: Params = {};\n    forEach(redirectToParams, (v: any, k: string) => {\n      const copySourceValue = typeof v === 'string' && v.startsWith(':');\n      if (copySourceValue) {\n        const sourceName = v.substring(1);\n        res[k] = actualParams[sourceName];\n      } else {\n        res[k] = v;\n      }\n    });\n    return res;\n  }\n\n  private createSegmentGroup(\n      redirectTo: string, group: UrlSegmentGroup, segments: UrlSegment[],\n      posParams: {[k: string]: UrlSegment}): UrlSegmentGroup {\n    const updatedSegments = this.createSegments(redirectTo, group.segments, segments, posParams);\n\n    let children: {[n: string]: UrlSegmentGroup} = {};\n    forEach(group.children, (child: UrlSegmentGroup, name: string) => {\n      children[name] = this.createSegmentGroup(redirectTo, child, segments, posParams);\n    });\n\n    return new UrlSegmentGroup(updatedSegments, children);\n  }\n\n  private createSegments(\n      redirectTo: string, redirectToSegments: UrlSegment[], actualSegments: UrlSegment[],\n      posParams: {[k: string]: UrlSegment}): UrlSegment[] {\n    return redirectToSegments.map(\n        s => s.path.startsWith(':') ? this.findPosParam(redirectTo, s, posParams) :\n                                      this.findOrReturn(s, actualSegments));\n  }\n\n  private findPosParam(\n      redirectTo: string, redirectToUrlSegment: UrlSegment,\n      posParams: {[k: string]: UrlSegment}): UrlSegment {\n    const pos = posParams[redirectToUrlSegment.path.substring(1)];\n    if (!pos)\n      throw new Error(\n          `Cannot redirect to '${redirectTo}'. Cannot find '${redirectToUrlSegment.path}'.`);\n    return pos;\n  }\n\n  private findOrReturn(redirectToUrlSegment: UrlSegment, actualSegments: UrlSegment[]): UrlSegment {\n    let idx = 0;\n    for (const s of actualSegments) {\n      if (s.path === redirectToUrlSegment.path) {\n        actualSegments.splice(idx);\n        return s;\n      }\n      idx++;\n    }\n    return redirectToUrlSegment;\n  }\n}\n\nfunction runCanLoadGuard(\n    moduleInjector: Injector, route: Route, segments: UrlSegment[]): Observable<boolean> {\n  const canLoad = route.canLoad;\n  if (!canLoad || canLoad.length === 0) return of (true);\n\n  const obs = from(canLoad).pipe(map((injectionToken: any) => {\n    const guard = moduleInjector.get(injectionToken);\n    let guardVal;\n    if (isCanLoad(guard)) {\n      guardVal = guard.canLoad(route, segments);\n    } else if (isFunction<CanLoadFn>(guard)) {\n      guardVal = guard(route, segments);\n    } else {\n      throw new Error('Invalid CanLoad guard');\n    }\n    return wrapIntoObservable(guardVal);\n  }));\n\n  return obs.pipe(concatAll(), every(result => result === true));\n}\n\nfunction match(segmentGroup: UrlSegmentGroup, route: Route, segments: UrlSegment[]): {\n  matched: boolean,\n  consumedSegments: UrlSegment[],\n  lastChild: number,\n  positionalParamSegments: {[k: string]: UrlSegment}\n} {\n  if (route.path === '') {\n    if ((route.pathMatch === 'full') && (segmentGroup.hasChildren() || segments.length > 0)) {\n      return {matched: false, consumedSegments: [], lastChild: 0, positionalParamSegments: {}};\n    }\n\n    return {matched: true, consumedSegments: [], lastChild: 0, positionalParamSegments: {}};\n  }\n\n  const matcher = route.matcher || defaultUrlMatcher;\n  const res = matcher(segments, segmentGroup, route);\n\n  if (!res) {\n    return {\n      matched: false,\n      consumedSegments: <any[]>[],\n      lastChild: 0,\n      positionalParamSegments: {},\n    };\n  }\n\n  return {\n    matched: true,\n    consumedSegments: res.consumed !,\n    lastChild: res.consumed.length !,\n    positionalParamSegments: res.posParams !,\n  };\n}\n\nfunction split(\n    segmentGroup: UrlSegmentGroup, consumedSegments: UrlSegment[], slicedSegments: UrlSegment[],\n    config: Route[]) {\n  if (slicedSegments.length > 0 &&\n      containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, slicedSegments, config)) {\n    const s = new UrlSegmentGroup(\n        consumedSegments, createChildrenForEmptySegments(\n                              config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));\n    return {segmentGroup: mergeTrivialChildren(s), slicedSegments: []};\n  }\n\n  if (slicedSegments.length === 0 &&\n      containsEmptyPathRedirects(segmentGroup, slicedSegments, config)) {\n    const s = new UrlSegmentGroup(\n        segmentGroup.segments, addEmptySegmentsToChildrenIfNeeded(\n                                   segmentGroup, slicedSegments, config, segmentGroup.children));\n    return {segmentGroup: mergeTrivialChildren(s), slicedSegments};\n  }\n\n  return {segmentGroup, slicedSegments};\n}\n\nfunction mergeTrivialChildren(s: UrlSegmentGroup): UrlSegmentGroup {\n  if (s.numberOfChildren === 1 && s.children[PRIMARY_OUTLET]) {\n    const c = s.children[PRIMARY_OUTLET];\n    return new UrlSegmentGroup(s.segments.concat(c.segments), c.children);\n  }\n\n  return s;\n}\n\nfunction addEmptySegmentsToChildrenIfNeeded(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], routes: Route[],\n    children: {[name: string]: UrlSegmentGroup}): {[name: string]: UrlSegmentGroup} {\n  const res: {[name: string]: UrlSegmentGroup} = {};\n  for (const r of routes) {\n    if (isEmptyPathRedirect(segmentGroup, slicedSegments, r) && !children[getOutlet(r)]) {\n      res[getOutlet(r)] = new UrlSegmentGroup([], {});\n    }\n  }\n  return {...children, ...res};\n}\n\nfunction createChildrenForEmptySegments(\n    routes: Route[], primarySegmentGroup: UrlSegmentGroup): {[name: string]: UrlSegmentGroup} {\n  const res: {[name: string]: UrlSegmentGroup} = {};\n  res[PRIMARY_OUTLET] = primarySegmentGroup;\n  for (const r of routes) {\n    if (r.path === '' && getOutlet(r) !== PRIMARY_OUTLET) {\n      res[getOutlet(r)] = new UrlSegmentGroup([], {});\n    }\n  }\n  return res;\n}\n\nfunction containsEmptyPathRedirectsWithNamedOutlets(\n    segmentGroup: UrlSegmentGroup, segments: UrlSegment[], routes: Route[]): boolean {\n  return routes.some(\n      r => isEmptyPathRedirect(segmentGroup, segments, r) && getOutlet(r) !== PRIMARY_OUTLET);\n}\n\nfunction containsEmptyPathRedirects(\n    segmentGroup: UrlSegmentGroup, segments: UrlSegment[], routes: Route[]): boolean {\n  return routes.some(r => isEmptyPathRedirect(segmentGroup, segments, r));\n}\n\nfunction isEmptyPathRedirect(\n    segmentGroup: UrlSegmentGroup, segments: UrlSegment[], r: Route): boolean {\n  if ((segmentGroup.hasChildren() || segments.length > 0) && r.pathMatch === 'full') {\n    return false;\n  }\n\n  return r.path === '' && r.redirectTo !== undefined;\n}\n\nfunction getOutlet(route: Route): string {\n  return route.outlet || PRIMARY_OUTLET;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector} from '@angular/core';\nimport {MonoTypeOperatorFunction, Observable} from 'rxjs';\nimport {map, switchMap} from 'rxjs/operators';\n\nimport {applyRedirects as applyRedirectsFn} from '../apply_redirects';\nimport {Routes} from '../config';\nimport {NavigationTransition} from '../router';\nimport {RouterConfigLoader} from '../router_config_loader';\nimport {UrlSerializer} from '../url_tree';\n\nexport function applyRedirects(\n    moduleInjector: Injector, configLoader: RouterConfigLoader, urlSerializer: UrlSerializer,\n    config: Routes): MonoTypeOperatorFunction<NavigationTransition> {\n  return function(source: Observable<NavigationTransition>) {\n    return source.pipe(switchMap(\n        t => applyRedirectsFn(moduleInjector, configLoader, urlSerializer, t.extractedUrl, config)\n                 .pipe(map(urlAfterRedirects => ({...t, urlAfterRedirects})))));\n  };\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector} from '@angular/core';\n\nimport {LoadedRouterConfig, RunGuardsAndResolvers} from '../config';\nimport {ChildrenOutletContexts, OutletContext} from '../router_outlet_context';\nimport {ActivatedRouteSnapshot, RouterStateSnapshot, equalParamsAndUrlSegments} from '../router_state';\nimport {equalPath} from '../url_tree';\nimport {forEach, shallowEqual} from '../utils/collection';\nimport {TreeNode, nodeChildrenAsMap} from '../utils/tree';\n\nexport class CanActivate {\n  readonly route: ActivatedRouteSnapshot;\n  constructor(public path: ActivatedRouteSnapshot[]) {\n    this.route = this.path[this.path.length - 1];\n  }\n}\n\nexport class CanDeactivate {\n  constructor(public component: Object|null, public route: ActivatedRouteSnapshot) {}\n}\n\nexport declare type Checks = {\n  canDeactivateChecks: CanDeactivate[],\n  canActivateChecks: CanActivate[],\n};\n\nexport function getAllRouteGuards(\n    future: RouterStateSnapshot, curr: RouterStateSnapshot,\n    parentContexts: ChildrenOutletContexts) {\n  const futureRoot = future._root;\n  const currRoot = curr ? curr._root : null;\n\n  return getChildRouteGuards(futureRoot, currRoot, parentContexts, [futureRoot.value]);\n}\n\nexport function getCanActivateChild(p: ActivatedRouteSnapshot):\n    {node: ActivatedRouteSnapshot, guards: any[]}|null {\n  const canActivateChild = p.routeConfig ? p.routeConfig.canActivateChild : null;\n  if (!canActivateChild || canActivateChild.length === 0) return null;\n  return {node: p, guards: canActivateChild};\n}\n\nexport function getToken(\n    token: any, snapshot: ActivatedRouteSnapshot, moduleInjector: Injector): any {\n  const config = getClosestLoadedConfig(snapshot);\n  const injector = config ? config.module.injector : moduleInjector;\n  return injector.get(token);\n}\n\nfunction getClosestLoadedConfig(snapshot: ActivatedRouteSnapshot): LoadedRouterConfig|null {\n  if (!snapshot) return null;\n\n  for (let s = snapshot.parent; s; s = s.parent) {\n    const route = s.routeConfig;\n    if (route && route._loadedConfig) return route._loadedConfig;\n  }\n\n  return null;\n}\n\nfunction getChildRouteGuards(\n    futureNode: TreeNode<ActivatedRouteSnapshot>, currNode: TreeNode<ActivatedRouteSnapshot>| null,\n    contexts: ChildrenOutletContexts | null, futurePath: ActivatedRouteSnapshot[],\n    checks: Checks = {\n      canDeactivateChecks: [],\n      canActivateChecks: []\n    }): Checks {\n  const prevChildren = nodeChildrenAsMap(currNode);\n\n  // Process the children of the future route\n  futureNode.children.forEach(c => {\n    getRouteGuards(c, prevChildren[c.value.outlet], contexts, futurePath.concat([c.value]), checks);\n    delete prevChildren[c.value.outlet];\n  });\n\n  // Process any children left from the current route (not active for the future route)\n  forEach(\n      prevChildren, (v: TreeNode<ActivatedRouteSnapshot>, k: string) =>\n                        deactivateRouteAndItsChildren(v, contexts !.getContext(k), checks));\n\n  return checks;\n}\n\nfunction getRouteGuards(\n    futureNode: TreeNode<ActivatedRouteSnapshot>, currNode: TreeNode<ActivatedRouteSnapshot>,\n    parentContexts: ChildrenOutletContexts | null, futurePath: ActivatedRouteSnapshot[],\n    checks: Checks = {\n      canDeactivateChecks: [],\n      canActivateChecks: []\n    }): Checks {\n  const future = futureNode.value;\n  const curr = currNode ? currNode.value : null;\n  const context = parentContexts ? parentContexts.getContext(futureNode.value.outlet) : null;\n\n  // reusing the node\n  if (curr && future.routeConfig === curr.routeConfig) {\n    const shouldRun =\n        shouldRunGuardsAndResolvers(curr, future, future.routeConfig !.runGuardsAndResolvers);\n    if (shouldRun) {\n      checks.canActivateChecks.push(new CanActivate(futurePath));\n    } else {\n      // we need to set the data\n      future.data = curr.data;\n      future._resolvedData = curr._resolvedData;\n    }\n\n    // If we have a component, we need to go through an outlet.\n    if (future.component) {\n      getChildRouteGuards(\n          futureNode, currNode, context ? context.children : null, futurePath, checks);\n\n      // if we have a componentless route, we recurse but keep the same outlet map.\n    } else {\n      getChildRouteGuards(futureNode, currNode, parentContexts, futurePath, checks);\n    }\n\n    if (shouldRun) {\n      const component = context && context.outlet && context.outlet.component || null;\n      checks.canDeactivateChecks.push(new CanDeactivate(component, curr));\n    }\n  } else {\n    if (curr) {\n      deactivateRouteAndItsChildren(currNode, context, checks);\n    }\n\n    checks.canActivateChecks.push(new CanActivate(futurePath));\n    // If we have a component, we need to go through an outlet.\n    if (future.component) {\n      getChildRouteGuards(futureNode, null, context ? context.children : null, futurePath, checks);\n\n      // if we have a componentless route, we recurse but keep the same outlet map.\n    } else {\n      getChildRouteGuards(futureNode, null, parentContexts, futurePath, checks);\n    }\n  }\n\n  return checks;\n}\n\nfunction shouldRunGuardsAndResolvers(\n    curr: ActivatedRouteSnapshot, future: ActivatedRouteSnapshot,\n    mode: RunGuardsAndResolvers | undefined): boolean {\n  if (typeof mode === 'function') {\n    return mode(curr, future);\n  }\n  switch (mode) {\n    case 'pathParamsChange':\n      return !equalPath(curr.url, future.url);\n\n    case 'pathParamsOrQueryParamsChange':\n      return !equalPath(curr.url, future.url) ||\n          !shallowEqual(curr.queryParams, future.queryParams);\n\n    case 'always':\n      return true;\n\n    case 'paramsOrQueryParamsChange':\n      return !equalParamsAndUrlSegments(curr, future) ||\n          !shallowEqual(curr.queryParams, future.queryParams);\n\n    case 'paramsChange':\n    default:\n      return !equalParamsAndUrlSegments(curr, future);\n  }\n}\n\nfunction deactivateRouteAndItsChildren(\n    route: TreeNode<ActivatedRouteSnapshot>, context: OutletContext | null, checks: Checks): void {\n  const children = nodeChildrenAsMap(route);\n  const r = route.value;\n\n  forEach(children, (node: TreeNode<ActivatedRouteSnapshot>, childName: string) => {\n    if (!r.component) {\n      deactivateRouteAndItsChildren(node, context, checks);\n    } else if (context) {\n      deactivateRouteAndItsChildren(node, context.children.getContext(childName), checks);\n    } else {\n      deactivateRouteAndItsChildren(node, null, checks);\n    }\n  });\n\n  if (!r.component) {\n    checks.canDeactivateChecks.push(new CanDeactivate(null, r));\n  } else if (context && context.outlet && context.outlet.isActivated) {\n    checks.canDeactivateChecks.push(new CanDeactivate(context.outlet.component, r));\n  } else {\n    checks.canDeactivateChecks.push(new CanDeactivate(null, r));\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, OperatorFunction, combineLatest} from 'rxjs';\nimport {filter, map, scan, startWith, switchMap, take} from 'rxjs/operators';\n\nimport {UrlTree} from '../url_tree';\nimport {isUrlTree} from '../utils/type_guards';\n\nconst INITIAL_VALUE = Symbol('INITIAL_VALUE');\ndeclare type INTERIM_VALUES = typeof INITIAL_VALUE | boolean | UrlTree;\n\nexport function prioritizedGuardValue():\n    OperatorFunction<Observable<boolean|UrlTree>[], boolean|UrlTree> {\n  return switchMap(obs => {\n    return combineLatest(\n               ...obs.map(o => o.pipe(take(1), startWith(INITIAL_VALUE as INTERIM_VALUES))))\n        .pipe(\n            scan(\n                (acc: INTERIM_VALUES, list: INTERIM_VALUES[]) => {\n                  let isPending = false;\n                  return list.reduce((innerAcc, val, i: number) => {\n                    if (innerAcc !== INITIAL_VALUE) return innerAcc;\n\n                    // Toggle pending flag if any values haven't been set yet\n                    if (val === INITIAL_VALUE) isPending = true;\n\n                    // Any other return values are only valid if we haven't yet hit a pending call.\n                    // This guarantees that in the case of a guard at the bottom of the tree that\n                    // returns a redirect, we will wait for the higher priority guard at the top to\n                    // finish before performing the redirect.\n                    if (!isPending) {\n                      // Early return when we hit a `false` value as that should always cancel\n                      // navigation\n                      if (val === false) return val;\n\n                      if (i === list.length - 1 || isUrlTree(val)) {\n                        return val;\n                      }\n                    }\n\n                    return innerAcc;\n                  }, acc);\n                },\n                INITIAL_VALUE),\n            filter(item => item !== INITIAL_VALUE),\n            map(item => isUrlTree(item) ? item : item === true),  //\n            take(1)) as Observable<boolean|UrlTree>;\n  });\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector} from '@angular/core';\nimport {MonoTypeOperatorFunction, Observable, defer, from, of } from 'rxjs';\nimport {concatAll, concatMap, first, map, mergeMap} from 'rxjs/operators';\n\nimport {ActivationStart, ChildActivationStart, Event} from '../events';\nimport {CanActivateChildFn, CanActivateFn, CanDeactivateFn} from '../interfaces';\nimport {NavigationTransition} from '../router';\nimport {ActivatedRouteSnapshot, RouterStateSnapshot} from '../router_state';\nimport {UrlTree} from '../url_tree';\nimport {wrapIntoObservable} from '../utils/collection';\nimport {CanActivate, CanDeactivate, getCanActivateChild, getToken} from '../utils/preactivation';\nimport {isBoolean, isCanActivate, isCanActivateChild, isCanDeactivate, isFunction} from '../utils/type_guards';\n\nimport {prioritizedGuardValue} from './prioritized_guard_value';\n\nexport function checkGuards(moduleInjector: Injector, forwardEvent?: (evt: Event) => void):\n    MonoTypeOperatorFunction<NavigationTransition> {\n  return function(source: Observable<NavigationTransition>) {\n\n    return source.pipe(mergeMap(t => {\n      const {targetSnapshot, currentSnapshot, guards: {canActivateChecks, canDeactivateChecks}} = t;\n      if (canDeactivateChecks.length === 0 && canActivateChecks.length === 0) {\n        return of ({...t, guardsResult: true});\n      }\n\n      return runCanDeactivateChecks(\n                 canDeactivateChecks, targetSnapshot !, currentSnapshot, moduleInjector)\n          .pipe(\n              mergeMap(canDeactivate => {\n                return canDeactivate && isBoolean(canDeactivate) ?\n                    runCanActivateChecks(\n                        targetSnapshot !, canActivateChecks, moduleInjector, forwardEvent) :\n                    of (canDeactivate);\n              }),\n              map(guardsResult => ({...t, guardsResult})));\n    }));\n  };\n}\n\nfunction runCanDeactivateChecks(\n    checks: CanDeactivate[], futureRSS: RouterStateSnapshot, currRSS: RouterStateSnapshot,\n    moduleInjector: Injector) {\n  return from(checks).pipe(\n      mergeMap(\n          check =>\n              runCanDeactivate(check.component, check.route, currRSS, futureRSS, moduleInjector)),\n      first(result => { return result !== true; }, true as boolean | UrlTree));\n}\n\nfunction runCanActivateChecks(\n    futureSnapshot: RouterStateSnapshot, checks: CanActivate[], moduleInjector: Injector,\n    forwardEvent?: (evt: Event) => void) {\n  return from(checks).pipe(\n      concatMap((check: CanActivate) => {\n        return from([\n                 fireChildActivationStart(check.route.parent, forwardEvent),\n                 fireActivationStart(check.route, forwardEvent),\n                 runCanActivateChild(futureSnapshot, check.path, moduleInjector),\n                 runCanActivate(futureSnapshot, check.route, moduleInjector)\n               ])\n            .pipe(concatAll(), first(result => {\n                    return result !== true;\n                  }, true as boolean | UrlTree));\n      }),\n      first(result => { return result !== true; }, true as boolean | UrlTree));\n}\n\n/**\n   * This should fire off `ActivationStart` events for each route being activated at this\n   * level.\n   * In other words, if you're activating `a` and `b` below, `path` will contain the\n   * `ActivatedRouteSnapshot`s for both and we will fire `ActivationStart` for both. Always\n   * return\n   * `true` so checks continue to run.\n   */\nfunction fireActivationStart(\n    snapshot: ActivatedRouteSnapshot | null,\n    forwardEvent?: (evt: Event) => void): Observable<boolean> {\n  if (snapshot !== null && forwardEvent) {\n    forwardEvent(new ActivationStart(snapshot));\n  }\n  return of (true);\n}\n\n/**\n   * This should fire off `ChildActivationStart` events for each route being activated at this\n   * level.\n   * In other words, if you're activating `a` and `b` below, `path` will contain the\n   * `ActivatedRouteSnapshot`s for both and we will fire `ChildActivationStart` for both. Always\n   * return\n   * `true` so checks continue to run.\n   */\nfunction fireChildActivationStart(\n    snapshot: ActivatedRouteSnapshot | null,\n    forwardEvent?: (evt: Event) => void): Observable<boolean> {\n  if (snapshot !== null && forwardEvent) {\n    forwardEvent(new ChildActivationStart(snapshot));\n  }\n  return of (true);\n}\n\nfunction runCanActivate(\n    futureRSS: RouterStateSnapshot, futureARS: ActivatedRouteSnapshot,\n    moduleInjector: Injector): Observable<boolean|UrlTree> {\n  const canActivate = futureARS.routeConfig ? futureARS.routeConfig.canActivate : null;\n  if (!canActivate || canActivate.length === 0) return of (true);\n\n  const canActivateObservables = canActivate.map((c: any) => {\n    return defer(() => {\n      const guard = getToken(c, futureARS, moduleInjector);\n      let observable;\n      if (isCanActivate(guard)) {\n        observable = wrapIntoObservable(guard.canActivate(futureARS, futureRSS));\n      } else if (isFunction<CanActivateFn>(guard)) {\n        observable = wrapIntoObservable(guard(futureARS, futureRSS));\n      } else {\n        throw new Error('Invalid CanActivate guard');\n      }\n      return observable.pipe(first());\n    });\n  });\n  return of (canActivateObservables).pipe(prioritizedGuardValue());\n}\n\nfunction runCanActivateChild(\n    futureRSS: RouterStateSnapshot, path: ActivatedRouteSnapshot[],\n    moduleInjector: Injector): Observable<boolean|UrlTree> {\n  const futureARS = path[path.length - 1];\n\n  const canActivateChildGuards = path.slice(0, path.length - 1)\n                                     .reverse()\n                                     .map(p => getCanActivateChild(p))\n                                     .filter(_ => _ !== null);\n\n  const canActivateChildGuardsMapped = canActivateChildGuards.map((d: any) => {\n    return defer(() => {\n      const guardsMapped = d.guards.map((c: any) => {\n        const guard = getToken(c, d.node, moduleInjector);\n        let observable;\n        if (isCanActivateChild(guard)) {\n          observable = wrapIntoObservable(guard.canActivateChild(futureARS, futureRSS));\n        } else if (isFunction<CanActivateChildFn>(guard)) {\n          observable = wrapIntoObservable(guard(futureARS, futureRSS));\n        } else {\n          throw new Error('Invalid CanActivateChild guard');\n        }\n        return observable.pipe(first());\n      });\n      return of (guardsMapped).pipe(prioritizedGuardValue());\n    });\n  });\n  return of (canActivateChildGuardsMapped).pipe(prioritizedGuardValue());\n}\n\nfunction runCanDeactivate(\n    component: Object | null, currARS: ActivatedRouteSnapshot, currRSS: RouterStateSnapshot,\n    futureRSS: RouterStateSnapshot, moduleInjector: Injector): Observable<boolean|UrlTree> {\n  const canDeactivate = currARS && currARS.routeConfig ? currARS.routeConfig.canDeactivate : null;\n  if (!canDeactivate || canDeactivate.length === 0) return of (true);\n  const canDeactivateObservables = canDeactivate.map((c: any) => {\n    const guard = getToken(c, currARS, moduleInjector);\n    let observable;\n    if (isCanDeactivate(guard)) {\n      observable =\n          wrapIntoObservable(guard.canDeactivate(component !, currARS, currRSS, futureRSS));\n    } else if (isFunction<CanDeactivateFn<any>>(guard)) {\n      observable = wrapIntoObservable(guard(component, currARS, currRSS, futureRSS));\n    } else {\n      throw new Error('Invalid CanDeactivate guard');\n    }\n    return observable.pipe(first());\n  });\n  return of (canDeactivateObservables).pipe(prioritizedGuardValue());\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '@angular/core';\nimport {Observable, Observer, of } from 'rxjs';\n\nimport {Data, ResolveData, Route, Routes} from './config';\nimport {ActivatedRouteSnapshot, ParamsInheritanceStrategy, RouterStateSnapshot, inheritedParamsDataResolve} from './router_state';\nimport {PRIMARY_OUTLET, defaultUrlMatcher} from './shared';\nimport {UrlSegment, UrlSegmentGroup, UrlTree, mapChildrenIntoArray} from './url_tree';\nimport {forEach, last} from './utils/collection';\nimport {TreeNode} from './utils/tree';\n\nclass NoMatch {}\n\nexport function recognize(\n    rootComponentType: Type<any>| null, config: Routes, urlTree: UrlTree, url: string,\n    paramsInheritanceStrategy: ParamsInheritanceStrategy = 'emptyOnly',\n    relativeLinkResolution: 'legacy' | 'corrected' = 'legacy'): Observable<RouterStateSnapshot> {\n  return new Recognizer(\n             rootComponentType, config, urlTree, url, paramsInheritanceStrategy,\n             relativeLinkResolution)\n      .recognize();\n}\n\nclass Recognizer {\n  constructor(\n      private rootComponentType: Type<any>|null, private config: Routes, private urlTree: UrlTree,\n      private url: string, private paramsInheritanceStrategy: ParamsInheritanceStrategy,\n      private relativeLinkResolution: 'legacy'|'corrected') {}\n\n  recognize(): Observable<RouterStateSnapshot> {\n    try {\n      const rootSegmentGroup =\n          split(this.urlTree.root, [], [], this.config, this.relativeLinkResolution).segmentGroup;\n\n      const children = this.processSegmentGroup(this.config, rootSegmentGroup, PRIMARY_OUTLET);\n\n      const root = new ActivatedRouteSnapshot(\n          [], Object.freeze({}), Object.freeze({...this.urlTree.queryParams}),\n          this.urlTree.fragment !, {}, PRIMARY_OUTLET, this.rootComponentType, null,\n          this.urlTree.root, -1, {});\n\n      const rootNode = new TreeNode<ActivatedRouteSnapshot>(root, children);\n      const routeState = new RouterStateSnapshot(this.url, rootNode);\n      this.inheritParamsAndData(routeState._root);\n      return of (routeState);\n\n    } catch (e) {\n      return new Observable<RouterStateSnapshot>(\n          (obs: Observer<RouterStateSnapshot>) => obs.error(e));\n    }\n  }\n\n  inheritParamsAndData(routeNode: TreeNode<ActivatedRouteSnapshot>): void {\n    const route = routeNode.value;\n\n    const i = inheritedParamsDataResolve(route, this.paramsInheritanceStrategy);\n    route.params = Object.freeze(i.params);\n    route.data = Object.freeze(i.data);\n\n    routeNode.children.forEach(n => this.inheritParamsAndData(n));\n  }\n\n  processSegmentGroup(config: Route[], segmentGroup: UrlSegmentGroup, outlet: string):\n      TreeNode<ActivatedRouteSnapshot>[] {\n    if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {\n      return this.processChildren(config, segmentGroup);\n    }\n\n    return this.processSegment(config, segmentGroup, segmentGroup.segments, outlet);\n  }\n\n  processChildren(config: Route[], segmentGroup: UrlSegmentGroup):\n      TreeNode<ActivatedRouteSnapshot>[] {\n    const children = mapChildrenIntoArray(\n        segmentGroup, (child, childOutlet) => this.processSegmentGroup(config, child, childOutlet));\n    checkOutletNameUniqueness(children);\n    sortActivatedRouteSnapshots(children);\n    return children;\n  }\n\n  processSegment(\n      config: Route[], segmentGroup: UrlSegmentGroup, segments: UrlSegment[],\n      outlet: string): TreeNode<ActivatedRouteSnapshot>[] {\n    for (const r of config) {\n      try {\n        return this.processSegmentAgainstRoute(r, segmentGroup, segments, outlet);\n      } catch (e) {\n        if (!(e instanceof NoMatch)) throw e;\n      }\n    }\n    if (this.noLeftoversInUrl(segmentGroup, segments, outlet)) {\n      return [];\n    }\n\n    throw new NoMatch();\n  }\n\n  private noLeftoversInUrl(segmentGroup: UrlSegmentGroup, segments: UrlSegment[], outlet: string):\n      boolean {\n    return segments.length === 0 && !segmentGroup.children[outlet];\n  }\n\n  processSegmentAgainstRoute(\n      route: Route, rawSegment: UrlSegmentGroup, segments: UrlSegment[],\n      outlet: string): TreeNode<ActivatedRouteSnapshot>[] {\n    if (route.redirectTo) throw new NoMatch();\n\n    if ((route.outlet || PRIMARY_OUTLET) !== outlet) throw new NoMatch();\n\n    let snapshot: ActivatedRouteSnapshot;\n    let consumedSegments: UrlSegment[] = [];\n    let rawSlicedSegments: UrlSegment[] = [];\n\n    if (route.path === '**') {\n      const params = segments.length > 0 ? last(segments) !.parameters : {};\n      snapshot = new ActivatedRouteSnapshot(\n          segments, params, Object.freeze({...this.urlTree.queryParams}), this.urlTree.fragment !,\n          getData(route), outlet, route.component !, route, getSourceSegmentGroup(rawSegment),\n          getPathIndexShift(rawSegment) + segments.length, getResolve(route));\n    } else {\n      const result: MatchResult = match(rawSegment, route, segments);\n      consumedSegments = result.consumedSegments;\n      rawSlicedSegments = segments.slice(result.lastChild);\n\n      snapshot = new ActivatedRouteSnapshot(\n          consumedSegments, result.parameters, Object.freeze({...this.urlTree.queryParams}),\n          this.urlTree.fragment !, getData(route), outlet, route.component !, route,\n          getSourceSegmentGroup(rawSegment),\n          getPathIndexShift(rawSegment) + consumedSegments.length, getResolve(route));\n    }\n\n    const childConfig: Route[] = getChildConfig(route);\n\n    const {segmentGroup, slicedSegments} = split(\n        rawSegment, consumedSegments, rawSlicedSegments, childConfig, this.relativeLinkResolution);\n\n    if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {\n      const children = this.processChildren(childConfig, segmentGroup);\n      return [new TreeNode<ActivatedRouteSnapshot>(snapshot, children)];\n    }\n\n    if (childConfig.length === 0 && slicedSegments.length === 0) {\n      return [new TreeNode<ActivatedRouteSnapshot>(snapshot, [])];\n    }\n\n    const children = this.processSegment(childConfig, segmentGroup, slicedSegments, PRIMARY_OUTLET);\n    return [new TreeNode<ActivatedRouteSnapshot>(snapshot, children)];\n  }\n}\n\nfunction sortActivatedRouteSnapshots(nodes: TreeNode<ActivatedRouteSnapshot>[]): void {\n  nodes.sort((a, b) => {\n    if (a.value.outlet === PRIMARY_OUTLET) return -1;\n    if (b.value.outlet === PRIMARY_OUTLET) return 1;\n    return a.value.outlet.localeCompare(b.value.outlet);\n  });\n}\n\nfunction getChildConfig(route: Route): Route[] {\n  if (route.children) {\n    return route.children;\n  }\n\n  if (route.loadChildren) {\n    return route._loadedConfig !.routes;\n  }\n\n  return [];\n}\n\ninterface MatchResult {\n  consumedSegments: UrlSegment[];\n  lastChild: number;\n  parameters: any;\n}\n\nfunction match(segmentGroup: UrlSegmentGroup, route: Route, segments: UrlSegment[]): MatchResult {\n  if (route.path === '') {\n    if (route.pathMatch === 'full' && (segmentGroup.hasChildren() || segments.length > 0)) {\n      throw new NoMatch();\n    }\n\n    return {consumedSegments: [], lastChild: 0, parameters: {}};\n  }\n\n  const matcher = route.matcher || defaultUrlMatcher;\n  const res = matcher(segments, segmentGroup, route);\n  if (!res) throw new NoMatch();\n\n  const posParams: {[n: string]: string} = {};\n  forEach(res.posParams !, (v: UrlSegment, k: string) => { posParams[k] = v.path; });\n  const parameters = res.consumed.length > 0 ?\n      {...posParams, ...res.consumed[res.consumed.length - 1].parameters} :\n      posParams;\n\n  return {consumedSegments: res.consumed, lastChild: res.consumed.length, parameters};\n}\n\nfunction checkOutletNameUniqueness(nodes: TreeNode<ActivatedRouteSnapshot>[]): void {\n  const names: {[k: string]: ActivatedRouteSnapshot} = {};\n  nodes.forEach(n => {\n    const routeWithSameOutletName = names[n.value.outlet];\n    if (routeWithSameOutletName) {\n      const p = routeWithSameOutletName.url.map(s => s.toString()).join('/');\n      const c = n.value.url.map(s => s.toString()).join('/');\n      throw new Error(`Two segments cannot have the same outlet name: '${p}' and '${c}'.`);\n    }\n    names[n.value.outlet] = n.value;\n  });\n}\n\nfunction getSourceSegmentGroup(segmentGroup: UrlSegmentGroup): UrlSegmentGroup {\n  let s = segmentGroup;\n  while (s._sourceSegment) {\n    s = s._sourceSegment;\n  }\n  return s;\n}\n\nfunction getPathIndexShift(segmentGroup: UrlSegmentGroup): number {\n  let s = segmentGroup;\n  let res = (s._segmentIndexShift ? s._segmentIndexShift : 0);\n  while (s._sourceSegment) {\n    s = s._sourceSegment;\n    res += (s._segmentIndexShift ? s._segmentIndexShift : 0);\n  }\n  return res - 1;\n}\n\nfunction split(\n    segmentGroup: UrlSegmentGroup, consumedSegments: UrlSegment[], slicedSegments: UrlSegment[],\n    config: Route[], relativeLinkResolution: 'legacy' | 'corrected') {\n  if (slicedSegments.length > 0 &&\n      containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, config)) {\n    const s = new UrlSegmentGroup(\n        consumedSegments, createChildrenForEmptyPaths(\n                              segmentGroup, consumedSegments, config,\n                              new UrlSegmentGroup(slicedSegments, segmentGroup.children)));\n    s._sourceSegment = segmentGroup;\n    s._segmentIndexShift = consumedSegments.length;\n    return {segmentGroup: s, slicedSegments: []};\n  }\n\n  if (slicedSegments.length === 0 &&\n      containsEmptyPathMatches(segmentGroup, slicedSegments, config)) {\n    const s = new UrlSegmentGroup(\n        segmentGroup.segments, addEmptyPathsToChildrenIfNeeded(\n                                   segmentGroup, consumedSegments, slicedSegments, config,\n                                   segmentGroup.children, relativeLinkResolution));\n    s._sourceSegment = segmentGroup;\n    s._segmentIndexShift = consumedSegments.length;\n    return {segmentGroup: s, slicedSegments};\n  }\n\n  const s = new UrlSegmentGroup(segmentGroup.segments, segmentGroup.children);\n  s._sourceSegment = segmentGroup;\n  s._segmentIndexShift = consumedSegments.length;\n  return {segmentGroup: s, slicedSegments};\n}\n\nfunction addEmptyPathsToChildrenIfNeeded(\n    segmentGroup: UrlSegmentGroup, consumedSegments: UrlSegment[], slicedSegments: UrlSegment[],\n    routes: Route[], children: {[name: string]: UrlSegmentGroup},\n    relativeLinkResolution: 'legacy' | 'corrected'): {[name: string]: UrlSegmentGroup} {\n  const res: {[name: string]: UrlSegmentGroup} = {};\n  for (const r of routes) {\n    if (emptyPathMatch(segmentGroup, slicedSegments, r) && !children[getOutlet(r)]) {\n      const s = new UrlSegmentGroup([], {});\n      s._sourceSegment = segmentGroup;\n      if (relativeLinkResolution === 'legacy') {\n        s._segmentIndexShift = segmentGroup.segments.length;\n      } else {\n        s._segmentIndexShift = consumedSegments.length;\n      }\n      res[getOutlet(r)] = s;\n    }\n  }\n  return {...children, ...res};\n}\n\nfunction createChildrenForEmptyPaths(\n    segmentGroup: UrlSegmentGroup, consumedSegments: UrlSegment[], routes: Route[],\n    primarySegment: UrlSegmentGroup): {[name: string]: UrlSegmentGroup} {\n  const res: {[name: string]: UrlSegmentGroup} = {};\n  res[PRIMARY_OUTLET] = primarySegment;\n  primarySegment._sourceSegment = segmentGroup;\n  primarySegment._segmentIndexShift = consumedSegments.length;\n\n  for (const r of routes) {\n    if (r.path === '' && getOutlet(r) !== PRIMARY_OUTLET) {\n      const s = new UrlSegmentGroup([], {});\n      s._sourceSegment = segmentGroup;\n      s._segmentIndexShift = consumedSegments.length;\n      res[getOutlet(r)] = s;\n    }\n  }\n  return res;\n}\n\nfunction containsEmptyPathMatchesWithNamedOutlets(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], routes: Route[]): boolean {\n  return routes.some(\n      r => emptyPathMatch(segmentGroup, slicedSegments, r) && getOutlet(r) !== PRIMARY_OUTLET);\n}\n\nfunction containsEmptyPathMatches(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], routes: Route[]): boolean {\n  return routes.some(r => emptyPathMatch(segmentGroup, slicedSegments, r));\n}\n\nfunction emptyPathMatch(\n    segmentGroup: UrlSegmentGroup, slicedSegments: UrlSegment[], r: Route): boolean {\n  if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && r.pathMatch === 'full') {\n    return false;\n  }\n\n  return r.path === '' && r.redirectTo === undefined;\n}\n\nfunction getOutlet(route: Route): string {\n  return route.outlet || PRIMARY_OUTLET;\n}\n\nfunction getData(route: Route): Data {\n  return route.data || {};\n}\n\nfunction getResolve(route: Route): ResolveData {\n  return route.resolve || {};\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '@angular/core';\nimport {MonoTypeOperatorFunction, Observable} from 'rxjs';\nimport {map, mergeMap} from 'rxjs/operators';\n\nimport {Route} from '../config';\nimport {recognize as recognizeFn} from '../recognize';\nimport {NavigationTransition} from '../router';\nimport {UrlTree} from '../url_tree';\n\nexport function recognize(\n    rootComponentType: Type<any>| null, config: Route[], serializer: (url: UrlTree) => string,\n    paramsInheritanceStrategy: 'emptyOnly' | 'always', relativeLinkResolution: 'legacy' |\n        'corrected'): MonoTypeOperatorFunction<NavigationTransition> {\n  return function(source: Observable<NavigationTransition>) {\n    return source.pipe(mergeMap(\n        t => recognizeFn(\n                 rootComponentType, config, t.urlAfterRedirects, serializer(t.urlAfterRedirects),\n                 paramsInheritanceStrategy, relativeLinkResolution)\n                 .pipe(map(targetSnapshot => ({...t, targetSnapshot})))));\n  };\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector} from '@angular/core';\nimport {MonoTypeOperatorFunction, Observable, from, of } from 'rxjs';\nimport {concatMap, last, map, mergeMap, reduce} from 'rxjs/operators';\n\nimport {ResolveData} from '../config';\nimport {NavigationTransition} from '../router';\nimport {ActivatedRouteSnapshot, RouterStateSnapshot, inheritedParamsDataResolve} from '../router_state';\nimport {wrapIntoObservable} from '../utils/collection';\n\nimport {getToken} from '../utils/preactivation';\n\nexport function resolveData(\n    paramsInheritanceStrategy: 'emptyOnly' | 'always',\n    moduleInjector: Injector): MonoTypeOperatorFunction<NavigationTransition> {\n  return function(source: Observable<NavigationTransition>) {\n    return source.pipe(mergeMap(t => {\n      const {targetSnapshot, guards: {canActivateChecks}} = t;\n\n      if (!canActivateChecks.length) {\n        return of (t);\n      }\n\n      return from(canActivateChecks)\n          .pipe(\n              concatMap(\n                  check => runResolve(\n                      check.route, targetSnapshot !, paramsInheritanceStrategy, moduleInjector)),\n              reduce((_: any, __: any) => _), map(_ => t));\n    }));\n  };\n}\n\nfunction runResolve(\n    futureARS: ActivatedRouteSnapshot, futureRSS: RouterStateSnapshot,\n    paramsInheritanceStrategy: 'emptyOnly' | 'always', moduleInjector: Injector) {\n  const resolve = futureARS._resolve;\n  return resolveNode(resolve, futureARS, futureRSS, moduleInjector)\n      .pipe(map((resolvedData: any) => {\n        futureARS._resolvedData = resolvedData;\n        futureARS.data = {\n            ...futureARS.data,\n            ...inheritedParamsDataResolve(futureARS, paramsInheritanceStrategy).resolve};\n        return null;\n      }));\n}\n\nfunction resolveNode(\n    resolve: ResolveData, futureARS: ActivatedRouteSnapshot, futureRSS: RouterStateSnapshot,\n    moduleInjector: Injector): Observable<any> {\n  const keys = Object.keys(resolve);\n  if (keys.length === 0) {\n    return of ({});\n  }\n  if (keys.length === 1) {\n    const key = keys[0];\n    return getResolver(resolve[key], futureARS, futureRSS, moduleInjector)\n        .pipe(map((value: any) => { return {[key]: value}; }));\n  }\n  const data: {[k: string]: any} = {};\n  const runningResolvers$ = from(keys).pipe(mergeMap((key: string) => {\n    return getResolver(resolve[key], futureARS, futureRSS, moduleInjector)\n        .pipe(map((value: any) => {\n          data[key] = value;\n          return value;\n        }));\n  }));\n  return runningResolvers$.pipe(last(), map(() => data));\n}\n\nfunction getResolver(\n    injectionToken: any, futureARS: ActivatedRouteSnapshot, futureRSS: RouterStateSnapshot,\n    moduleInjector: Injector): Observable<any> {\n  const resolver = getToken(injectionToken, futureARS, moduleInjector);\n  return resolver.resolve ? wrapIntoObservable(resolver.resolve(futureARS, futureRSS)) :\n                            wrapIntoObservable(resolver(futureARS, futureRSS));\n}","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MonoTypeOperatorFunction, ObservableInput, from} from 'rxjs';\nimport {map, switchMap} from 'rxjs/operators';\n\n/**\n * Perform a side effect through a switchMap for every emission on the source Observable,\n * but return an Observable that is identical to the source. It's essentially the same as\n * the `tap` operator, but if the side effectful `next` function returns an ObservableInput,\n * it will wait before continuing with the original value.\n */\nexport function switchTap<T>(next: (x: T) => void|ObservableInput<any>):\n    MonoTypeOperatorFunction<T> {\n  return function(source) {\n    return source.pipe(switchMap(v => {\n      const nextResult = next(v);\n      if (nextResult) {\n        return from(nextResult).pipe(map(() => v));\n      }\n      return from([v]);\n    }));\n  };\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentRef} from '@angular/core';\n\nimport {OutletContext} from './router_outlet_context';\nimport {ActivatedRoute, ActivatedRouteSnapshot} from './router_state';\nimport {TreeNode} from './utils/tree';\n\n/**\n * @description\n *\n * Represents the detached route tree.\n *\n * This is an opaque value the router will give to a custom route reuse strategy\n * to store and retrieve later on.\n *\n * @publicApi\n */\nexport type DetachedRouteHandle = {};\n\n/** @internal */\nexport type DetachedRouteHandleInternal = {\n  contexts: Map<string, OutletContext>,\n  componentRef: ComponentRef<any>,\n  route: TreeNode<ActivatedRoute>,\n};\n\n/**\n * @description\n *\n * Provides a way to customize when activated routes get reused.\n *\n * @publicApi\n */\nexport abstract class RouteReuseStrategy {\n  /** Determines if this route (and its subtree) should be detached to be reused later */\n  abstract shouldDetach(route: ActivatedRouteSnapshot): boolean;\n\n  /**\n   * Stores the detached route.\n   *\n   * Storing a `null` value should erase the previously stored value.\n   */\n  abstract store(route: ActivatedRouteSnapshot, handle: DetachedRouteHandle|null): void;\n\n  /** Determines if this route (and its subtree) should be reattached */\n  abstract shouldAttach(route: ActivatedRouteSnapshot): boolean;\n\n  /** Retrieves the previously stored route */\n  abstract retrieve(route: ActivatedRouteSnapshot): DetachedRouteHandle|null;\n\n  /** Determines if a route should be reused */\n  abstract shouldReuseRoute(future: ActivatedRouteSnapshot, curr: ActivatedRouteSnapshot): boolean;\n}\n\n/**\n * Does not detach any subtrees. Reuses routes as long as their route config is the same.\n */\nexport class DefaultRouteReuseStrategy implements RouteReuseStrategy {\n  shouldDetach(route: ActivatedRouteSnapshot): boolean { return false; }\n  store(route: ActivatedRouteSnapshot, detachedTree: DetachedRouteHandle): void {}\n  shouldAttach(route: ActivatedRouteSnapshot): boolean { return false; }\n  retrieve(route: ActivatedRouteSnapshot): DetachedRouteHandle|null { return null; }\n  shouldReuseRoute(future: ActivatedRouteSnapshot, curr: ActivatedRouteSnapshot): boolean {\n    return future.routeConfig === curr.routeConfig;\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Compiler, InjectionToken, Injector, NgModuleFactory, NgModuleFactoryLoader} from '@angular/core';\nimport {Observable, from, of } from 'rxjs';\nimport {map, mergeMap} from 'rxjs/operators';\nimport {LoadChildren, LoadedRouterConfig, Route, standardizeConfig} from './config';\nimport {flatten, wrapIntoObservable} from './utils/collection';\n\n/**\n * The [DI token](guide/glossary/#di-token) for a router configuration.\n * @see `ROUTES`\n * @publicApi\n */\nexport const ROUTES = new InjectionToken<Route[][]>('ROUTES');\n\nexport class RouterConfigLoader {\n  constructor(\n      private loader: NgModuleFactoryLoader, private compiler: Compiler,\n      private onLoadStartListener?: (r: Route) => void,\n      private onLoadEndListener?: (r: Route) => void) {}\n\n  load(parentInjector: Injector, route: Route): Observable<LoadedRouterConfig> {\n    if (this.onLoadStartListener) {\n      this.onLoadStartListener(route);\n    }\n\n    const moduleFactory$ = this.loadModuleFactory(route.loadChildren !);\n\n    return moduleFactory$.pipe(map((factory: NgModuleFactory<any>) => {\n      if (this.onLoadEndListener) {\n        this.onLoadEndListener(route);\n      }\n\n      const module = factory.create(parentInjector);\n\n      return new LoadedRouterConfig(\n          flatten(module.injector.get(ROUTES)).map(standardizeConfig), module);\n    }));\n  }\n\n  private loadModuleFactory(loadChildren: LoadChildren): Observable<NgModuleFactory<any>> {\n    if (typeof loadChildren === 'string') {\n      return from(this.loader.load(loadChildren));\n    } else {\n      return wrapIntoObservable(loadChildren()).pipe(mergeMap((t: any) => {\n        if (t instanceof NgModuleFactory) {\n          return of (t);\n        } else {\n          return from(this.compiler.compileModuleAsync(t));\n        }\n      }));\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {UrlTree} from './url_tree';\n\n/**\n * @description\n *\n * Provides a way to migrate AngularJS applications to Angular.\n *\n * @publicApi\n */\nexport abstract class UrlHandlingStrategy {\n  /**\n   * Tells the router if this URL should be processed.\n   *\n   * When it returns true, the router will execute the regular navigation.\n   * When it returns false, the router will set the router state to an empty state.\n   * As a result, all the active components will be destroyed.\n   *\n   */\n  abstract shouldProcessUrl(url: UrlTree): boolean;\n\n  /**\n   * Extracts the part of the URL that should be handled by the router.\n   * The rest of the URL will remain untouched.\n   */\n  abstract extract(url: UrlTree): UrlTree;\n\n  /**\n   * Merges the URL fragment with the rest of the URL.\n   */\n  abstract merge(newUrlPart: UrlTree, rawUrl: UrlTree): UrlTree;\n}\n\n/**\n * @publicApi\n */\nexport class DefaultUrlHandlingStrategy implements UrlHandlingStrategy {\n  shouldProcessUrl(url: UrlTree): boolean { return true; }\n  extract(url: UrlTree): UrlTree { return url; }\n  merge(newUrlPart: UrlTree, wholeUrl: UrlTree): UrlTree { return newUrlPart; }\n}","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {Compiler, Injector, NgModuleFactoryLoader, NgModuleRef, NgZone, Type, isDevMode, ÉµConsole as Console} from '@angular/core';\nimport {BehaviorSubject, EMPTY, Observable, Subject, Subscription, defer, of } from 'rxjs';\nimport {catchError, filter, finalize, map, switchMap, tap} from 'rxjs/operators';\n\nimport {QueryParamsHandling, Route, Routes, standardizeConfig, validateConfig} from './config';\nimport {createRouterState} from './create_router_state';\nimport {createUrlTree} from './create_url_tree';\nimport {Event, GuardsCheckEnd, GuardsCheckStart, NavigationCancel, NavigationEnd, NavigationError, NavigationStart, NavigationTrigger, ResolveEnd, ResolveStart, RouteConfigLoadEnd, RouteConfigLoadStart, RoutesRecognized} from './events';\nimport {activateRoutes} from './operators/activate_routes';\nimport {applyRedirects} from './operators/apply_redirects';\nimport {checkGuards} from './operators/check_guards';\nimport {recognize} from './operators/recognize';\nimport {resolveData} from './operators/resolve_data';\nimport {switchTap} from './operators/switch_tap';\nimport {DefaultRouteReuseStrategy, RouteReuseStrategy} from './route_reuse_strategy';\nimport {RouterConfigLoader} from './router_config_loader';\nimport {ChildrenOutletContexts} from './router_outlet_context';\nimport {ActivatedRoute, RouterState, RouterStateSnapshot, createEmptyState} from './router_state';\nimport {Params, isNavigationCancelingError, navigationCancelingError} from './shared';\nimport {DefaultUrlHandlingStrategy, UrlHandlingStrategy} from './url_handling_strategy';\nimport {UrlSerializer, UrlTree, containsTree, createEmptyUrlTree} from './url_tree';\nimport {Checks, getAllRouteGuards} from './utils/preactivation';\nimport {isUrlTree} from './utils/type_guards';\n\n\n\n/**\n * @description\n *\n * Options that modify the navigation strategy.\n *\n * @publicApi\n */\nexport interface NavigationExtras {\n  /**\n   * Specifies a root URI to use for relative navigation.\n   *\n   * For example, consider the following route configuration where the parent route\n   * has two children.\n   *\n   * ```\n   * [{\n  *   path: 'parent',\n  *   component: ParentComponent,\n  *   children: [{\n  *     path: 'list',\n  *     component: ListComponent\n  *   },{\n  *     path: 'child',\n  *     component: ChildComponent\n  *   }]\n  * }]\n   * ```\n   *\n   * The following `go()` function navigates to the `list` route by\n   * interpreting the destination URI as relative to the activated `child`  route\n   *\n   * ```\n   *  @Component({...})\n   *  class ChildComponent {\n  *    constructor(private router: Router, private route: ActivatedRoute) {}\n  *\n  *    go() {\n  *      this.router.navigate(['../list'], { relativeTo: this.route });\n  *    }\n  *  }\n   * ```\n   */\n  relativeTo?: ActivatedRoute|null;\n\n  /**\n   * Sets query parameters to the URL.\n   *\n   * ```\n   * // Navigate to /results?page=1\n   * this.router.navigate(['/results'], { queryParams: { page: 1 } });\n   * ```\n   */\n  queryParams?: Params|null;\n\n  /**\n   * Sets the hash fragment for the URL.\n   *\n   * ```\n   * // Navigate to /results#top\n   * this.router.navigate(['/results'], { fragment: 'top' });\n   * ```\n   */\n  fragment?: string;\n\n  /**\n   * **DEPRECATED**: Use `queryParamsHandling: \"preserve\"` instead to preserve\n   * query parameters for the next navigation.\n   *\n   * @deprecated since v4\n   */\n  preserveQueryParams?: boolean;\n\n  /**\n   * How to handle query parameters in the router link for the next navigation.\n   * One of:\n   * * `merge` : Merge new with current parameters.\n   * * `preserve` : Preserve current parameters.\n   *\n   * ```\n   * // from /results?page=1 to /view?page=1&page=2\n   * this.router.navigate(['/view'], { queryParams: { page: 2 },  queryParamsHandling: \"merge\" });\n   * ```\n   */\n  queryParamsHandling?: QueryParamsHandling|null;\n  /**\n   * When true, preserves the URL fragment for the next navigation\n   *\n   * ```\n   * // Preserve fragment from /results#top to /view#top\n   * this.router.navigate(['/view'], { preserveFragment: true });\n   * ```\n   */\n  preserveFragment?: boolean;\n  /**\n   * When true, navigates without pushing a new state into history.\n   *\n   * ```\n   * // Navigate silently to /view\n   * this.router.navigate(['/view'], { skipLocationChange: true });\n   * ```\n   */\n  skipLocationChange?: boolean;\n  /**\n   * When true, navigates while replacing the current state in history.\n   *\n   * ```\n   * // Navigate to /view\n   * this.router.navigate(['/view'], { replaceUrl: true });\n   * ```\n   */\n  replaceUrl?: boolean;\n  /**\n   * Developer-defined state that can be passed to any navigation.\n   * Access this value through the `Navigation.extras` object\n   * returned from `router.getCurrentNavigation()` while a navigation is executing.\n   *\n   * After a navigation completes, the router writes an object containing this\n   * value together with a `navigationId` to `history.state`.\n   * The value is written when `location.go()` or `location.replaceState()`\n   * is called before activating this route.\n   *\n   * Note that `history.state` does not pass an object equality test because\n   * the router adds the `navigationId` on each navigation.\n   */\n  state?: {[k: string]: any};\n}\n\n/**\n * Error handler that is invoked when a navigation error occurs.\n *\n * If the handler returns a value, the navigation promise is resolved with this value.\n * If the handler throws an exception, the navigation promise is rejected with\n * the exception.\n *\n * @publicApi\n */\nexport type ErrorHandler = (error: any) => any;\n\nfunction defaultErrorHandler(error: any): any {\n  throw error;\n}\n\nfunction defaultMalformedUriErrorHandler(\n    error: URIError, urlSerializer: UrlSerializer, url: string): UrlTree {\n  return urlSerializer.parse('/');\n}\n\nexport type RestoredState = {\n  [k: string]: any; navigationId: number;\n};\n\n/**\n * Information about a navigation operation. Retrieve the most recent\n * navigation object with the `router.getCurrentNavigation()` method.\n *\n * @publicApi\n */\nexport type Navigation = {\n  /**\n   * The ID of the current navigation.\n   */\n  id: number;\n  /**\n   * The target URL passed into the `Router#navigateByUrl()` call before navigation. This is\n   * the value before the router has parsed or applied redirects to it.\n   */\n  initialUrl: string | UrlTree;\n  /**\n   * The initial target URL after being parsed with `UrlSerializer.extract()`.\n   */\n  extractedUrl: UrlTree;\n  /**\n   * The extracted URL after redirects have been applied.\n   * This URL may not be available immediately, therefore this property can be `undefined`.\n   * It is guaranteed to be set after the `RoutesRecognized` event fires.\n   */\n  finalUrl?: UrlTree;\n  /**\n   * Identifies how this navigation was triggered.\n   *\n   * * 'imperative'--Triggered by `router.navigateByUrl` or `router.navigate`.\n   * * 'popstate'--Triggered by a popstate event.\n   * * 'hashchange'--Triggered by a hashchange event.\n   */\n  trigger: 'imperative' | 'popstate' | 'hashchange';\n  /**\n   * Options that controlled the strategy used for this navigation.\n   * See `NavigationExtras`.\n   */\n  extras: NavigationExtras;\n  /**\n   * The previously successful `Navigation` object. Only one previous navigation\n   * is available, therefore this previous `Navigation` object has a `null` value\n   * for its own `previousNavigation`.\n   */\n  previousNavigation: Navigation | null;\n};\n\nexport type NavigationTransition = {\n  id: number,\n  currentUrlTree: UrlTree,\n  currentRawUrl: UrlTree,\n  extractedUrl: UrlTree,\n  urlAfterRedirects: UrlTree,\n  rawUrl: UrlTree,\n  extras: NavigationExtras,\n  resolve: any,\n  reject: any,\n  promise: Promise<boolean>,\n  source: NavigationTrigger,\n  restoredState: RestoredState | null,\n  currentSnapshot: RouterStateSnapshot,\n  targetSnapshot: RouterStateSnapshot | null,\n  currentRouterState: RouterState,\n  targetRouterState: RouterState | null,\n  guards: Checks,\n  guardsResult: boolean | UrlTree | null,\n};\n\n/**\n * @internal\n */\nexport type RouterHook = (snapshot: RouterStateSnapshot, runExtras: {\n  appliedUrlTree: UrlTree,\n  rawUrlTree: UrlTree,\n  skipLocationChange: boolean,\n  replaceUrl: boolean,\n  navigationId: number\n}) => Observable<void>;\n\n/**\n * @internal\n */\nfunction defaultRouterHook(snapshot: RouterStateSnapshot, runExtras: {\n  appliedUrlTree: UrlTree,\n  rawUrlTree: UrlTree,\n  skipLocationChange: boolean,\n  replaceUrl: boolean,\n  navigationId: number\n}): Observable<void> {\n  return of (null) as any;\n}\n\n/**\n * @description\n *\n * A service that provides navigation and URL manipulation capabilities.\n *\n * @see `Route`.\n * @see [Routing and Navigation Guide](guide/router).\n *\n * @ngModule RouterModule\n *\n * @publicApi\n */\nexport class Router {\n  private currentUrlTree: UrlTree;\n  private rawUrlTree: UrlTree;\n  private browserUrlTree: UrlTree;\n  private readonly transitions: BehaviorSubject<NavigationTransition>;\n  private navigations: Observable<NavigationTransition>;\n  private lastSuccessfulNavigation: Navigation|null = null;\n  private currentNavigation: Navigation|null = null;\n\n  // TODO(issue/24571): remove '!'.\n  private locationSubscription !: Subscription;\n  private navigationId: number = 0;\n  private configLoader: RouterConfigLoader;\n  private ngModule: NgModuleRef<any>;\n  private console: Console;\n  private isNgZoneEnabled: boolean = false;\n\n  /**\n   * An event stream for routing events in this NgModule.\n   */\n  public readonly events: Observable<Event> = new Subject<Event>();\n  /**\n   * The current state of routing in this NgModule.\n   */\n  public readonly routerState: RouterState;\n\n  /**\n   * A handler for navigation errors in this NgModule.\n   */\n  errorHandler: ErrorHandler = defaultErrorHandler;\n\n  /**\n   * A handler for errors thrown by `Router.parseUrl(url)`\n   * when `url` contains an invalid character.\n   * The most common case is a `%` sign\n   * that's not encoded and is not part of a percent encoded sequence.\n   */\n  malformedUriErrorHandler:\n      (error: URIError, urlSerializer: UrlSerializer,\n       url: string) => UrlTree = defaultMalformedUriErrorHandler;\n\n  /**\n   * True if at least one navigation event has occurred,\n   * false otherwise.\n   */\n  navigated: boolean = false;\n  private lastSuccessfulId: number = -1;\n\n  /**\n   * Hooks that enable you to pause navigation,\n   * either before or after the preactivation phase.\n   * Used by `RouterModule`.\n   *\n   * @internal\n   */\n  hooks: {beforePreactivation: RouterHook, afterPreactivation: RouterHook} = {\n    beforePreactivation: defaultRouterHook,\n    afterPreactivation: defaultRouterHook\n  };\n\n  /**\n   * A strategy for extracting and merging URLs.\n   * Used for AngularJS to Angular migrations.\n   */\n  urlHandlingStrategy: UrlHandlingStrategy = new DefaultUrlHandlingStrategy();\n\n  /**\n   * A strategy for re-using routes.\n   */\n  routeReuseStrategy: RouteReuseStrategy = new DefaultRouteReuseStrategy();\n\n  /**\n   * How to handle a navigation request to the current URL. One of:\n   * - `'ignore'` :  The router ignores the request.\n   * - `'reload'` : The router reloads the URL. Use to implement a \"refresh\" feature.\n   */\n  onSameUrlNavigation: 'reload'|'ignore' = 'ignore';\n\n  /**\n   * How to merge parameters, data, and resolved data from parent to child\n   * routes. One of:\n   *\n   * - `'emptyOnly'` : Inherit parent parameters, data, and resolved data\n   * for path-less or component-less routes.\n   * - `'always'` : Inherit parent parameters, data, and resolved data\n   * for all child routes.\n   */\n  paramsInheritanceStrategy: 'emptyOnly'|'always' = 'emptyOnly';\n\n  /**\n   * Determines when the router updates the browser URL.\n   * By default (`\"deferred\"`), updates the browser URL after navigation has finished.\n   * Set to `'eager'` to update the browser URL at the beginning of navigation.\n   * You can choose to update early so that, if navigation fails,\n   * you can show an error message with the URL that failed.\n   */\n  urlUpdateStrategy: 'deferred'|'eager' = 'deferred';\n\n  /**\n   * Enables a bug fix that corrects relative link resolution in components with empty paths.\n   * @see `RouterModule`\n   */\n  relativeLinkResolution: 'legacy'|'corrected' = 'legacy';\n\n  /**\n   * Creates the router service.\n   */\n  // TODO: vsavkin make internal after the final is out.\n  constructor(\n      private rootComponentType: Type<any>|null, private urlSerializer: UrlSerializer,\n      private rootContexts: ChildrenOutletContexts, private location: Location, injector: Injector,\n      loader: NgModuleFactoryLoader, compiler: Compiler, public config: Routes) {\n    const onLoadStart = (r: Route) => this.triggerEvent(new RouteConfigLoadStart(r));\n    const onLoadEnd = (r: Route) => this.triggerEvent(new RouteConfigLoadEnd(r));\n\n    this.ngModule = injector.get(NgModuleRef);\n    this.console = injector.get(Console);\n    const ngZone = injector.get(NgZone);\n    this.isNgZoneEnabled = ngZone instanceof NgZone;\n\n    this.resetConfig(config);\n    this.currentUrlTree = createEmptyUrlTree();\n    this.rawUrlTree = this.currentUrlTree;\n    this.browserUrlTree = this.currentUrlTree;\n\n    this.configLoader = new RouterConfigLoader(loader, compiler, onLoadStart, onLoadEnd);\n    this.routerState = createEmptyState(this.currentUrlTree, this.rootComponentType);\n\n    this.transitions = new BehaviorSubject<NavigationTransition>({\n      id: 0,\n      currentUrlTree: this.currentUrlTree,\n      currentRawUrl: this.currentUrlTree,\n      extractedUrl: this.urlHandlingStrategy.extract(this.currentUrlTree),\n      urlAfterRedirects: this.urlHandlingStrategy.extract(this.currentUrlTree),\n      rawUrl: this.currentUrlTree,\n      extras: {},\n      resolve: null,\n      reject: null,\n      promise: Promise.resolve(true),\n      source: 'imperative',\n      restoredState: null,\n      currentSnapshot: this.routerState.snapshot,\n      targetSnapshot: null,\n      currentRouterState: this.routerState,\n      targetRouterState: null,\n      guards: {canActivateChecks: [], canDeactivateChecks: []},\n      guardsResult: null,\n    });\n    this.navigations = this.setupNavigations(this.transitions);\n\n    this.processNavigations();\n  }\n\n  private setupNavigations(transitions: Observable<NavigationTransition>):\n      Observable<NavigationTransition> {\n    const eventsSubject = (this.events as Subject<Event>);\n    return transitions.pipe(\n        filter(t => t.id !== 0),\n\n        // Extract URL\n        map(t => ({\n              ...t, extractedUrl: this.urlHandlingStrategy.extract(t.rawUrl)\n            } as NavigationTransition)),\n\n        // Using switchMap so we cancel executing navigations when a new one comes in\n        switchMap(t => {\n          let completed = false;\n          let errored = false;\n          return of (t).pipe(\n              // Store the Navigation object\n              tap(t => {\n                this.currentNavigation = {\n                  id: t.id,\n                  initialUrl: t.currentRawUrl,\n                  extractedUrl: t.extractedUrl,\n                  trigger: t.source,\n                  extras: t.extras,\n                  previousNavigation: this.lastSuccessfulNavigation ?\n                      {...this.lastSuccessfulNavigation, previousNavigation: null} :\n                      null\n                };\n              }),\n              switchMap(t => {\n                const urlTransition =\n                    !this.navigated || t.extractedUrl.toString() !== this.browserUrlTree.toString();\n                const processCurrentUrl =\n                    (this.onSameUrlNavigation === 'reload' ? true : urlTransition) &&\n                    this.urlHandlingStrategy.shouldProcessUrl(t.rawUrl);\n\n                if (processCurrentUrl) {\n                  return of (t).pipe(\n                      // Fire NavigationStart event\n                      switchMap(t => {\n                        const transition = this.transitions.getValue();\n                        eventsSubject.next(new NavigationStart(\n                            t.id, this.serializeUrl(t.extractedUrl), t.source, t.restoredState));\n                        if (transition !== this.transitions.getValue()) {\n                          return EMPTY;\n                        }\n                        return [t];\n                      }),\n\n                      // This delay is required to match old behavior that forced navigation to\n                      // always be async\n                      switchMap(t => Promise.resolve(t)),\n\n                      // ApplyRedirects\n                      applyRedirects(\n                          this.ngModule.injector, this.configLoader, this.urlSerializer,\n                          this.config),\n\n                      // Update the currentNavigation\n                      tap(t => {\n                        this.currentNavigation = {\n                          ...this.currentNavigation !,\n                          finalUrl: t.urlAfterRedirects\n                        };\n                      }),\n\n                      // Recognize\n                      recognize(\n                          this.rootComponentType, this.config, (url) => this.serializeUrl(url),\n                          this.paramsInheritanceStrategy, this.relativeLinkResolution),\n\n                      // Update URL if in `eager` update mode\n                      tap(t => {\n                        if (this.urlUpdateStrategy === 'eager') {\n                          if (!t.extras.skipLocationChange) {\n                            this.setBrowserUrl(\n                                t.urlAfterRedirects, !!t.extras.replaceUrl, t.id, t.extras.state);\n                          }\n                          this.browserUrlTree = t.urlAfterRedirects;\n                        }\n                      }),\n\n                      // Fire RoutesRecognized\n                      tap(t => {\n                        const routesRecognized = new RoutesRecognized(\n                            t.id, this.serializeUrl(t.extractedUrl),\n                            this.serializeUrl(t.urlAfterRedirects), t.targetSnapshot !);\n                        eventsSubject.next(routesRecognized);\n                      }));\n                } else {\n                  const processPreviousUrl = urlTransition && this.rawUrlTree &&\n                      this.urlHandlingStrategy.shouldProcessUrl(this.rawUrlTree);\n                  /* When the current URL shouldn't be processed, but the previous one was, we\n                   * handle this \"error condition\" by navigating to the previously successful URL,\n                   * but leaving the URL intact.*/\n                  if (processPreviousUrl) {\n                    const {id, extractedUrl, source, restoredState, extras} = t;\n                    const navStart = new NavigationStart(\n                        id, this.serializeUrl(extractedUrl), source, restoredState);\n                    eventsSubject.next(navStart);\n                    const targetSnapshot =\n                        createEmptyState(extractedUrl, this.rootComponentType).snapshot;\n\n                    return of ({\n                      ...t,\n                      targetSnapshot,\n                      urlAfterRedirects: extractedUrl,\n                      extras: {...extras, skipLocationChange: false, replaceUrl: false},\n                    });\n                  } else {\n                    /* When neither the current or previous URL can be processed, do nothing other\n                     * than update router's internal reference to the current \"settled\" URL. This\n                     * way the next navigation will be coming from the current URL in the browser.\n                     */\n                    this.rawUrlTree = t.rawUrl;\n                    this.browserUrlTree = t.urlAfterRedirects;\n                    t.resolve(null);\n                    return EMPTY;\n                  }\n                }\n              }),\n\n              // Before Preactivation\n              switchTap(t => {\n                const {\n                  targetSnapshot,\n                  id: navigationId,\n                  extractedUrl: appliedUrlTree,\n                  rawUrl: rawUrlTree,\n                  extras: {skipLocationChange, replaceUrl}\n                } = t;\n                return this.hooks.beforePreactivation(targetSnapshot !, {\n                  navigationId,\n                  appliedUrlTree,\n                  rawUrlTree,\n                  skipLocationChange: !!skipLocationChange,\n                  replaceUrl: !!replaceUrl,\n                });\n              }),\n\n              // --- GUARDS ---\n              tap(t => {\n                const guardsStart = new GuardsCheckStart(\n                    t.id, this.serializeUrl(t.extractedUrl), this.serializeUrl(t.urlAfterRedirects),\n                    t.targetSnapshot !);\n                this.triggerEvent(guardsStart);\n              }),\n\n              map(t => ({\n                    ...t,\n                    guards:\n                        getAllRouteGuards(t.targetSnapshot !, t.currentSnapshot, this.rootContexts)\n                  })),\n\n              checkGuards(this.ngModule.injector, (evt: Event) => this.triggerEvent(evt)),\n              tap(t => {\n                if (isUrlTree(t.guardsResult)) {\n                  const error: Error&{url?: UrlTree} = navigationCancelingError(\n                      `Redirecting to \"${this.serializeUrl(t.guardsResult)}\"`);\n                  error.url = t.guardsResult;\n                  throw error;\n                }\n              }),\n\n              tap(t => {\n                const guardsEnd = new GuardsCheckEnd(\n                    t.id, this.serializeUrl(t.extractedUrl), this.serializeUrl(t.urlAfterRedirects),\n                    t.targetSnapshot !, !!t.guardsResult);\n                this.triggerEvent(guardsEnd);\n              }),\n\n              filter(t => {\n                if (!t.guardsResult) {\n                  this.resetUrlToCurrentUrlTree();\n                  const navCancel =\n                      new NavigationCancel(t.id, this.serializeUrl(t.extractedUrl), '');\n                  eventsSubject.next(navCancel);\n                  t.resolve(false);\n                  return false;\n                }\n                return true;\n              }),\n\n              // --- RESOLVE ---\n              switchTap(t => {\n                if (t.guards.canActivateChecks.length) {\n                  return of (t).pipe(\n                      tap(t => {\n                        const resolveStart = new ResolveStart(\n                            t.id, this.serializeUrl(t.extractedUrl),\n                            this.serializeUrl(t.urlAfterRedirects), t.targetSnapshot !);\n                        this.triggerEvent(resolveStart);\n                      }),\n                      resolveData(\n                          this.paramsInheritanceStrategy,\n                          this.ngModule.injector),  //\n                      tap(t => {\n                        const resolveEnd = new ResolveEnd(\n                            t.id, this.serializeUrl(t.extractedUrl),\n                            this.serializeUrl(t.urlAfterRedirects), t.targetSnapshot !);\n                        this.triggerEvent(resolveEnd);\n                      }));\n                }\n                return undefined;\n              }),\n\n              // --- AFTER PREACTIVATION ---\n              switchTap((t: NavigationTransition) => {\n                const {\n                  targetSnapshot,\n                  id: navigationId,\n                  extractedUrl: appliedUrlTree,\n                  rawUrl: rawUrlTree,\n                  extras: {skipLocationChange, replaceUrl}\n                } = t;\n                return this.hooks.afterPreactivation(targetSnapshot !, {\n                  navigationId,\n                  appliedUrlTree,\n                  rawUrlTree,\n                  skipLocationChange: !!skipLocationChange,\n                  replaceUrl: !!replaceUrl,\n                });\n              }),\n\n              map((t: NavigationTransition) => {\n                const targetRouterState = createRouterState(\n                    this.routeReuseStrategy, t.targetSnapshot !, t.currentRouterState);\n                return ({...t, targetRouterState});\n              }),\n\n              /* Once here, we are about to activate syncronously. The assumption is this will\n                 succeed, and user code may read from the Router service. Therefore before\n                 activation, we need to update router properties storing the current URL and the\n                 RouterState, as well as updated the browser URL. All this should happen *before*\n                 activating. */\n              tap((t: NavigationTransition) => {\n                this.currentUrlTree = t.urlAfterRedirects;\n                this.rawUrlTree = this.urlHandlingStrategy.merge(this.currentUrlTree, t.rawUrl);\n\n                (this as{routerState: RouterState}).routerState = t.targetRouterState !;\n\n                if (this.urlUpdateStrategy === 'deferred') {\n                  if (!t.extras.skipLocationChange) {\n                    this.setBrowserUrl(\n                        this.rawUrlTree, !!t.extras.replaceUrl, t.id, t.extras.state);\n                  }\n                  this.browserUrlTree = t.urlAfterRedirects;\n                }\n              }),\n\n              activateRoutes(\n                  this.rootContexts, this.routeReuseStrategy,\n                  (evt: Event) => this.triggerEvent(evt)),\n\n              tap({next() { completed = true; }, complete() { completed = true; }}),\n              finalize(() => {\n                /* When the navigation stream finishes either through error or success, we set the\n                 * `completed` or `errored` flag. However, there are some situations where we could\n                 * get here without either of those being set. For instance, a redirect during\n                 * NavigationStart. Therefore, this is a catch-all to make sure the NavigationCancel\n                 * event is fired when a navigation gets cancelled but not caught by other means. */\n                if (!completed && !errored) {\n                  // Must reset to current URL tree here to ensure history.state is set. On a fresh\n                  // page load, if a new navigation comes in before a successful navigation\n                  // completes, there will be nothing in history.state.navigationId. This can cause\n                  // sync problems with AngularJS sync code which looks for a value here in order\n                  // to determine whether or not to handle a given popstate event or to leave it\n                  // to the Angualr router.\n                  this.resetUrlToCurrentUrlTree();\n                  const navCancel = new NavigationCancel(\n                      t.id, this.serializeUrl(t.extractedUrl),\n                      `Navigation ID ${t.id} is not equal to the current navigation id ${this.navigationId}`);\n                  eventsSubject.next(navCancel);\n                  t.resolve(false);\n                }\n                // currentNavigation should always be reset to null here. If navigation was\n                // successful, lastSuccessfulTransition will have already been set. Therefore we\n                // can safely set currentNavigation to null here.\n                this.currentNavigation = null;\n              }),\n              catchError((e) => {\n                errored = true;\n                /* This error type is issued during Redirect, and is handled as a cancellation\n                 * rather than an error. */\n                if (isNavigationCancelingError(e)) {\n                  const redirecting = isUrlTree(e.url);\n                  if (!redirecting) {\n                    // Set property only if we're not redirecting. If we landed on a page and\n                    // redirect to `/` route, the new navigation is going to see the `/` isn't\n                    // a change from the default currentUrlTree and won't navigate. This is\n                    // only applicable with initial navigation, so setting `navigated` only when\n                    // not redirecting resolves this scenario.\n                    this.navigated = true;\n                    this.resetStateAndUrl(t.currentRouterState, t.currentUrlTree, t.rawUrl);\n                  }\n                  const navCancel =\n                      new NavigationCancel(t.id, this.serializeUrl(t.extractedUrl), e.message);\n                  eventsSubject.next(navCancel);\n\n                  // When redirecting, we need to delay resolving the navigation\n                  // promise and push it to the redirect navigation\n                  if (!redirecting) {\n                    t.resolve(false);\n                  } else {\n                    // setTimeout is required so this navigation finishes with\n                    // the return EMPTY below. If it isn't allowed to finish\n                    // processing, there can be multiple navigations to the same\n                    // URL.\n                    setTimeout(() => {\n                      const mergedTree = this.urlHandlingStrategy.merge(e.url, this.rawUrlTree);\n                      const extras = {\n                        skipLocationChange: t.extras.skipLocationChange,\n                        replaceUrl: this.urlUpdateStrategy === 'eager'\n                      };\n\n                      return this.scheduleNavigation(\n                          mergedTree, 'imperative', null, extras,\n                          {resolve: t.resolve, reject: t.reject, promise: t.promise});\n                    }, 0);\n                  }\n\n                  /* All other errors should reset to the router's internal URL reference to the\n                   * pre-error state. */\n                } else {\n                  this.resetStateAndUrl(t.currentRouterState, t.currentUrlTree, t.rawUrl);\n                  const navError = new NavigationError(t.id, this.serializeUrl(t.extractedUrl), e);\n                  eventsSubject.next(navError);\n                  try {\n                    t.resolve(this.errorHandler(e));\n                  } catch (ee) {\n                    t.reject(ee);\n                  }\n                }\n                return EMPTY;\n              }));\n          // TODO(jasonaden): remove cast once g3 is on updated TypeScript\n        })) as any as Observable<NavigationTransition>;\n  }\n\n  /**\n   * @internal\n   * TODO: this should be removed once the constructor of the router made internal\n   */\n  resetRootComponentType(rootComponentType: Type<any>): void {\n    this.rootComponentType = rootComponentType;\n    // TODO: vsavkin router 4.0 should make the root component set to null\n    // this will simplify the lifecycle of the router.\n    this.routerState.root.component = this.rootComponentType;\n  }\n\n  private getTransition(): NavigationTransition {\n    const transition = this.transitions.value;\n    // This value needs to be set. Other values such as extractedUrl are set on initial navigation\n    // but the urlAfterRedirects may not get set if we aren't processing the new URL *and* not\n    // processing the previous URL.\n    transition.urlAfterRedirects = this.browserUrlTree;\n    return transition;\n  }\n\n  private setTransition(t: Partial<NavigationTransition>): void {\n    this.transitions.next({...this.getTransition(), ...t});\n  }\n\n  /**\n   * Sets up the location change listener and performs the initial navigation.\n   */\n  initialNavigation(): void {\n    this.setUpLocationChangeListener();\n    if (this.navigationId === 0) {\n      this.navigateByUrl(this.location.path(true), {replaceUrl: true});\n    }\n  }\n\n  /**\n   * Sets up the location change listener.\n   */\n  setUpLocationChangeListener(): void {\n    // Don't need to use Zone.wrap any more, because zone.js\n    // already patch onPopState, so location change callback will\n    // run into ngZone\n    if (!this.locationSubscription) {\n      this.locationSubscription = <any>this.location.subscribe((change: any) => {\n        let rawUrlTree = this.parseUrl(change['url']);\n        const source: NavigationTrigger = change['type'] === 'popstate' ? 'popstate' : 'hashchange';\n        // Navigations coming from Angular router have a navigationId state property. When this\n        // exists, restore the state.\n        const state = change.state && change.state.navigationId ? change.state : null;\n        setTimeout(\n            () => { this.scheduleNavigation(rawUrlTree, source, state, {replaceUrl: true}); }, 0);\n      });\n    }\n  }\n\n  /** The current URL. */\n  get url(): string { return this.serializeUrl(this.currentUrlTree); }\n\n  /** The current Navigation object if one exists */\n  getCurrentNavigation(): Navigation|null { return this.currentNavigation; }\n\n  /** @internal */\n  triggerEvent(event: Event): void { (this.events as Subject<Event>).next(event); }\n\n  /**\n   * Resets the configuration used for navigation and generating links.\n   *\n   * @param config The route array for the new configuration.\n   *\n   * @usageNotes\n   *\n   * ```\n   * router.resetConfig([\n   *  { path: 'team/:id', component: TeamCmp, children: [\n   *    { path: 'simple', component: SimpleCmp },\n   *    { path: 'user/:name', component: UserCmp }\n   *  ]}\n   * ]);\n   * ```\n   */\n  resetConfig(config: Routes): void {\n    validateConfig(config);\n    this.config = config.map(standardizeConfig);\n    this.navigated = false;\n    this.lastSuccessfulId = -1;\n  }\n\n  /** @docsNotRequired */\n  ngOnDestroy(): void { this.dispose(); }\n\n  /** Disposes of the router. */\n  dispose(): void {\n    if (this.locationSubscription) {\n      this.locationSubscription.unsubscribe();\n      this.locationSubscription = null !;\n    }\n  }\n\n  /**\n   * Applies an array of commands to the current URL tree and creates a new URL tree.\n   *\n   * When given an activated route, applies the given commands starting from the route.\n   * Otherwise, applies the given command starting from the root.\n   *\n   * @param commands An array of commands to apply.\n   * @param navigationExtras Options that control the navigation strategy. This function\n   * only utilizes properties in `NavigationExtras` that would change the provided URL.\n   * @returns The new URL tree.\n   *\n   * @usageNotes\n   *\n   * ```\n   * // create /team/33/user/11\n   * router.createUrlTree(['/team', 33, 'user', 11]);\n   *\n   * // create /team/33;expand=true/user/11\n   * router.createUrlTree(['/team', 33, {expand: true}, 'user', 11]);\n   *\n   * // you can collapse static segments like this (this works only with the first passed-in value):\n   * router.createUrlTree(['/team/33/user', userId]);\n   *\n   * // If the first segment can contain slashes, and you do not want the router to split it,\n   * // you can do the following:\n   * router.createUrlTree([{segmentPath: '/one/two'}]);\n   *\n   * // create /team/33/(user/11//right:chat)\n   * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: 'chat'}}]);\n   *\n   * // remove the right secondary node\n   * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: null}}]);\n   *\n   * // assuming the current url is `/team/33/user/11` and the route points to `user/11`\n   *\n   * // navigate to /team/33/user/11/details\n   * router.createUrlTree(['details'], {relativeTo: route});\n   *\n   * // navigate to /team/33/user/22\n   * router.createUrlTree(['../22'], {relativeTo: route});\n   *\n   * // navigate to /team/44/user/22\n   * router.createUrlTree(['../../team/44/user/22'], {relativeTo: route});\n   * ```\n   */\n  createUrlTree(commands: any[], navigationExtras: NavigationExtras = {}): UrlTree {\n    const {relativeTo,          queryParams,         fragment,\n           preserveQueryParams, queryParamsHandling, preserveFragment} = navigationExtras;\n    if (isDevMode() && preserveQueryParams && <any>console && <any>console.warn) {\n      console.warn('preserveQueryParams is deprecated, use queryParamsHandling instead.');\n    }\n    const a = relativeTo || this.routerState.root;\n    const f = preserveFragment ? this.currentUrlTree.fragment : fragment;\n    let q: Params|null = null;\n    if (queryParamsHandling) {\n      switch (queryParamsHandling) {\n        case 'merge':\n          q = {...this.currentUrlTree.queryParams, ...queryParams};\n          break;\n        case 'preserve':\n          q = this.currentUrlTree.queryParams;\n          break;\n        default:\n          q = queryParams || null;\n      }\n    } else {\n      q = preserveQueryParams ? this.currentUrlTree.queryParams : queryParams || null;\n    }\n    if (q !== null) {\n      q = this.removeEmptyProps(q);\n    }\n    return createUrlTree(a, this.currentUrlTree, commands, q !, f !);\n  }\n\n  /**\n   * Navigate based on the provided URL, which must be absolute.\n   *\n   * @param url An absolute URL. The function does not apply any delta to the current URL.\n   * @param extras An object containing properties that modify the navigation strategy.\n   * The function ignores any properties in the `NavigationExtras` that would change the\n   * provided URL.\n   *\n   * @returns A Promise that resolves to 'true' when navigation succeeds,\n   * to 'false' when navigation fails, or is rejected on error.\n   *\n   * @usageNotes\n   *\n   * ```\n   * router.navigateByUrl(\"/team/33/user/11\");\n   *\n   * // Navigate without updating the URL\n   * router.navigateByUrl(\"/team/33/user/11\", { skipLocationChange: true });\n   * ```\n   *\n   */\n  navigateByUrl(url: string|UrlTree, extras: NavigationExtras = {skipLocationChange: false}):\n      Promise<boolean> {\n    if (isDevMode() && this.isNgZoneEnabled && !NgZone.isInAngularZone()) {\n      this.console.warn(\n          `Navigation triggered outside Angular zone, did you forget to call 'ngZone.run()'?`);\n    }\n\n    const urlTree = isUrlTree(url) ? url : this.parseUrl(url);\n    const mergedTree = this.urlHandlingStrategy.merge(urlTree, this.rawUrlTree);\n\n    return this.scheduleNavigation(mergedTree, 'imperative', null, extras);\n  }\n\n  /**\n   * Navigate based on the provided array of commands and a starting point.\n   * If no starting route is provided, the navigation is absolute.\n   *\n   * Returns a promise that:\n   * - resolves to 'true' when navigation succeeds,\n   * - resolves to 'false' when navigation fails,\n   * - is rejected when an error happens.\n   *\n   * @usageNotes\n   *\n   * ```\n   * router.navigate(['team', 33, 'user', 11], {relativeTo: route});\n   *\n   * // Navigate without updating the URL\n   * router.navigate(['team', 33, 'user', 11], {relativeTo: route, skipLocationChange: true});\n   * ```\n   *\n   * The first parameter of `navigate()` is a delta to be applied to the current URL\n   * or the one provided in the `relativeTo` property of the second parameter (the\n   * `NavigationExtras`).\n   *\n   * In order to affect this browser's `history.state` entry, the `state`\n   * parameter can be passed. This must be an object because the router\n   * will add the `navigationId` property to this object before creating\n   * the new history item.\n   */\n  navigate(commands: any[], extras: NavigationExtras = {skipLocationChange: false}):\n      Promise<boolean> {\n    validateCommands(commands);\n    return this.navigateByUrl(this.createUrlTree(commands, extras), extras);\n  }\n\n  /** Serializes a `UrlTree` into a string */\n  serializeUrl(url: UrlTree): string { return this.urlSerializer.serialize(url); }\n\n  /** Parses a string into a `UrlTree` */\n  parseUrl(url: string): UrlTree {\n    let urlTree: UrlTree;\n    try {\n      urlTree = this.urlSerializer.parse(url);\n    } catch (e) {\n      urlTree = this.malformedUriErrorHandler(e, this.urlSerializer, url);\n    }\n    return urlTree;\n  }\n\n  /** Returns whether the url is activated */\n  isActive(url: string|UrlTree, exact: boolean): boolean {\n    if (isUrlTree(url)) {\n      return containsTree(this.currentUrlTree, url, exact);\n    }\n\n    const urlTree = this.parseUrl(url);\n    return containsTree(this.currentUrlTree, urlTree, exact);\n  }\n\n  private removeEmptyProps(params: Params): Params {\n    return Object.keys(params).reduce((result: Params, key: string) => {\n      const value: any = params[key];\n      if (value !== null && value !== undefined) {\n        result[key] = value;\n      }\n      return result;\n    }, {});\n  }\n\n  private processNavigations(): void {\n    this.navigations.subscribe(\n        t => {\n          this.navigated = true;\n          this.lastSuccessfulId = t.id;\n          (this.events as Subject<Event>)\n              .next(new NavigationEnd(\n                  t.id, this.serializeUrl(t.extractedUrl), this.serializeUrl(this.currentUrlTree)));\n          this.lastSuccessfulNavigation = this.currentNavigation;\n          this.currentNavigation = null;\n          t.resolve(true);\n        },\n        e => { this.console.warn(`Unhandled Navigation Error: `); });\n  }\n\n  private scheduleNavigation(\n      rawUrl: UrlTree, source: NavigationTrigger, restoredState: RestoredState|null,\n      extras: NavigationExtras,\n      priorPromise?: {resolve: any, reject: any, promise: Promise<boolean>}): Promise<boolean> {\n    const lastNavigation = this.getTransition();\n    // If the user triggers a navigation imperatively (e.g., by using navigateByUrl),\n    // and that navigation results in 'replaceState' that leads to the same URL,\n    // we should skip those.\n    if (lastNavigation && source !== 'imperative' && lastNavigation.source === 'imperative' &&\n        lastNavigation.rawUrl.toString() === rawUrl.toString()) {\n      return Promise.resolve(true);  // return value is not used\n    }\n\n    // Because of a bug in IE and Edge, the location class fires two events (popstate and\n    // hashchange) every single time. The second one should be ignored. Otherwise, the URL will\n    // flicker. Handles the case when a popstate was emitted first.\n    if (lastNavigation && source == 'hashchange' && lastNavigation.source === 'popstate' &&\n        lastNavigation.rawUrl.toString() === rawUrl.toString()) {\n      return Promise.resolve(true);  // return value is not used\n    }\n    // Because of a bug in IE and Edge, the location class fires two events (popstate and\n    // hashchange) every single time. The second one should be ignored. Otherwise, the URL will\n    // flicker. Handles the case when a hashchange was emitted first.\n    if (lastNavigation && source == 'popstate' && lastNavigation.source === 'hashchange' &&\n        lastNavigation.rawUrl.toString() === rawUrl.toString()) {\n      return Promise.resolve(true);  // return value is not used\n    }\n\n    let resolve: any;\n    let reject: any;\n    let promise: Promise<boolean>;\n    if (priorPromise) {\n      resolve = priorPromise.resolve;\n      reject = priorPromise.reject;\n      promise = priorPromise.promise;\n\n    } else {\n      promise = new Promise<boolean>((res, rej) => {\n        resolve = res;\n        reject = rej;\n      });\n    }\n\n    const id = ++this.navigationId;\n    this.setTransition({\n      id,\n      source,\n      restoredState,\n      currentUrlTree: this.currentUrlTree,\n      currentRawUrl: this.rawUrlTree, rawUrl, extras, resolve, reject, promise,\n      currentSnapshot: this.routerState.snapshot,\n      currentRouterState: this.routerState\n    });\n\n    // Make sure that the error is propagated even though `processNavigations` catch\n    // handler does not rethrow\n    return promise.catch((e: any) => { return Promise.reject(e); });\n  }\n\n  private setBrowserUrl(\n      url: UrlTree, replaceUrl: boolean, id: number, state?: {[key: string]: any}) {\n    const path = this.urlSerializer.serialize(url);\n    state = state || {};\n    if (this.location.isCurrentPathEqualTo(path) || replaceUrl) {\n      // TODO(jasonaden): Remove first `navigationId` and rely on `ng` namespace.\n      this.location.replaceState(path, '', {...state, navigationId: id});\n    } else {\n      this.location.go(path, '', {...state, navigationId: id});\n    }\n  }\n\n  private resetStateAndUrl(storedState: RouterState, storedUrl: UrlTree, rawUrl: UrlTree): void {\n    (this as{routerState: RouterState}).routerState = storedState;\n    this.currentUrlTree = storedUrl;\n    this.rawUrlTree = this.urlHandlingStrategy.merge(this.currentUrlTree, rawUrl);\n    this.resetUrlToCurrentUrlTree();\n  }\n\n  private resetUrlToCurrentUrlTree(): void {\n    this.location.replaceState(\n        this.urlSerializer.serialize(this.rawUrlTree), '', {navigationId: this.lastSuccessfulId});\n  }\n}\n\nfunction validateCommands(commands: string[]): void {\n  for (let i = 0; i < commands.length; i++) {\n    const cmd = commands[i];\n    if (cmd == null) {\n      throw new Error(`The requested path contains ${cmd} segment at index ${i}`);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LocationStrategy} from '@angular/common';\nimport {Attribute, Directive, ElementRef, HostBinding, HostListener, Input, OnChanges, OnDestroy, Renderer2, isDevMode} from '@angular/core';\nimport {Subscription} from 'rxjs';\n\nimport {QueryParamsHandling} from '../config';\nimport {Event, NavigationEnd} from '../events';\nimport {Router} from '../router';\nimport {ActivatedRoute} from '../router_state';\nimport {UrlTree} from '../url_tree';\n\n\n/**\n * @description\n *\n * Lets you link to specific routes in your app.\n *\n * Consider the following route configuration:\n * `[{ path: 'user/:name', component: UserCmp }]`.\n * When linking to this `user/:name` route, you use the `RouterLink` directive.\n *\n * If the link is static, you can use the directive as follows:\n * `<a routerLink=\"/user/bob\">link to user component</a>`\n *\n * If you use dynamic values to generate the link, you can pass an array of path\n * segments, followed by the params for each segment.\n *\n * For instance `['/team', teamId, 'user', userName, {details: true}]`\n * means that we want to generate a link to `/team/11/user/bob;details=true`.\n *\n * Multiple static segments can be merged into one\n * (e.g., `['/team/11/user', userName, {details: true}]`).\n *\n * The first segment name can be prepended with `/`, `./`, or `../`:\n * * If the first segment begins with `/`, the router will look up the route from the root of the\n *   app.\n * * If the first segment begins with `./`, or doesn't begin with a slash, the router will\n *   instead look in the children of the current activated route.\n * * And if the first segment begins with `../`, the router will go up one level.\n *\n * You can set query params and fragment as follows:\n *\n * ```\n * <a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" fragment=\"education\">\n *   link to user component\n * </a>\n * ```\n * RouterLink will use these to generate this link: `/user/bob#education?debug=true`.\n *\n * (Deprecated in v4.0.0 use `queryParamsHandling` instead) You can also tell the\n * directive to preserve the current query params and fragment:\n *\n * ```\n * <a [routerLink]=\"['/user/bob']\" preserveQueryParams preserveFragment>\n *   link to user component\n * </a>\n * ```\n *\n * You can tell the directive how to handle queryParams. Available options are:\n *  - `'merge'`: merge the queryParams into the current queryParams\n *  - `'preserve'`: preserve the current queryParams\n *  - default/`''`: use the queryParams only\n *\n * Same options for {@link NavigationExtras#queryParamsHandling\n * NavigationExtras#queryParamsHandling}.\n *\n * ```\n * <a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" queryParamsHandling=\"merge\">\n *   link to user component\n * </a>\n * ```\n *\n * You can provide a `state` value to be persisted to the browser's History.state\n * property (See https://developer.mozilla.org/en-US/docs/Web/API/History#Properties). It's\n * used as follows:\n *\n * ```\n * <a [routerLink]=\"['/user/bob']\" [state]=\"{tracingId: 123}\">\n *   link to user component\n * </a>\n * ```\n *\n * And later the value can be read from the router through `router.getCurrentNavigation`.\n * For example, to capture the `tracingId` above during the `NavigationStart` event:\n *\n * ```\n * // Get NavigationStart events\n * router.events.pipe(filter(e => e instanceof NavigationStart)).subscribe(e => {\n *   const navigation = router.getCurrentNavigation();\n *   tracingService.trace({id: navigation.extras.state.tracingId});\n * });\n * ```\n *\n * The router link directive always treats the provided input as a delta to the current url.\n *\n * For instance, if the current url is `/user/(box//aux:team)`.\n *\n * Then the following link `<a [routerLink]=\"['/user/jim']\">Jim</a>` will generate the link\n * `/user/(jim//aux:team)`.\n *\n * See {@link Router#createUrlTree createUrlTree} for more information.\n *\n * @ngModule RouterModule\n *\n * @publicApi\n */\n@Directive({selector: ':not(a):not(area)[routerLink]'})\nexport class RouterLink {\n  // TODO(issue/24571): remove '!'.\n  @Input() queryParams !: {[k: string]: any};\n  // TODO(issue/24571): remove '!'.\n  @Input() fragment !: string;\n  // TODO(issue/24571): remove '!'.\n  @Input() queryParamsHandling !: QueryParamsHandling;\n  // TODO(issue/24571): remove '!'.\n  @Input() preserveFragment !: boolean;\n  // TODO(issue/24571): remove '!'.\n  @Input() skipLocationChange !: boolean;\n  // TODO(issue/24571): remove '!'.\n  @Input() replaceUrl !: boolean;\n  @Input() state?: {[k: string]: any};\n  private commands: any[] = [];\n  // TODO(issue/24571): remove '!'.\n  private preserve !: boolean;\n\n  constructor(\n      private router: Router, private route: ActivatedRoute,\n      @Attribute('tabindex') tabIndex: string, renderer: Renderer2, el: ElementRef) {\n    if (tabIndex == null) {\n      renderer.setAttribute(el.nativeElement, 'tabindex', '0');\n    }\n  }\n\n  @Input()\n  set routerLink(commands: any[]|string) {\n    if (commands != null) {\n      this.commands = Array.isArray(commands) ? commands : [commands];\n    } else {\n      this.commands = [];\n    }\n  }\n\n  /**\n   * @deprecated 4.0.0 use `queryParamsHandling` instead.\n   */\n  @Input()\n  set preserveQueryParams(value: boolean) {\n    if (isDevMode() && <any>console && <any>console.warn) {\n      console.warn('preserveQueryParams is deprecated!, use queryParamsHandling instead.');\n    }\n    this.preserve = value;\n  }\n\n  @HostListener('click')\n  onClick(): boolean {\n    const extras = {\n      skipLocationChange: attrBoolValue(this.skipLocationChange),\n      replaceUrl: attrBoolValue(this.replaceUrl),\n      state: this.state\n    };\n    this.router.navigateByUrl(this.urlTree, extras);\n    return true;\n  }\n\n  get urlTree(): UrlTree {\n    return this.router.createUrlTree(this.commands, {\n      relativeTo: this.route,\n      queryParams: this.queryParams,\n      fragment: this.fragment,\n      preserveQueryParams: attrBoolValue(this.preserve),\n      queryParamsHandling: this.queryParamsHandling,\n      preserveFragment: attrBoolValue(this.preserveFragment),\n    });\n  }\n}\n\n/**\n * @description\n *\n * Lets you link to specific routes in your app.\n *\n * See `RouterLink` for more information.\n *\n * @ngModule RouterModule\n *\n * @publicApi\n */\n@Directive({selector: 'a[routerLink],area[routerLink]'})\nexport class RouterLinkWithHref implements OnChanges, OnDestroy {\n  // TODO(issue/24571): remove '!'.\n  @HostBinding('attr.target') @Input() target !: string;\n  // TODO(issue/24571): remove '!'.\n  @Input() queryParams !: {[k: string]: any};\n  // TODO(issue/24571): remove '!'.\n  @Input() fragment !: string;\n  // TODO(issue/24571): remove '!'.\n  @Input() queryParamsHandling !: QueryParamsHandling;\n  // TODO(issue/24571): remove '!'.\n  @Input() preserveFragment !: boolean;\n  // TODO(issue/24571): remove '!'.\n  @Input() skipLocationChange !: boolean;\n  // TODO(issue/24571): remove '!'.\n  @Input() replaceUrl !: boolean;\n  @Input() state?: {[k: string]: any};\n  private commands: any[] = [];\n  private subscription: Subscription;\n  // TODO(issue/24571): remove '!'.\n  private preserve !: boolean;\n\n  // the url displayed on the anchor element.\n  // TODO(issue/24571): remove '!'.\n  @HostBinding() href !: string;\n\n  constructor(\n      private router: Router, private route: ActivatedRoute,\n      private locationStrategy: LocationStrategy) {\n    this.subscription = router.events.subscribe((s: Event) => {\n      if (s instanceof NavigationEnd) {\n        this.updateTargetUrlAndHref();\n      }\n    });\n  }\n\n  @Input()\n  set routerLink(commands: any[]|string) {\n    if (commands != null) {\n      this.commands = Array.isArray(commands) ? commands : [commands];\n    } else {\n      this.commands = [];\n    }\n  }\n\n  @Input()\n  set preserveQueryParams(value: boolean) {\n    if (isDevMode() && <any>console && <any>console.warn) {\n      console.warn('preserveQueryParams is deprecated, use queryParamsHandling instead.');\n    }\n    this.preserve = value;\n  }\n\n  ngOnChanges(changes: {}): any { this.updateTargetUrlAndHref(); }\n  ngOnDestroy(): any { this.subscription.unsubscribe(); }\n\n  @HostListener('click', ['$event.button', '$event.ctrlKey', '$event.metaKey', '$event.shiftKey'])\n  onClick(button: number, ctrlKey: boolean, metaKey: boolean, shiftKey: boolean): boolean {\n    if (button !== 0 || ctrlKey || metaKey || shiftKey) {\n      return true;\n    }\n\n    if (typeof this.target === 'string' && this.target != '_self') {\n      return true;\n    }\n\n    const extras = {\n      skipLocationChange: attrBoolValue(this.skipLocationChange),\n      replaceUrl: attrBoolValue(this.replaceUrl),\n      state: this.state\n    };\n    this.router.navigateByUrl(this.urlTree, extras);\n    return false;\n  }\n\n  private updateTargetUrlAndHref(): void {\n    this.href = this.locationStrategy.prepareExternalUrl(this.router.serializeUrl(this.urlTree));\n  }\n\n  get urlTree(): UrlTree {\n    return this.router.createUrlTree(this.commands, {\n      relativeTo: this.route,\n      queryParams: this.queryParams,\n      fragment: this.fragment,\n      preserveQueryParams: attrBoolValue(this.preserve),\n      queryParamsHandling: this.queryParamsHandling,\n      preserveFragment: attrBoolValue(this.preserveFragment),\n    });\n  }\n}\n\nfunction attrBoolValue(s: any): boolean {\n  return s === '' || !!s;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AfterContentInit, ContentChildren, Directive, ElementRef, Input, OnChanges, OnDestroy, Optional, QueryList, Renderer2, SimpleChanges} from '@angular/core';\nimport {Subscription} from 'rxjs';\n\nimport {Event, NavigationEnd} from '../events';\nimport {Router} from '../router';\n\nimport {RouterLink, RouterLinkWithHref} from './router_link';\n\n\n/**\n *\n * @description\n *\n * Lets you add a CSS class to an element when the link's route becomes active.\n *\n * This directive lets you add a CSS class to an element when the link's route\n * becomes active.\n *\n * Consider the following example:\n *\n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\">Bob</a>\n * ```\n *\n * When the url is either '/user' or '/user/bob', the active-link class will\n * be added to the `a` tag. If the url changes, the class will be removed.\n *\n * You can set more than one class, as follows:\n *\n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive=\"class1 class2\">Bob</a>\n * <a routerLink=\"/user/bob\" [routerLinkActive]=\"['class1', 'class2']\">Bob</a>\n * ```\n *\n * You can configure RouterLinkActive by passing `exact: true`. This will add the classes\n * only when the url matches the link exactly.\n *\n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{exact:\n * true}\">Bob</a>\n * ```\n *\n * You can assign the RouterLinkActive instance to a template variable and directly check\n * the `isActive` status.\n * ```\n * <a routerLink=\"/user/bob\" routerLinkActive #rla=\"routerLinkActive\">\n *   Bob {{ rla.isActive ? '(already open)' : ''}}\n * </a>\n * ```\n *\n * Finally, you can apply the RouterLinkActive directive to an ancestor of a RouterLink.\n *\n * ```\n * <div routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{exact: true}\">\n *   <a routerLink=\"/user/jim\">Jim</a>\n *   <a routerLink=\"/user/bob\">Bob</a>\n * </div>\n * ```\n *\n * This will set the active-link class on the div tag if the url is either '/user/jim' or\n * '/user/bob'.\n *\n * @ngModule RouterModule\n *\n * @publicApi\n */\n@Directive({\n  selector: '[routerLinkActive]',\n  exportAs: 'routerLinkActive',\n})\nexport class RouterLinkActive implements OnChanges,\n    OnDestroy, AfterContentInit {\n  // TODO(issue/24571): remove '!'.\n  @ContentChildren(RouterLink, {descendants: true})\n  links !: QueryList<RouterLink>;\n  // TODO(issue/24571): remove '!'.\n  @ContentChildren(RouterLinkWithHref, {descendants: true})\n  linksWithHrefs !: QueryList<RouterLinkWithHref>;\n\n  private classes: string[] = [];\n  private subscription: Subscription;\n  public readonly isActive: boolean = false;\n\n  @Input() routerLinkActiveOptions: {exact: boolean} = {exact: false};\n\n  constructor(\n      private router: Router, private element: ElementRef, private renderer: Renderer2,\n      @Optional() private link?: RouterLink,\n      @Optional() private linkWithHref?: RouterLinkWithHref) {\n    this.subscription = router.events.subscribe((s: Event) => {\n      if (s instanceof NavigationEnd) {\n        this.update();\n      }\n    });\n  }\n\n\n  ngAfterContentInit(): void {\n    this.links.changes.subscribe(_ => this.update());\n    this.linksWithHrefs.changes.subscribe(_ => this.update());\n    this.update();\n  }\n\n  @Input()\n  set routerLinkActive(data: string[]|string) {\n    const classes = Array.isArray(data) ? data : data.split(' ');\n    this.classes = classes.filter(c => !!c);\n  }\n\n  ngOnChanges(changes: SimpleChanges): void { this.update(); }\n  ngOnDestroy(): void { this.subscription.unsubscribe(); }\n\n  private update(): void {\n    if (!this.links || !this.linksWithHrefs || !this.router.navigated) return;\n    Promise.resolve().then(() => {\n      const hasActiveLinks = this.hasActiveLinks();\n      if (this.isActive !== hasActiveLinks) {\n        (this as any).isActive = hasActiveLinks;\n        this.classes.forEach((c) => {\n          if (hasActiveLinks) {\n            this.renderer.addClass(this.element.nativeElement, c);\n          } else {\n            this.renderer.removeClass(this.element.nativeElement, c);\n          }\n        });\n      }\n    });\n  }\n\n  private isLinkActive(router: Router): (link: (RouterLink|RouterLinkWithHref)) => boolean {\n    return (link: RouterLink | RouterLinkWithHref) =>\n               router.isActive(link.urlTree, this.routerLinkActiveOptions.exact);\n  }\n\n  private hasActiveLinks(): boolean {\n    const isActiveCheckFn = this.isLinkActive(this.router);\n    return this.link && isActiveCheckFn(this.link) ||\n        this.linkWithHref && isActiveCheckFn(this.linkWithHref) ||\n        this.links.some(isActiveCheckFn) || this.linksWithHrefs.some(isActiveCheckFn);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentFactoryResolver, ComponentRef} from '@angular/core';\n\nimport {RouterOutlet} from './directives/router_outlet';\nimport {ActivatedRoute} from './router_state';\n\n\n/**\n * Store contextual information about a `RouterOutlet`\n *\n * @publicApi\n */\nexport class OutletContext {\n  outlet: RouterOutlet|null = null;\n  route: ActivatedRoute|null = null;\n  resolver: ComponentFactoryResolver|null = null;\n  children = new ChildrenOutletContexts();\n  attachRef: ComponentRef<any>|null = null;\n}\n\n/**\n * Store contextual information about the children (= nested) `RouterOutlet`\n *\n * @publicApi\n */\nexport class ChildrenOutletContexts {\n  // contexts for child outlets, by name.\n  private contexts = new Map<string, OutletContext>();\n\n  /** Called when a `RouterOutlet` directive is instantiated */\n  onChildOutletCreated(childName: string, outlet: RouterOutlet): void {\n    const context = this.getOrCreateContext(childName);\n    context.outlet = outlet;\n    this.contexts.set(childName, context);\n  }\n\n  /**\n   * Called when a `RouterOutlet` directive is destroyed.\n   * We need to keep the context as the outlet could be destroyed inside a NgIf and might be\n   * re-created later.\n   */\n  onChildOutletDestroyed(childName: string): void {\n    const context = this.getContext(childName);\n    if (context) {\n      context.outlet = null;\n    }\n  }\n\n  /**\n   * Called when the corresponding route is deactivated during navigation.\n   * Because the component get destroyed, all children outlet are destroyed.\n   */\n  onOutletDeactivated(): Map<string, OutletContext> {\n    const contexts = this.contexts;\n    this.contexts = new Map();\n    return contexts;\n  }\n\n  onOutletReAttached(contexts: Map<string, OutletContext>) { this.contexts = contexts; }\n\n  getOrCreateContext(childName: string): OutletContext {\n    let context = this.getContext(childName);\n\n    if (!context) {\n      context = new OutletContext();\n      this.contexts.set(childName, context);\n    }\n\n    return context;\n  }\n\n  getContext(childName: string): OutletContext|null { return this.contexts.get(childName) || null; }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Attribute, ChangeDetectorRef, ComponentFactoryResolver, ComponentRef, Directive, EventEmitter, Injector, OnDestroy, OnInit, Output, ViewContainerRef} from '@angular/core';\n\nimport {Data} from '../config';\nimport {ChildrenOutletContexts} from '../router_outlet_context';\nimport {ActivatedRoute} from '../router_state';\nimport {PRIMARY_OUTLET} from '../shared';\n\n/**\n * @description\n *\n * Acts as a placeholder that Angular dynamically fills based on the current router state.\n *\n * Each outlet can have a unique name, determined by the optional `name` attribute.\n * The name cannot be set or changed dynamically. If not set, default value is \"primary\".\n *\n * ```\n * <router-outlet></router-outlet>\n * <router-outlet name='left'></router-outlet>\n * <router-outlet name='right'></router-outlet>\n * ```\n *\n * A router outlet emits an activate event when a new component is instantiated,\n * and a deactivate event when a component is destroyed.\n *\n * ```\n * <router-outlet\n *   (activate)='onActivate($event)'\n *   (deactivate)='onDeactivate($event)'></router-outlet>\n * ```\n * @ngModule RouterModule\n *\n * @publicApi\n */\n@Directive({selector: 'router-outlet', exportAs: 'outlet'})\nexport class RouterOutlet implements OnDestroy, OnInit {\n  private activated: ComponentRef<any>|null = null;\n  private _activatedRoute: ActivatedRoute|null = null;\n  private name: string;\n\n  @Output('activate') activateEvents = new EventEmitter<any>();\n  @Output('deactivate') deactivateEvents = new EventEmitter<any>();\n\n  constructor(\n      private parentContexts: ChildrenOutletContexts, private location: ViewContainerRef,\n      private resolver: ComponentFactoryResolver, @Attribute('name') name: string,\n      private changeDetector: ChangeDetectorRef) {\n    this.name = name || PRIMARY_OUTLET;\n    parentContexts.onChildOutletCreated(this.name, this);\n  }\n\n  ngOnDestroy(): void { this.parentContexts.onChildOutletDestroyed(this.name); }\n\n  ngOnInit(): void {\n    if (!this.activated) {\n      // If the outlet was not instantiated at the time the route got activated we need to populate\n      // the outlet when it is initialized (ie inside a NgIf)\n      const context = this.parentContexts.getContext(this.name);\n      if (context && context.route) {\n        if (context.attachRef) {\n          // `attachRef` is populated when there is an existing component to mount\n          this.attach(context.attachRef, context.route);\n        } else {\n          // otherwise the component defined in the configuration is created\n          this.activateWith(context.route, context.resolver || null);\n        }\n      }\n    }\n  }\n\n  get isActivated(): boolean { return !!this.activated; }\n\n  get component(): Object {\n    if (!this.activated) throw new Error('Outlet is not activated');\n    return this.activated.instance;\n  }\n\n  get activatedRoute(): ActivatedRoute {\n    if (!this.activated) throw new Error('Outlet is not activated');\n    return this._activatedRoute as ActivatedRoute;\n  }\n\n  get activatedRouteData(): Data {\n    if (this._activatedRoute) {\n      return this._activatedRoute.snapshot.data;\n    }\n    return {};\n  }\n\n  /**\n   * Called when the `RouteReuseStrategy` instructs to detach the subtree\n   */\n  detach(): ComponentRef<any> {\n    if (!this.activated) throw new Error('Outlet is not activated');\n    this.location.detach();\n    const cmp = this.activated;\n    this.activated = null;\n    this._activatedRoute = null;\n    return cmp;\n  }\n\n  /**\n   * Called when the `RouteReuseStrategy` instructs to re-attach a previously detached subtree\n   */\n  attach(ref: ComponentRef<any>, activatedRoute: ActivatedRoute) {\n    this.activated = ref;\n    this._activatedRoute = activatedRoute;\n    this.location.insert(ref.hostView);\n  }\n\n  deactivate(): void {\n    if (this.activated) {\n      const c = this.component;\n      this.activated.destroy();\n      this.activated = null;\n      this._activatedRoute = null;\n      this.deactivateEvents.emit(c);\n    }\n  }\n\n  activateWith(activatedRoute: ActivatedRoute, resolver: ComponentFactoryResolver|null) {\n    if (this.isActivated) {\n      throw new Error('Cannot activate an already activated outlet');\n    }\n    this._activatedRoute = activatedRoute;\n    const snapshot = activatedRoute._futureSnapshot;\n    const component = <any>snapshot.routeConfig !.component;\n    resolver = resolver || this.resolver;\n    const factory = resolver.resolveComponentFactory(component);\n    const childContexts = this.parentContexts.getOrCreateContext(this.name).children;\n    const injector = new OutletInjector(activatedRoute, childContexts, this.location.injector);\n    this.activated = this.location.createComponent(factory, this.location.length, injector);\n    // Calling `markForCheck` to make sure we will run the change detection when the\n    // `RouterOutlet` is inside a `ChangeDetectionStrategy.OnPush` component.\n    this.changeDetector.markForCheck();\n    this.activateEvents.emit(this.activated.instance);\n  }\n}\n\nclass OutletInjector implements Injector {\n  constructor(\n      private route: ActivatedRoute, private childContexts: ChildrenOutletContexts,\n      private parent: Injector) {}\n\n  get(token: any, notFoundValue?: any): any {\n    if (token === ActivatedRoute) {\n      return this.route;\n    }\n\n    if (token === ChildrenOutletContexts) {\n      return this.childContexts;\n    }\n\n    return this.parent.get(token, notFoundValue);\n  }\n}\n","/**\n*@license\n*Copyright Google Inc. All Rights Reserved.\n*\n*Use of this source code is governed by an MIT-style license that can be\n*found in the LICENSE file at https://angular.io/license\n*/\n\nimport {Compiler, Injectable, Injector, NgModuleFactoryLoader, NgModuleRef, OnDestroy} from '@angular/core';\nimport {Observable, Subscription, from, of } from 'rxjs';\nimport {catchError, concatMap, filter, map, mergeAll, mergeMap} from 'rxjs/operators';\n\nimport {LoadedRouterConfig, Route, Routes} from './config';\nimport {Event, NavigationEnd, RouteConfigLoadEnd, RouteConfigLoadStart} from './events';\nimport {Router} from './router';\nimport {RouterConfigLoader} from './router_config_loader';\n\n\n/**\n * @description\n *\n * Provides a preloading strategy.\n *\n * @publicApi\n */\nexport abstract class PreloadingStrategy {\n  abstract preload(route: Route, fn: () => Observable<any>): Observable<any>;\n}\n\n/**\n * @description\n *\n * Provides a preloading strategy that preloads all modules as quickly as possible.\n *\n * ```\n * RouteModule.forRoot(ROUTES, {preloadingStrategy: PreloadAllModules})\n * ```\n *\n * @publicApi\n */\nexport class PreloadAllModules implements PreloadingStrategy {\n  preload(route: Route, fn: () => Observable<any>): Observable<any> {\n    return fn().pipe(catchError(() => of (null)));\n  }\n}\n\n/**\n * @description\n *\n * Provides a preloading strategy that does not preload any modules.\n *\n * This strategy is enabled by default.\n *\n * @publicApi\n */\nexport class NoPreloading implements PreloadingStrategy {\n  preload(route: Route, fn: () => Observable<any>): Observable<any> { return of (null); }\n}\n\n/**\n * The preloader optimistically loads all router configurations to\n * make navigations into lazily-loaded sections of the application faster.\n *\n * The preloader runs in the background. When the router bootstraps, the preloader\n * starts listening to all navigation events. After every such event, the preloader\n * will check if any configurations can be loaded lazily.\n *\n * If a route is protected by `canLoad` guards, the preloaded will not load it.\n *\n * @publicApi\n */\n@Injectable()\nexport class RouterPreloader implements OnDestroy {\n  private loader: RouterConfigLoader;\n  // TODO(issue/24571): remove '!'.\n  private subscription !: Subscription;\n\n  constructor(\n      private router: Router, moduleLoader: NgModuleFactoryLoader, compiler: Compiler,\n      private injector: Injector, private preloadingStrategy: PreloadingStrategy) {\n    const onStartLoad = (r: Route) => router.triggerEvent(new RouteConfigLoadStart(r));\n    const onEndLoad = (r: Route) => router.triggerEvent(new RouteConfigLoadEnd(r));\n\n    this.loader = new RouterConfigLoader(moduleLoader, compiler, onStartLoad, onEndLoad);\n  }\n\n  setUpPreloading(): void {\n    this.subscription =\n        this.router.events\n            .pipe(filter((e: Event) => e instanceof NavigationEnd), concatMap(() => this.preload()))\n            .subscribe(() => {});\n  }\n\n  preload(): Observable<any> {\n    const ngModule = this.injector.get(NgModuleRef);\n    return this.processRoutes(ngModule, this.router.config);\n  }\n\n  // TODO(jasonaden): This class relies on code external to the class to call setUpPreloading. If\n  // this hasn't been done, ngOnDestroy will fail as this.subscription will be undefined. This\n  // should be refactored.\n  ngOnDestroy(): void { this.subscription.unsubscribe(); }\n\n  private processRoutes(ngModule: NgModuleRef<any>, routes: Routes): Observable<void> {\n    const res: Observable<any>[] = [];\n    for (const route of routes) {\n      // we already have the config loaded, just recurse\n      if (route.loadChildren && !route.canLoad && route._loadedConfig) {\n        const childConfig = route._loadedConfig;\n        res.push(this.processRoutes(childConfig.module, childConfig.routes));\n\n        // no config loaded, fetch the config\n      } else if (route.loadChildren && !route.canLoad) {\n        res.push(this.preloadConfig(ngModule, route));\n\n        // recurse into children\n      } else if (route.children) {\n        res.push(this.processRoutes(ngModule, route.children));\n      }\n    }\n    return from(res).pipe(mergeAll(), map((_) => void 0));\n  }\n\n  private preloadConfig(ngModule: NgModuleRef<any>, route: Route): Observable<void> {\n    return this.preloadingStrategy.preload(route, () => {\n      const loaded$ = this.loader.load(ngModule.injector, route);\n      return loaded$.pipe(mergeMap((config: LoadedRouterConfig) => {\n        route._loadedConfig = config;\n        return this.processRoutes(config.module, config.routes);\n      }));\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewportScroller} from '@angular/common';\nimport {OnDestroy} from '@angular/core';\nimport {Unsubscribable} from 'rxjs';\n\nimport {NavigationEnd, NavigationStart, Scroll} from './events';\nimport {Router} from './router';\n\nexport class RouterScroller implements OnDestroy {\n  // TODO(issue/24571): remove '!'.\n  private routerEventsSubscription !: Unsubscribable;\n  // TODO(issue/24571): remove '!'.\n  private scrollEventsSubscription !: Unsubscribable;\n\n  private lastId = 0;\n  private lastSource: 'imperative'|'popstate'|'hashchange'|undefined = 'imperative';\n  private restoredId = 0;\n  private store: {[key: string]: [number, number]} = {};\n\n  constructor(\n      private router: Router,\n      /** @docsNotRequired */ public readonly viewportScroller: ViewportScroller, private options: {\n        scrollPositionRestoration?: 'disabled' | 'enabled' | 'top',\n        anchorScrolling?: 'disabled'|'enabled'\n      } = {}) {\n    // Default both options to 'disabled'\n    options.scrollPositionRestoration = options.scrollPositionRestoration || 'disabled';\n    options.anchorScrolling = options.anchorScrolling || 'disabled';\n  }\n\n  init(): void {\n    // we want to disable the automatic scrolling because having two places\n    // responsible for scrolling results race conditions, especially given\n    // that browser don't implement this behavior consistently\n    if (this.options.scrollPositionRestoration !== 'disabled') {\n      this.viewportScroller.setHistoryScrollRestoration('manual');\n    }\n    this.routerEventsSubscription = this.createScrollEvents();\n    this.scrollEventsSubscription = this.consumeScrollEvents();\n  }\n\n  private createScrollEvents() {\n    return this.router.events.subscribe(e => {\n      if (e instanceof NavigationStart) {\n        // store the scroll position of the current stable navigations.\n        this.store[this.lastId] = this.viewportScroller.getScrollPosition();\n        this.lastSource = e.navigationTrigger;\n        this.restoredId = e.restoredState ? e.restoredState.navigationId : 0;\n      } else if (e instanceof NavigationEnd) {\n        this.lastId = e.id;\n        this.scheduleScrollEvent(e, this.router.parseUrl(e.urlAfterRedirects).fragment);\n      }\n    });\n  }\n\n  private consumeScrollEvents() {\n    return this.router.events.subscribe(e => {\n      if (!(e instanceof Scroll)) return;\n      // a popstate event. The pop state event will always ignore anchor scrolling.\n      if (e.position) {\n        if (this.options.scrollPositionRestoration === 'top') {\n          this.viewportScroller.scrollToPosition([0, 0]);\n        } else if (this.options.scrollPositionRestoration === 'enabled') {\n          this.viewportScroller.scrollToPosition(e.position);\n        }\n        // imperative navigation \"forward\"\n      } else {\n        if (e.anchor && this.options.anchorScrolling === 'enabled') {\n          this.viewportScroller.scrollToAnchor(e.anchor);\n        } else if (this.options.scrollPositionRestoration !== 'disabled') {\n          this.viewportScroller.scrollToPosition([0, 0]);\n        }\n      }\n    });\n  }\n\n  private scheduleScrollEvent(routerEvent: NavigationEnd, anchor: string|null): void {\n    this.router.triggerEvent(new Scroll(\n        routerEvent, this.lastSource === 'popstate' ? this.store[this.restoredId] : null, anchor));\n  }\n\n  ngOnDestroy() {\n    if (this.routerEventsSubscription) {\n      this.routerEventsSubscription.unsubscribe();\n    }\n    if (this.scrollEventsSubscription) {\n      this.scrollEventsSubscription.unsubscribe();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {APP_BASE_HREF, HashLocationStrategy, LOCATION_INITIALIZED, Location, LocationStrategy, PathLocationStrategy, PlatformLocation, ViewportScroller, ÉµgetDOM as getDOM} from '@angular/common';\nimport {ANALYZE_FOR_ENTRY_COMPONENTS, APP_BOOTSTRAP_LISTENER, APP_INITIALIZER, ApplicationRef, Compiler, ComponentRef, Inject, Injectable, InjectionToken, Injector, ModuleWithProviders, NgModule, NgModuleFactoryLoader, NgProbeToken, Optional, Provider, SkipSelf, SystemJsNgModuleLoader} from '@angular/core';\nimport {Subject, of } from 'rxjs';\nimport {EmptyOutletComponent} from './components/empty_outlet';\nimport {Route, Routes} from './config';\nimport {RouterLink, RouterLinkWithHref} from './directives/router_link';\nimport {RouterLinkActive} from './directives/router_link_active';\nimport {RouterOutlet} from './directives/router_outlet';\nimport {Event} from './events';\nimport {RouteReuseStrategy} from './route_reuse_strategy';\nimport {ErrorHandler, Router} from './router';\nimport {ROUTES} from './router_config_loader';\nimport {ChildrenOutletContexts} from './router_outlet_context';\nimport {NoPreloading, PreloadAllModules, PreloadingStrategy, RouterPreloader} from './router_preloader';\nimport {RouterScroller} from './router_scroller';\nimport {ActivatedRoute} from './router_state';\nimport {UrlHandlingStrategy} from './url_handling_strategy';\nimport {DefaultUrlSerializer, UrlSerializer, UrlTree} from './url_tree';\nimport {flatten} from './utils/collection';\n\n/**\n * The directives defined in the `RouterModule`.\n */\nconst ROUTER_DIRECTIVES =\n    [RouterOutlet, RouterLink, RouterLinkWithHref, RouterLinkActive, EmptyOutletComponent];\n\n/**\n * A [DI token](guide/glossary/#di-token) for the router service.\n *\n * @publicApi\n */\nexport const ROUTER_CONFIGURATION = new InjectionToken<ExtraOptions>('ROUTER_CONFIGURATION');\n\n/**\n * @docsNotRequired\n */\nexport const ROUTER_FORROOT_GUARD = new InjectionToken<void>('ROUTER_FORROOT_GUARD');\n\nexport const ROUTER_PROVIDERS: Provider[] = [\n  Location,\n  {provide: UrlSerializer, useClass: DefaultUrlSerializer},\n  {\n    provide: Router,\n    useFactory: setupRouter,\n    deps: [\n      UrlSerializer, ChildrenOutletContexts, Location, Injector, NgModuleFactoryLoader, Compiler,\n      ROUTES, ROUTER_CONFIGURATION, [UrlHandlingStrategy, new Optional()],\n      [RouteReuseStrategy, new Optional()]\n    ]\n  },\n  ChildrenOutletContexts,\n  {provide: ActivatedRoute, useFactory: rootRoute, deps: [Router]},\n  {provide: NgModuleFactoryLoader, useClass: SystemJsNgModuleLoader},\n  RouterPreloader,\n  NoPreloading,\n  PreloadAllModules,\n  {provide: ROUTER_CONFIGURATION, useValue: {enableTracing: false}},\n];\n\nexport function routerNgProbeToken() {\n  return new NgProbeToken('Router', Router);\n}\n\n/**\n * @usageNotes\n *\n * RouterModule can be imported multiple times: once per lazily-loaded bundle.\n * Since the router deals with a global shared resource--location, we cannot have\n * more than one router service active.\n *\n * That is why there are two ways to create the module: `RouterModule.forRoot` and\n * `RouterModule.forChild`.\n *\n * * `forRoot` creates a module that contains all the directives, the given routes, and the router\n *   service itself.\n * * `forChild` creates a module that contains all the directives and the given routes, but does not\n *   include the router service.\n *\n * When registered at the root, the module should be used as follows\n *\n * ```\n * @NgModule({\n *   imports: [RouterModule.forRoot(ROUTES)]\n * })\n * class MyNgModule {}\n * ```\n *\n * For submodules and lazy loaded submodules the module should be used as follows:\n *\n * ```\n * @NgModule({\n *   imports: [RouterModule.forChild(ROUTES)]\n * })\n * class MyNgModule {}\n * ```\n *\n * @description\n *\n * Adds router directives and providers.\n *\n * Managing state transitions is one of the hardest parts of building applications. This is\n * especially true on the web, where you also need to ensure that the state is reflected in the URL.\n * In addition, we often want to split applications into multiple bundles and load them on demand.\n * Doing this transparently is not trivial.\n *\n * The Angular router service solves these problems. Using the router, you can declaratively specify\n * application states, manage state transitions while taking care of the URL, and load bundles on\n * demand.\n *\n * @see [Routing and Navigation](guide/router.html) for an\n * overview of how the router service should be used.\n *\n * @publicApi\n */\n@NgModule({\n  declarations: ROUTER_DIRECTIVES,\n  exports: ROUTER_DIRECTIVES,\n  entryComponents: [EmptyOutletComponent]\n})\nexport class RouterModule {\n  // Note: We are injecting the Router so it gets created eagerly...\n  constructor(@Optional() @Inject(ROUTER_FORROOT_GUARD) guard: any, @Optional() router: Router) {}\n\n  /**\n   * Creates and configures a module with all the router providers and directives.\n   * Optionally sets up an application listener to perform an initial navigation.\n   *\n   * @param routes An array of `Route` objects that define the navigation paths for the application.\n   * @param config An `ExtraOptions` configuration object that controls how navigation is performed.\n   * @return The new router module.\n  */\n  static forRoot(routes: Routes, config?: ExtraOptions): ModuleWithProviders<RouterModule> {\n    return {\n      ngModule: RouterModule,\n      providers: [\n        ROUTER_PROVIDERS,\n        provideRoutes(routes),\n        {\n          provide: ROUTER_FORROOT_GUARD,\n          useFactory: provideForRootGuard,\n          deps: [[Router, new Optional(), new SkipSelf()]]\n        },\n        {provide: ROUTER_CONFIGURATION, useValue: config ? config : {}},\n        {\n          provide: LocationStrategy,\n          useFactory: provideLocationStrategy,\n          deps: [\n            PlatformLocation, [new Inject(APP_BASE_HREF), new Optional()], ROUTER_CONFIGURATION\n          ]\n        },\n        {\n          provide: RouterScroller,\n          useFactory: createRouterScroller,\n          deps: [Router, ViewportScroller, ROUTER_CONFIGURATION]\n        },\n        {\n          provide: PreloadingStrategy,\n          useExisting: config && config.preloadingStrategy ? config.preloadingStrategy :\n                                                             NoPreloading\n        },\n        {provide: NgProbeToken, multi: true, useFactory: routerNgProbeToken},\n        provideRouterInitializer(),\n      ],\n    };\n  }\n\n  /**\n   * Creates a module with all the router directives and a provider registering routes.\n   */\n  static forChild(routes: Routes): ModuleWithProviders<RouterModule> {\n    return {ngModule: RouterModule, providers: [provideRoutes(routes)]};\n  }\n}\n\nexport function createRouterScroller(\n    router: Router, viewportScroller: ViewportScroller, config: ExtraOptions): RouterScroller {\n  if (config.scrollOffset) {\n    viewportScroller.setOffset(config.scrollOffset);\n  }\n  return new RouterScroller(router, viewportScroller, config);\n}\n\nexport function provideLocationStrategy(\n    platformLocationStrategy: PlatformLocation, baseHref: string, options: ExtraOptions = {}) {\n  return options.useHash ? new HashLocationStrategy(platformLocationStrategy, baseHref) :\n                           new PathLocationStrategy(platformLocationStrategy, baseHref);\n}\n\nexport function provideForRootGuard(router: Router): any {\n  if (router) {\n    throw new Error(\n        `RouterModule.forRoot() called twice. Lazy loaded modules should use RouterModule.forChild() instead.`);\n  }\n  return 'guarded';\n}\n\n/**\n * Registers a [DI provider](guide/glossary#provider) for a set of routes.\n * @param routes The route configuration to provide.\n *\n * @usageNotes\n *\n * ```\n * @NgModule({\n *   imports: [RouterModule.forChild(ROUTES)],\n *   providers: [provideRoutes(EXTRA_ROUTES)]\n * })\n * class MyNgModule {}\n * ```\n *\n * @publicApi\n */\nexport function provideRoutes(routes: Routes): any {\n  return [\n    {provide: ANALYZE_FOR_ENTRY_COMPONENTS, multi: true, useValue: routes},\n    {provide: ROUTES, multi: true, useValue: routes},\n  ];\n}\n\n/**\n * Allowed values in an `ExtraOptions` object that configure\n * when the router performs the initial navigation operation.\n *\n * * 'enabled' - The initial navigation starts before the root component is created.\n * The bootstrap is blocked until the initial navigation is complete. This value is required\n * for [server-side rendering](guide/universal) to work.\n * * 'disabled' - The initial navigation is not performed. The location listener is set up before\n * the root component gets created. Use if there is a reason to have\n * more control over when the router starts its initial navigation due to some complex\n * initialization logic.\n * * 'legacy_enabled'- (Default, for compatibility.) The initial navigation starts after the root component has been created.\n * The bootstrap is not blocked until the initial navigation is complete. @deprecated\n * * 'legacy_disabled'- The initial navigation is not performed. The location listener is set up\n * after the root component gets created. @deprecated since v4\n * * `true` - same as 'legacy_enabled'. @deprecated since v4\n * * `false` - same as 'legacy_disabled'. @deprecated since v4\n *\n * The 'legacy_enabled' and 'legacy_disabled' should not be used for new applications.\n *\n * @see `forRoot()`\n *\n * @publicApi\n */\nexport type InitialNavigation =\n    true | false | 'enabled' | 'disabled' | 'legacy_enabled' | 'legacy_disabled';\n\n/**\n * A set of configuration options for a router module, provided in the\n * `forRoot()` method.\n *\n * @publicApi\n */\nexport interface ExtraOptions {\n  /**\n   * When true, log all internal navigation events to the console.\n   * Use for debugging.\n   */\n  enableTracing?: boolean;\n\n  /**\n   * When true, enable the location strategy that uses the URL fragment\n   * instead of the history API.\n   */\n  useHash?: boolean;\n\n  /**\n   * One of `enabled` or `disabled`.\n   * When set to `enabled`, the initial navigation starts before the root component is created.\n   * The bootstrap is blocked until the initial navigation is complete. This value is required for\n   * [server-side rendering](guide/universal) to work.\n   * When set to `disabled`, the initial navigation is not performed.\n   * The location listener is set up before the root component gets created.\n   * Use if there is a reason to have more control over when the router\n   * starts its initial navigation due to some complex initialization logic.\n   *\n   * Legacy values are deprecated since v4 and should not be used for new applications:\n   *\n   * * `legacy_enabled` - Default for compatibility.\n   * The initial navigation starts after the root component has been created,\n   * but the bootstrap is not blocked until the initial navigation is complete.\n   * * `legacy_disabled` - The initial navigation is not performed.\n   * The location listener is set up after the root component gets created.\n   * * `true` - same as `legacy_enabled`.\n   * * `false` - same as `legacy_disabled`.\n   */\n  initialNavigation?: InitialNavigation;\n\n  /**\n   * A custom error handler for failed navigations.\n   */\n  errorHandler?: ErrorHandler;\n\n  /**\n   * Configures a preloading strategy.\n   * One of `PreloadAllModules` or `NoPreloading` (the default).\n   */\n  preloadingStrategy?: any;\n\n  /**\n   * Define what the router should do if it receives a navigation request to the current URL.\n   * Default is `ignore`, which causes the router ignores the navigation.\n   * This can disable features such as a \"refresh\" button.\n   * Use this option to configure the behavior when navigating to the\n   * current URL. Default is 'ignore'.\n   */\n  onSameUrlNavigation?: 'reload'|'ignore';\n\n  /**\n   * Configures if the scroll position needs to be restored when navigating back.\n   *\n   * * 'disabled'- (Default) Does nothing. Scroll position is maintained on navigation.\n   * * 'top'- Sets the scroll position to x = 0, y = 0 on all navigation.\n   * * 'enabled'- Restores the previous scroll position on backward navigation, else sets the\n   * position to the anchor if one is provided, or sets the scroll position to [0, 0] (forward\n   * navigation). This option will be the default in the future.\n   *\n   * You can implement custom scroll restoration behavior by adapting the enabled behavior as\n   * in the following example.\n   *\n   * ```typescript\n   * class AppModule {\n   *   constructor(router: Router, viewportScroller: ViewportScroller) {\n   *     router.events.pipe(\n   *       filter((e: Event): e is Scroll => e instanceof Scroll)\n   *     ).subscribe(e => {\n   *       if (e.position) {\n   *         // backward navigation\n   *         viewportScroller.scrollToPosition(e.position);\n   *       } else if (e.anchor) {\n   *         // anchor navigation\n   *         viewportScroller.scrollToAnchor(e.anchor);\n   *       } else {\n   *         // forward navigation\n   *         viewportScroller.scrollToPosition([0, 0]);\n   *       }\n   *     });\n   *   }\n   * }\n   * ```\n   */\n  scrollPositionRestoration?: 'disabled'|'enabled'|'top';\n\n  /**\n   * When set to 'enabled', scrolls to the anchor element when the URL has a fragment.\n   * Anchor scrolling is disabled by default.\n   *\n   * Anchor scrolling does not happen on 'popstate'. Instead, we restore the position\n   * that we stored or scroll to the top.\n   */\n  anchorScrolling?: 'disabled'|'enabled';\n\n  /**\n   * Configures the scroll offset the router will use when scrolling to an element.\n   *\n   * When given a tuple with x and y position value,\n   * the router uses that offset each time it scrolls.\n   * When given a function, the router invokes the function every time\n   * it restores scroll position.\n   */\n  scrollOffset?: [number, number]|(() => [number, number]);\n\n  /**\n   * Defines how the router merges parameters, data, and resolved data from parent to child\n   * routes. By default ('emptyOnly'), inherits parent parameters only for\n   * path-less or component-less routes.\n   * Set to 'always' to enable unconditional inheritance of parent parameters.\n   */\n  paramsInheritanceStrategy?: 'emptyOnly'|'always';\n\n  /**\n   * A custom handler for malformed URI errors. The handler is invoked when `encodedURI` contains\n   * invalid character sequences.\n   * The default implementation is to redirect to the root URL, dropping\n   * any path or parameter information. The function takes three parameters:\n   *\n   * - `'URIError'` - Error thrown when parsing a bad URL.\n   * - `'UrlSerializer'` - UrlSerializer thatâs configured with the router.\n   * - `'url'` -  The malformed URL that caused the URIError\n   * */\n  malformedUriErrorHandler?:\n      (error: URIError, urlSerializer: UrlSerializer, url: string) => UrlTree;\n\n  /**\n   * Defines when the router updates the browser URL. By default ('deferred'),\n   * update after successful navigation.\n   * Set to 'eager' if prefer to update the URL at the beginning of navigation.\n   * Updating the URL early allows you to handle a failure of navigation by\n   * showing an error message with the URL that failed.\n   */\n  urlUpdateStrategy?: 'deferred'|'eager';\n\n  /**\n   * Enables a bug fix that corrects relative link resolution in components with empty paths.\n   * Example:\n   *\n   * ```\n   * const routes = [\n   *   {\n   *     path: '',\n   *     component: ContainerComponent,\n   *     children: [\n   *       { path: 'a', component: AComponent },\n   *       { path: 'b', component: BComponent },\n   *     ]\n   *   }\n   * ];\n   * ```\n   *\n   * From the `ContainerComponent`, this will not work:\n   *\n   * `<a [routerLink]=\"['./a']\">Link to A</a>`\n   *\n   * However, this will work:\n   *\n   * `<a [routerLink]=\"['../a']\">Link to A</a>`\n   *\n   * In other words, you're required to use `../` rather than `./`. This is currently the default\n   * behavior. Setting this option to `corrected` enables the fix.\n   */\n  relativeLinkResolution?: 'legacy'|'corrected';\n}\n\nexport function setupRouter(\n    urlSerializer: UrlSerializer, contexts: ChildrenOutletContexts, location: Location,\n    injector: Injector, loader: NgModuleFactoryLoader, compiler: Compiler, config: Route[][],\n    opts: ExtraOptions = {}, urlHandlingStrategy?: UrlHandlingStrategy,\n    routeReuseStrategy?: RouteReuseStrategy) {\n  const router = new Router(\n      null, urlSerializer, contexts, location, injector, loader, compiler, flatten(config));\n\n  if (urlHandlingStrategy) {\n    router.urlHandlingStrategy = urlHandlingStrategy;\n  }\n\n  if (routeReuseStrategy) {\n    router.routeReuseStrategy = routeReuseStrategy;\n  }\n\n  if (opts.errorHandler) {\n    router.errorHandler = opts.errorHandler;\n  }\n\n  if (opts.malformedUriErrorHandler) {\n    router.malformedUriErrorHandler = opts.malformedUriErrorHandler;\n  }\n\n  if (opts.enableTracing) {\n    const dom = getDOM();\n    router.events.subscribe((e: Event) => {\n      dom.logGroup(`Router Event: ${(<any>e.constructor).name}`);\n      dom.log(e.toString());\n      dom.log(e);\n      dom.logGroupEnd();\n    });\n  }\n\n  if (opts.onSameUrlNavigation) {\n    router.onSameUrlNavigation = opts.onSameUrlNavigation;\n  }\n\n  if (opts.paramsInheritanceStrategy) {\n    router.paramsInheritanceStrategy = opts.paramsInheritanceStrategy;\n  }\n\n  if (opts.urlUpdateStrategy) {\n    router.urlUpdateStrategy = opts.urlUpdateStrategy;\n  }\n\n  if (opts.relativeLinkResolution) {\n    router.relativeLinkResolution = opts.relativeLinkResolution;\n  }\n\n  return router;\n}\n\nexport function rootRoute(router: Router): ActivatedRoute {\n  return router.routerState.root;\n}\n\n/**\n * Router initialization requires two steps:\n *\n * First, we start the navigation in a `APP_INITIALIZER` to block the bootstrap if\n * a resolver or a guard executes asynchronously.\n *\n * Next, we actually run activation in a `BOOTSTRAP_LISTENER`, using the\n * `afterPreactivation` hook provided by the router.\n * The router navigation starts, reaches the point when preactivation is done, and then\n * pauses. It waits for the hook to be resolved. We then resolve it only in a bootstrap listener.\n */\n@Injectable()\nexport class RouterInitializer {\n  private initNavigation: boolean = false;\n  private resultOfPreactivationDone = new Subject<void>();\n\n  constructor(private injector: Injector) {}\n\n  appInitializer(): Promise<any> {\n    const p: Promise<any> = this.injector.get(LOCATION_INITIALIZED, Promise.resolve(null));\n    return p.then(() => {\n      let resolve: Function = null !;\n      const res = new Promise(r => resolve = r);\n      const router = this.injector.get(Router);\n      const opts = this.injector.get(ROUTER_CONFIGURATION);\n\n      if (this.isLegacyDisabled(opts) || this.isLegacyEnabled(opts)) {\n        resolve(true);\n\n      } else if (opts.initialNavigation === 'disabled') {\n        router.setUpLocationChangeListener();\n        resolve(true);\n\n      } else if (opts.initialNavigation === 'enabled') {\n        router.hooks.afterPreactivation = () => {\n          // only the initial navigation should be delayed\n          if (!this.initNavigation) {\n            this.initNavigation = true;\n            resolve(true);\n            return this.resultOfPreactivationDone;\n\n            // subsequent navigations should not be delayed\n          } else {\n            return of (null) as any;\n          }\n        };\n        router.initialNavigation();\n\n      } else {\n        throw new Error(`Invalid initialNavigation options: '${opts.initialNavigation}'`);\n      }\n\n      return res;\n    });\n  }\n\n  bootstrapListener(bootstrappedComponentRef: ComponentRef<any>): void {\n    const opts = this.injector.get(ROUTER_CONFIGURATION);\n    const preloader = this.injector.get(RouterPreloader);\n    const routerScroller = this.injector.get(RouterScroller);\n    const router = this.injector.get(Router);\n    const ref = this.injector.get<ApplicationRef>(ApplicationRef);\n\n    if (bootstrappedComponentRef !== ref.components[0]) {\n      return;\n    }\n\n    if (this.isLegacyEnabled(opts)) {\n      router.initialNavigation();\n    } else if (this.isLegacyDisabled(opts)) {\n      router.setUpLocationChangeListener();\n    }\n\n    preloader.setUpPreloading();\n    routerScroller.init();\n    router.resetRootComponentType(ref.componentTypes[0]);\n    this.resultOfPreactivationDone.next(null !);\n    this.resultOfPreactivationDone.complete();\n  }\n\n  private isLegacyEnabled(opts: ExtraOptions): boolean {\n    return opts.initialNavigation === 'legacy_enabled' || opts.initialNavigation === true ||\n        opts.initialNavigation === undefined;\n  }\n\n  private isLegacyDisabled(opts: ExtraOptions): boolean {\n    return opts.initialNavigation === 'legacy_disabled' || opts.initialNavigation === false;\n  }\n}\n\nexport function getAppInitializer(r: RouterInitializer) {\n  return r.appInitializer.bind(r);\n}\n\nexport function getBootstrapListener(r: RouterInitializer) {\n  return r.bootstrapListener.bind(r);\n}\n\n/**\n * A [DI token](guide/glossary/#di-token) for the router initializer that\n * is called after the app is bootstrapped.\n *\n * @publicApi\n */\nexport const ROUTER_INITIALIZER =\n    new InjectionToken<(compRef: ComponentRef<any>) => void>('Router Initializer');\n\nexport function provideRouterInitializer() {\n  return [\n    RouterInitializer,\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      useFactory: getAppInitializer,\n      deps: [RouterInitializer]\n    },\n    {provide: ROUTER_INITIALIZER, useFactory: getBootstrapListener, deps: [RouterInitializer]},\n    {provide: APP_BOOTSTRAP_LISTENER, multi: true, useExisting: ROUTER_INITIALIZER},\n  ];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common package.\n */\n\nimport {Version} from '@angular/core';\n\n/**\n * @publicApi\n */\nexport const VERSION = new Version('9.0.7');\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {EmptyOutletComponent as Éµangular_packages_router_router_l} from './src/components/empty_outlet';\nexport {ROUTER_FORROOT_GUARD as Éµangular_packages_router_router_a,RouterInitializer as Éµangular_packages_router_router_h,createRouterScroller as Éµangular_packages_router_router_c,getAppInitializer as Éµangular_packages_router_router_i,getBootstrapListener as Éµangular_packages_router_router_j,provideForRootGuard as Éµangular_packages_router_router_e,provideLocationStrategy as Éµangular_packages_router_router_d,provideRouterInitializer as Éµangular_packages_router_router_k,rootRoute as Éµangular_packages_router_router_g,routerNgProbeToken as Éµangular_packages_router_router_b,setupRouter as Éµangular_packages_router_router_f} from './src/router_module';\nexport {RouterScroller as Éµangular_packages_router_router_o} from './src/router_scroller';\nexport {Tree as Éµangular_packages_router_router_m,TreeNode as Éµangular_packages_router_router_n} from './src/utils/tree';"]},"metadata":{},"sourceType":"module"}