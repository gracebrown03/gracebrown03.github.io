{"ast":null,"code":"import { InjectionToken, Injectable, Inject, Optional, PLATFORM_ID, NgZone, ɵɵdefineInjectable, ɵɵinject, NgModule } from '@angular/core';\nimport { asyncScheduler, Observable, of, merge } from 'rxjs';\nimport { map, share, switchMap, scan, distinctUntilChanged, withLatestFrom, skipWhile } from 'rxjs/operators';\nimport { ɵAngularFireSchedulers, ɵkeepUnstableUntilFirstFactory, ɵfirebaseAppFactory, FIREBASE_OPTIONS, FIREBASE_APP_NAME } from '@angular/fire';\nimport 'firebase/database';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @param {?} value\n * @return {?}\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nfunction isString(value) {\n  return typeof value === 'string';\n}\n/**\n * @param {?} value\n * @return {?}\n */\n\n\nfunction isFirebaseDataSnapshot(value) {\n  return typeof value.exportVal === 'function';\n}\n/**\n * @param {?} obj\n * @return {?}\n */\n\n\nfunction isNil(obj) {\n  return obj === undefined || obj === null;\n}\n/**\n * @param {?} value\n * @return {?}\n */\n\n\nfunction isFirebaseRef(value) {\n  return typeof value.set === 'function';\n}\n/**\n * Returns a database reference given a Firebase App and an\n * absolute or relative path.\n * @param {?} database\n * @param {?} pathRef\n * @return {?}\n */\n\n\nfunction getRef(database, pathRef) {\n  // if a db ref was passed in, just return it\n  return isFirebaseRef(pathRef) ?\n  /** @type {?} */\n  pathRef : database.ref(\n  /** @type {?} */\n  pathRef);\n}\n/**\n * @param {?} item\n * @param {?} cases\n * @return {?}\n */\n\n\nfunction checkOperationCases(item, cases) {\n  if (isString(item)) {\n    return cases.stringCase();\n  } else if (isFirebaseRef(item)) {\n    return (\n      /** @type {?} */\n      cases.firebaseCase()\n    );\n  } else if (isFirebaseDataSnapshot(item)) {\n    return (\n      /** @type {?} */\n      cases.snapshotCase()\n    );\n  }\n\n  throw new Error(`Expects a string, snapshot, or reference. Got: ${typeof item}`);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @record\n * @template T\n */\n\n\nfunction SnapshotPrevKey() {}\n\nif (false) {\n  /** @type {?} */\n  SnapshotPrevKey.prototype.snapshot;\n  /** @type {?} */\n\n  SnapshotPrevKey.prototype.prevKey;\n}\n/**\n * Create an observable from a Database Reference or Database Query.\n * @template T\n * @param {?} ref Database Reference\n * @param {?} event Listen event type ('value', 'added', 'changed', 'removed', 'moved')\n * @param {?=} listenType\n * @param {?=} scheduler\n * @return {?}\n */\n\n\nfunction fromRef(ref, event, listenType = 'on', scheduler = asyncScheduler) {\n  return new Observable(\n  /**\n  * @param {?} subscriber\n  * @return {?}\n  */\n  subscriber => {\n    /** @type {?} */\n    let fn = null;\n    fn = ref[listenType](event,\n    /**\n    * @param {?} snapshot\n    * @param {?} prevKey\n    * @return {?}\n    */\n    (snapshot, prevKey) => {\n      scheduler.schedule(\n      /**\n      * @return {?}\n      */\n      () => {\n        subscriber.next({\n          snapshot,\n          prevKey\n        });\n      });\n\n      if (listenType == 'once') {\n        scheduler.schedule(\n        /**\n        * @return {?}\n        */\n        () => subscriber.complete());\n      }\n    },\n    /**\n    * @param {?} err\n    * @return {?}\n    */\n    err => {\n      scheduler.schedule(\n      /**\n      * @return {?}\n      */\n      () => subscriber.error(err));\n    });\n\n    if (listenType == 'on') {\n      return {\n        /**\n         * @return {?}\n         */\n        unsubscribe() {\n          if (fn != null) {\n            ref.off(event, fn);\n          }\n        }\n\n      };\n    } else {\n      return {\n        /**\n        * @return {?}\n        */\n        unsubscribe() {}\n\n      };\n    }\n  }).pipe(map(\n  /**\n  * @param {?} payload\n  * @return {?}\n  */\n  payload => {\n    const {\n      snapshot,\n      prevKey\n    } = payload;\n    /** @type {?} */\n\n    let key = null;\n\n    if (snapshot.exists()) {\n      key = snapshot.key;\n    }\n\n    return {\n      type: event,\n      payload: snapshot,\n      prevKey,\n      key\n    };\n  }), share());\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @template T\n * @param {?} ref\n * @param {?} events\n * @param {?=} scheduler\n * @return {?}\n */\n\n\nfunction listChanges(ref, events, scheduler) {\n  return fromRef(ref, 'value', 'once', scheduler).pipe(switchMap(\n  /**\n  * @param {?} snapshotAction\n  * @return {?}\n  */\n  snapshotAction => {\n    /** @type {?} */\n    const childEvent$ = [of(snapshotAction)];\n    events.forEach(\n    /**\n    * @param {?} event\n    * @return {?}\n    */\n    event => childEvent$.push(fromRef(ref, event, 'on', scheduler)));\n    return merge(...childEvent$).pipe(scan(buildView, []));\n  }), distinctUntilChanged());\n}\n/**\n * @template T\n * @param {?} changes\n * @param {?} key\n * @return {?}\n */\n\n\nfunction positionFor(changes, key) {\n  /** @type {?} */\n  const len = changes.length;\n\n  for (let i = 0; i < len; i++) {\n    if (changes[i].payload.key === key) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n/**\n * @template T\n * @param {?} changes\n * @param {?=} prevKey\n * @return {?}\n */\n\n\nfunction positionAfter(changes, prevKey) {\n  if (isNil(prevKey)) {\n    return 0;\n  } else {\n    /** @type {?} */\n    const i = positionFor(changes, prevKey);\n\n    if (i === -1) {\n      return changes.length;\n    } else {\n      return i + 1;\n    }\n  }\n}\n/**\n * @param {?} current\n * @param {?} action\n * @return {?}\n */\n\n\nfunction buildView(current, action) {\n  const {\n    payload,\n    type,\n    prevKey,\n    key\n  } = action;\n  /** @type {?} */\n\n  const currentKeyPosition = positionFor(current, key);\n  /** @type {?} */\n\n  const afterPreviousKeyPosition = positionAfter(current, prevKey);\n\n  switch (action.type) {\n    case 'value':\n      if (action.payload && action.payload.exists()) {\n        /** @type {?} */\n        let prevKey = null;\n        action.payload.forEach(\n        /**\n        * @param {?} payload\n        * @return {?}\n        */\n        payload => {\n          /** @type {?} */\n          const action = {\n            payload,\n            type: 'value',\n            prevKey,\n            key: payload.key\n          };\n          prevKey = payload.key;\n          current = [...current, action];\n          return false;\n        });\n      }\n\n      return current;\n\n    case 'child_added':\n      if (currentKeyPosition > -1) {\n        // check that the previouskey is what we expect, else reorder\n\n        /** @type {?} */\n        const previous = current[currentKeyPosition - 1];\n\n        if ((previous && previous.key || null) != prevKey) {\n          current = current.filter(\n          /**\n          * @param {?} x\n          * @return {?}\n          */\n          x => x.payload.key !== payload.key);\n          current.splice(afterPreviousKeyPosition, 0, action);\n        }\n      } else if (prevKey == null) {\n        return [action, ...current];\n      } else {\n        current = current.slice();\n        current.splice(afterPreviousKeyPosition, 0, action);\n      }\n\n      return current;\n\n    case 'child_removed':\n      return current.filter(\n      /**\n      * @param {?} x\n      * @return {?}\n      */\n      x => x.payload.key !== payload.key);\n\n    case 'child_changed':\n      return current.map(\n      /**\n      * @param {?} x\n      * @return {?}\n      */\n      x => x.payload.key === key ? action : x);\n\n    case 'child_moved':\n      if (currentKeyPosition > -1) {\n        /** @type {?} */\n        const data = current.splice(currentKeyPosition, 1)[0];\n        current = current.slice();\n        current.splice(afterPreviousKeyPosition, 0, data);\n        return current;\n      }\n\n      return current;\n    // default will also remove null results\n\n    default:\n      return current;\n  }\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @param {?=} events\n * @return {?}\n */\n\n\nfunction validateEventsArray(events) {\n  if (isNil(events) ||\n  /** @type {?} */\n  events.length === 0) {\n    events = ['child_added', 'child_removed', 'child_changed', 'child_moved'];\n  }\n\n  return events;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @template T\n * @param {?} query\n * @param {?=} events\n * @param {?=} scheduler\n * @return {?}\n */\n\n\nfunction snapshotChanges(query, events, scheduler) {\n  events = validateEventsArray(events);\n  return listChanges(query,\n  /** @type {?} */\n  events, scheduler);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @template T\n * @param {?} query\n * @param {?=} events\n * @param {?=} scheduler\n * @return {?}\n */\n\n\nfunction stateChanges(query, events, scheduler) {\n  events =\n  /** @type {?} */\n  validateEventsArray(events);\n  /** @type {?} */\n\n  const childEvent$ = events.map(\n  /**\n  * @param {?} event\n  * @return {?}\n  */\n  event => fromRef(query, event, 'on', scheduler));\n  return merge(...childEvent$);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @template T\n * @param {?} query\n * @param {?=} events\n * @param {?=} scheduler\n * @return {?}\n */\n\n\nfunction auditTrail(query, events, scheduler) {\n  /** @type {?} */\n  const auditTrail$ = stateChanges(query, events).pipe(scan(\n  /**\n  * @param {?} current\n  * @param {?} action\n  * @return {?}\n  */\n  (current, action) => [...current, action], []));\n  return waitForLoaded(query, auditTrail$, scheduler);\n}\n/**\n * @record\n */\n\n\nfunction LoadedMetadata() {}\n\nif (false) {\n  /** @type {?} */\n  LoadedMetadata.prototype.data;\n  /** @type {?} */\n\n  LoadedMetadata.prototype.lastKeyToLoad;\n}\n/**\n * @template T\n * @param {?} query\n * @param {?=} scheduler\n * @return {?}\n */\n\n\nfunction loadedData(query, scheduler) {\n  // Create an observable of loaded values to retrieve the\n  // known dataset. This will allow us to know what key to\n  // emit the \"whole\" array at when listening for child events.\n  return fromRef(query, 'value', 'on', scheduler).pipe(map(\n  /**\n  * @param {?} data\n  * @return {?}\n  */\n  data => {\n    // Store the last key in the data set\n\n    /** @type {?} */\n    let lastKeyToLoad; // Loop through loaded dataset to find the last key\n\n    data.payload.forEach(\n    /**\n    * @param {?} child\n    * @return {?}\n    */\n    child => {\n      lastKeyToLoad = child.key;\n      return false;\n    }); // return data set and the current last key loaded\n\n    return {\n      data,\n      lastKeyToLoad\n    };\n  }));\n}\n/**\n * @template T\n * @param {?} query\n * @param {?} action$\n * @param {?=} scheduler\n * @return {?}\n */\n\n\nfunction waitForLoaded(query, action$, scheduler) {\n  /** @type {?} */\n  const loaded$ = loadedData(query, scheduler);\n  return loaded$.pipe(withLatestFrom(action$), // Get the latest values from the \"loaded\" and \"child\" datasets\n  // We can use both datasets to form an array of the latest values.\n  map(\n  /**\n  * @param {?} __0\n  * @return {?}\n  */\n  ([loaded, actions]) => {\n    // Store the last key in the data set\n\n    /** @type {?} */\n    let lastKeyToLoad = loaded.lastKeyToLoad; // Store all child keys loaded at this point\n\n    /** @type {?} */\n\n    const loadedKeys = actions.map(\n    /**\n    * @param {?} snap\n    * @return {?}\n    */\n    snap => snap.key);\n    return {\n      actions,\n      lastKeyToLoad,\n      loadedKeys\n    };\n  }), // This is the magical part, only emit when the last load key\n  // in the dataset has been loaded by a child event. At this point\n  // we can assume the dataset is \"whole\".\n  skipWhile(\n  /**\n  * @param {?} meta\n  * @return {?}\n  */\n  meta => meta.loadedKeys.indexOf(meta.lastKeyToLoad) === -1), // Pluck off the meta data because the user only cares\n  // to iterate through the snapshots\n  map(\n  /**\n  * @param {?} meta\n  * @return {?}\n  */\n  meta => meta.actions));\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @template T\n * @param {?} ref\n * @param {?} operation\n * @return {?}\n */\n\n\nfunction createDataOperationMethod(ref, operation) {\n  return (\n    /**\n    * @template T\n    * @param {?} item\n    * @param {?} value\n    * @return {?}\n    */\n    function dataOperation(item, value) {\n      return checkOperationCases(item, {\n        stringCase:\n        /**\n        * @return {?}\n        */\n        () => ref.child(\n        /** @type {?} */\n        item)[operation](value),\n        firebaseCase:\n        /**\n        * @return {?}\n        */\n        () =>\n        /** @type {?} */\n        item[operation](value),\n        snapshotCase:\n        /**\n        * @return {?}\n        */\n        () =>\n        /** @type {?} */\n        item.ref[operation](value)\n      });\n    }\n  );\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// TODO(davideast): Find out why TS thinks this returns firebase.Primise\n// instead of Promise.\n\n/**\n * @template T\n * @param {?} ref\n * @return {?}\n */\n\n\nfunction createRemoveMethod(ref) {\n  return (\n    /**\n    * @param {?=} item\n    * @return {?}\n    */\n    function remove(item) {\n      if (!item) {\n        return ref.remove();\n      }\n\n      return checkOperationCases(item, {\n        stringCase:\n        /**\n        * @return {?}\n        */\n        () => ref.child(\n        /** @type {?} */\n        item).remove(),\n        firebaseCase:\n        /**\n        * @return {?}\n        */\n        () =>\n        /** @type {?} */\n        item.remove(),\n        snapshotCase:\n        /**\n        * @return {?}\n        */\n        () =>\n        /** @type {?} */\n        item.ref.remove()\n      });\n    }\n  );\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @template T\n * @param {?} query\n * @param {?} afDatabase\n * @return {?}\n */\n\n\nfunction createListReference(query, afDatabase) {\n  /** @type {?} */\n  const outsideAngularScheduler = afDatabase.schedulers.outsideAngular;\n  return {\n    query,\n    update: createDataOperationMethod(query.ref, 'update'),\n    set: createDataOperationMethod(query.ref, 'set'),\n    push:\n    /**\n    * @param {?} data\n    * @return {?}\n    */\n    data => query.ref.push(data),\n    remove: createRemoveMethod(query.ref),\n\n    /**\n     * @param {?=} events\n     * @return {?}\n     */\n    snapshotChanges(events) {\n      return snapshotChanges(query, events, outsideAngularScheduler).pipe(afDatabase.keepUnstableUntilFirst);\n    },\n\n    /**\n     * @param {?=} events\n     * @return {?}\n     */\n    stateChanges(events) {\n      return stateChanges(query, events, outsideAngularScheduler).pipe(afDatabase.keepUnstableUntilFirst);\n    },\n\n    /**\n     * @param {?=} events\n     * @return {?}\n     */\n    auditTrail(events) {\n      return auditTrail(query, events, outsideAngularScheduler).pipe(afDatabase.keepUnstableUntilFirst);\n    },\n\n    /**\n     * @param {?=} events\n     * @return {?}\n     */\n    valueChanges(events) {\n      /** @type {?} */\n      const snapshotChanges$ = snapshotChanges(query, events, outsideAngularScheduler);\n      return snapshotChanges$.pipe(map(\n      /**\n      * @param {?} actions\n      * @return {?}\n      */\n      actions => actions.map(\n      /**\n      * @param {?} a\n      * @return {?}\n      */\n      a =>\n      /** @type {?} */\n      a.payload.val())), afDatabase.keepUnstableUntilFirst);\n    }\n\n  };\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @template T\n * @param {?} query\n * @param {?=} scheduler\n * @return {?}\n */\n\n\nfunction createObjectSnapshotChanges(query, scheduler) {\n  return (\n    /**\n    * @return {?}\n    */\n    function snapshotChanges() {\n      return fromRef(query, 'value', 'on', scheduler);\n    }\n  );\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @template T\n * @param {?} query\n * @param {?} afDatabase\n * @return {?}\n */\n\n\nfunction createObjectReference(query, afDatabase) {\n  return {\n    query,\n\n    /**\n     * @template T\n     * @return {?}\n     */\n    snapshotChanges() {\n      return createObjectSnapshotChanges(query, afDatabase.schedulers.outsideAngular)().pipe(\n      /** @type {?} */\n      afDatabase.keepUnstableUntilFirst);\n    },\n\n    /**\n     * @param {?} data\n     * @return {?}\n     */\n    update(data) {\n      return (\n        /** @type {?} */\n        query.ref.update(\n        /** @type {?} */\n        data)\n      );\n    },\n\n    /**\n     * @param {?} data\n     * @return {?}\n     */\n    set(data) {\n      return (\n        /** @type {?} */\n        query.ref.set(data)\n      );\n    },\n\n    /**\n     * @return {?}\n     */\n    remove() {\n      return (\n        /** @type {?} */\n        query.ref.remove()\n      );\n    },\n\n    /**\n     * @template T\n     * @return {?}\n     */\n    valueChanges() {\n      /** @type {?} */\n      const snapshotChanges$ = createObjectSnapshotChanges(query, afDatabase.schedulers.outsideAngular)();\n      return snapshotChanges$.pipe(afDatabase.keepUnstableUntilFirst, map(\n      /**\n      * @param {?} action\n      * @return {?}\n      */\n      action => action.payload.exists() ?\n      /** @type {?} */\n      action.payload.val() : null));\n    }\n\n  };\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nconst URL = new InjectionToken('angularfire2.realtimeDatabaseURL');\n\nclass AngularFireDatabase {\n  /**\n   * @param {?} options\n   * @param {?} nameOrConfig\n   * @param {?} databaseURL\n   * @param {?} platformId\n   * @param {?} zone\n   */\n  constructor(options, nameOrConfig, databaseURL, platformId, zone) {\n    this.schedulers = new ɵAngularFireSchedulers(zone);\n    this.keepUnstableUntilFirst = ɵkeepUnstableUntilFirstFactory(this.schedulers, platformId);\n    this.database = zone.runOutsideAngular(\n    /**\n    * @return {?}\n    */\n    () => {\n      /** @type {?} */\n      const app = ɵfirebaseAppFactory(options, zone, nameOrConfig);\n      return app.database(databaseURL || undefined);\n    });\n  }\n  /**\n   * @template T\n   * @param {?} pathOrRef\n   * @param {?=} queryFn\n   * @return {?}\n   */\n\n\n  list(pathOrRef, queryFn) {\n    /** @type {?} */\n    const ref = getRef(this.database, pathOrRef);\n    /** @type {?} */\n\n    let query = ref;\n\n    if (queryFn) {\n      query = queryFn(ref);\n    }\n\n    return createListReference(query, this);\n  }\n  /**\n   * @template T\n   * @param {?} pathOrRef\n   * @return {?}\n   */\n\n\n  object(pathOrRef) {\n    /** @type {?} */\n    const ref = getRef(this.database, pathOrRef);\n    return createObjectReference(ref, this);\n  }\n  /**\n   * @return {?}\n   */\n\n\n  createPushId() {\n    return this.database.ref().push().key;\n  }\n\n}\n\nAngularFireDatabase.ɵfac = function AngularFireDatabase_Factory(t) {\n  return new (t || AngularFireDatabase)(ɵngcc0.ɵɵinject(FIREBASE_OPTIONS), ɵngcc0.ɵɵinject(FIREBASE_APP_NAME, 8), ɵngcc0.ɵɵinject(URL, 8), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n};\n/** @nocollapse */\n\n\nAngularFireDatabase.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [FIREBASE_OPTIONS]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [FIREBASE_APP_NAME]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [URL]\n  }]\n}, {\n  type: Object,\n  decorators: [{\n    type: Inject,\n    args: [PLATFORM_ID]\n  }]\n}, {\n  type: NgZone\n}];\n/** @nocollapse */\n\n\nAngularFireDatabase.ɵprov = ɵɵdefineInjectable({\n  factory: function AngularFireDatabase_Factory() {\n    return new AngularFireDatabase(ɵɵinject(FIREBASE_OPTIONS), ɵɵinject(FIREBASE_APP_NAME, 8), ɵɵinject(URL, 8), ɵɵinject(PLATFORM_ID), ɵɵinject(NgZone));\n  },\n  token: AngularFireDatabase,\n  providedIn: \"any\"\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AngularFireDatabase, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'any'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [FIREBASE_OPTIONS]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [FIREBASE_APP_NAME]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [URL]\n      }]\n    }, {\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, null);\n})();\n\nif (false) {\n  /** @type {?} */\n  AngularFireDatabase.prototype.database;\n  /** @type {?} */\n\n  AngularFireDatabase.prototype.schedulers;\n  /** @type {?} */\n\n  AngularFireDatabase.prototype.keepUnstableUntilFirst;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nclass AngularFireDatabaseModule {}\n\nAngularFireDatabaseModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: AngularFireDatabaseModule\n});\nAngularFireDatabaseModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function AngularFireDatabaseModule_Factory(t) {\n    return new (t || AngularFireDatabaseModule)();\n  },\n  providers: [AngularFireDatabase]\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(AngularFireDatabaseModule, [{\n    type: NgModule,\n    args: [{\n      providers: [AngularFireDatabase]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { AngularFireDatabase, AngularFireDatabaseModule, URL, auditTrail, createListReference, fromRef, listChanges, snapshotChanges, stateChanges };","map":{"version":3,"sources":["ng:/@angular/fire/database/utils.ts","ng:/@angular/fire/database/observable/fromRef.ts","ng:/@angular/fire/database/list/changes.ts","ng:/@angular/fire/database/list/utils.ts","ng:/@angular/fire/database/list/snapshot-changes.ts","ng:/@angular/fire/database/list/state-changes.ts","ng:/@angular/fire/database/list/audit-trail.ts","ng:/@angular/fire/database/list/data-operation.ts","ng:/@angular/fire/database/list/remove.ts","ng:/@angular/fire/database/list/create-reference.ts","ng:/@angular/fire/database/object/snapshot-changes.ts","ng:/@angular/fire/database/object/create-reference.ts","ng:/@angular/fire/database/database.ts","ng:/@angular/fire/database/database.module.ts"],"names":[],"mappings":"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","sourcesContent":["import { Subscription, Scheduler } from 'rxjs';\nimport { PathReference, DatabaseReference, FirebaseOperation, FirebaseOperationCases } from './interfaces';\nimport { database } from 'firebase/app';\n\nexport function isString(value: any): boolean {\n  return typeof value === 'string';\n}\n\nexport function isFirebaseDataSnapshot(value: any): boolean {\n  return typeof value.exportVal === 'function';\n}\n\nexport function isNil(obj: any): boolean {\n  return obj === undefined || obj === null;\n}\n\nexport function isFirebaseRef(value: any): boolean {\n  return typeof value.set === 'function';\n}\n\n/**\n * Returns a database reference given a Firebase App and an\n * absolute or relative path.\n * @param app - Firebase App\n * @param path - Database path, relative or absolute\n */\nexport function getRef(database: database.Database, pathRef: PathReference): DatabaseReference {\n  // if a db ref was passed in, just return it\n  return isFirebaseRef(pathRef) ? pathRef as DatabaseReference\n    : database.ref(pathRef as string);\n}\n\nexport function checkOperationCases(item: FirebaseOperation, cases: FirebaseOperationCases) : Promise<void> {\n  if (isString(item)) {\n    return cases.stringCase();\n  } else if (isFirebaseRef(item)) {\n    return cases.firebaseCase!();\n  } else if (isFirebaseDataSnapshot(item)) {\n    return cases.snapshotCase!();\n  }\n  throw new Error(`Expects a string, snapshot, or reference. Got: ${typeof item}`);\n}\n","import { DatabaseQuery, DatabaseSnapshot, ListenEvent, AngularFireAction } from '../interfaces';\nimport { Observable, SchedulerLike, queueScheduler, asyncScheduler } from 'rxjs';\nimport { map, share } from 'rxjs/operators';\n\ninterface SnapshotPrevKey<T> {\n  snapshot: DatabaseSnapshot<T>;\n  prevKey: string | null | undefined;\n}\n\n/**\n * Create an observable from a Database Reference or Database Query.\n * @param ref Database Reference\n * @param event Listen event type ('value', 'added', 'changed', 'removed', 'moved')\n */\nexport function fromRef<T>(ref: DatabaseQuery, event: ListenEvent, listenType = 'on', scheduler: SchedulerLike = asyncScheduler): Observable<AngularFireAction<DatabaseSnapshot<T>>> {\n  return new Observable<SnapshotPrevKey<T>>(subscriber => {\n    let fn: any | null = null;\n    fn = ref[listenType](event, (snapshot, prevKey) => {\n      scheduler.schedule(() => {\n        subscriber.next({ snapshot, prevKey });\n      });\n      if (listenType == 'once') {\n        scheduler.schedule(() => subscriber.complete());\n      }\n    }, err => {\n      scheduler.schedule(() => subscriber.error(err))\n    });\n\n    if (listenType == 'on') {\n      return {\n        unsubscribe() {\n          if (fn != null) {\n            ref.off(event, fn);\n          }\n        }\n      };\n    } else {\n      return { unsubscribe() { } };\n    }\n  }).pipe(\n    map(payload => {\n      const { snapshot, prevKey } = payload;\n      let key: string | null = null;\n      if (snapshot.exists()) { key = snapshot.key; }\n      return { type: event, payload: snapshot, prevKey, key };\n    }),\n    share()\n  );\n}\n","import { fromRef } from '../observable/fromRef';\nimport { Observable, of, merge, SchedulerLike } from 'rxjs';\n\nimport { DatabaseQuery, ChildEvent, SnapshotAction } from '../interfaces';\nimport { isNil } from '../utils';\n\nimport { switchMap, distinctUntilChanged, scan } from 'rxjs/operators';\n\nexport function listChanges<T=any>(ref: DatabaseQuery, events: ChildEvent[], scheduler?: SchedulerLike): Observable<SnapshotAction<T>[]> {\n  return fromRef(ref, 'value', 'once', scheduler).pipe(\n    switchMap(snapshotAction => {\n      const childEvent$ = [of(snapshotAction)];\n      events.forEach(event => childEvent$.push(fromRef(ref, event, 'on', scheduler)));\n      return merge(...childEvent$).pipe(scan(buildView, []))\n    }),\n    distinctUntilChanged()\n  );\n}\n\nfunction positionFor<T>(changes: SnapshotAction<T>[], key) {\n  const len = changes.length;\n  for(let i=0; i<len; i++) {\n    if(changes[i].payload.key === key) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nfunction positionAfter<T>(changes: SnapshotAction<T>[], prevKey?: string) {\n  if(isNil(prevKey)) {\n    return 0;\n  } else {\n    const i = positionFor(changes, prevKey);\n    if( i === -1) {\n      return changes.length;\n    } else {\n      return i + 1;\n    }\n  }\n}\n\nfunction buildView(current, action) {\n  const { payload, type, prevKey, key } = action;\n  const currentKeyPosition = positionFor(current, key);\n  const afterPreviousKeyPosition = positionAfter(current, prevKey);\n  switch (action.type) {\n    case 'value':\n      if (action.payload && action.payload.exists()) {\n        let prevKey = null;\n        action.payload.forEach(payload => {\n          const action = {payload, type: 'value', prevKey, key: payload.key};\n          prevKey = payload.key;\n          current = [...current, action];\n          return false;\n        });\n      }\n      return current;\n    case 'child_added':\n      if (currentKeyPosition > -1) {\n        // check that the previouskey is what we expect, else reorder\n        const previous = current[currentKeyPosition - 1];\n        if ((previous && previous.key || null) != prevKey) {\n          current = current.filter(x => x.payload.key !== payload.key);\n          current.splice(afterPreviousKeyPosition, 0, action);\n        }\n      } else if (prevKey == null) {\n        return [action, ...current];\n      } else {\n        current = current.slice()\n        current.splice(afterPreviousKeyPosition, 0, action);\n      }\n      return current;\n    case 'child_removed':\n      return current.filter(x => x.payload.key !== payload.key);\n    case 'child_changed':\n      return current.map(x => x.payload.key === key ? action : x);\n    case 'child_moved':\n      if(currentKeyPosition > -1) {\n        const data = current.splice(currentKeyPosition, 1)[0];\n        current = current.slice()\n        current.splice(afterPreviousKeyPosition, 0, data);\n        return current;\n      }\n      return current;\n    // default will also remove null results\n    default:\n      return current;\n  }\n}\n","import { isNil } from '../utils';\n\nexport function validateEventsArray(events?: any[]) {\n  if(isNil(events) || events!.length === 0) {\n    events = ['child_added', 'child_removed', 'child_changed', 'child_moved'];\n  }\n  return events;\n}","import { Observable, SchedulerLike } from 'rxjs';\nimport { listChanges } from './changes';\nimport { DatabaseQuery, ChildEvent, SnapshotAction } from '../interfaces';\nimport { validateEventsArray } from './utils';\n\nexport function snapshotChanges<T>(query: DatabaseQuery, events?: ChildEvent[], scheduler?: SchedulerLike): Observable<SnapshotAction<T>[]> {\n  events = validateEventsArray(events);\n  return listChanges<T>(query, events!, scheduler);\n}\n","import { DatabaseQuery, ChildEvent, AngularFireAction, SnapshotAction } from '../interfaces';\nimport { fromRef } from '../observable/fromRef';\nimport { validateEventsArray } from './utils';\nimport { SchedulerLike, Observable, merge } from 'rxjs';\nimport { DatabaseSnapshot } from '../interfaces';\n\nexport function stateChanges<T>(query: DatabaseQuery, events?: ChildEvent[], scheduler?: SchedulerLike) {\n  events = validateEventsArray(events)!;\n  const childEvent$ = events.map(event => fromRef<T>(query, event, 'on', scheduler));\n  return merge(...childEvent$);\n}\n","import { DataSnapshot, DatabaseQuery, ChildEvent, DatabaseSnapshot, AngularFireAction, SnapshotAction } from '../interfaces';\nimport { stateChanges } from './state-changes';\nimport { Observable, SchedulerLike } from 'rxjs';\nimport { fromRef } from '../observable/fromRef';\n\nimport { skipWhile, withLatestFrom, map, scan } from 'rxjs/operators';\n\nexport function auditTrail<T>(query: DatabaseQuery, events?: ChildEvent[], scheduler?: SchedulerLike): Observable<SnapshotAction<T>[]> {\n  const auditTrail$ = stateChanges<T>(query, events)\n    .pipe(\n      scan((current, action) => [...current, action], [])\n    );\n  return waitForLoaded<T>(query, auditTrail$, scheduler);\n}\n\ninterface LoadedMetadata {\n  data: AngularFireAction<DataSnapshot>;\n  lastKeyToLoad: any;\n}\n\nfunction loadedData<T>(query: DatabaseQuery, scheduler?: SchedulerLike): Observable<LoadedMetadata> {\n  // Create an observable of loaded values to retrieve the\n  // known dataset. This will allow us to know what key to\n  // emit the \"whole\" array at when listening for child events.\n  return fromRef<T>(query, 'value', 'on', scheduler)\n  .pipe(\n    map(data => {\n      // Store the last key in the data set\n      let lastKeyToLoad;\n      // Loop through loaded dataset to find the last key\n      data.payload.forEach(child => {\n        lastKeyToLoad = child.key; return false;\n      });\n      // return data set and the current last key loaded\n      return { data, lastKeyToLoad };\n    })\n  );\n}\n\nfunction waitForLoaded<T>(query: DatabaseQuery, action$: Observable<SnapshotAction<T>[]>, scheduler?: SchedulerLike) {\n  const loaded$ = loadedData<T>(query, scheduler);\n  return loaded$\n    .pipe(\n      withLatestFrom(action$),\n      // Get the latest values from the \"loaded\" and \"child\" datasets\n      // We can use both datasets to form an array of the latest values.\n      map(([loaded, actions]) => {\n        // Store the last key in the data set\n        let lastKeyToLoad = loaded.lastKeyToLoad;\n        // Store all child keys loaded at this point\n        const loadedKeys = actions.map(snap => snap.key);\n        return { actions, lastKeyToLoad, loadedKeys }\n      }),\n      // This is the magical part, only emit when the last load key\n      // in the dataset has been loaded by a child event. At this point\n      // we can assume the dataset is \"whole\".\n      skipWhile(meta => meta.loadedKeys.indexOf(meta.lastKeyToLoad) === -1),\n      // Pluck off the meta data because the user only cares\n      // to iterate through the snapshots\n      map(meta => meta.actions)\n    );\n}\n","\nimport { DatabaseReference, FirebaseOperation, DatabaseSnapshot } from '../interfaces';\nimport { checkOperationCases } from '../utils';\n\nexport function createDataOperationMethod<T>(ref: DatabaseReference, operation: string) {\n  return function dataOperation<T>(item: FirebaseOperation, value: T) {\n    return checkOperationCases(item, {\n      stringCase: () => ref.child(<string>item)[operation](value),\n      firebaseCase: () => (<DatabaseReference>item)[operation](value),\n      snapshotCase: () => (<DatabaseSnapshot<T>>item).ref[operation](value)\n    });\n  }\n}\n","import { DatabaseReference, DataSnapshot, FirebaseOperation, DatabaseSnapshot } from '../interfaces';\nimport { checkOperationCases } from '../utils';\nimport { database } from 'firebase/app';\n\n// TODO(davideast): Find out why TS thinks this returns firebase.Primise\n// instead of Promise.\nexport function createRemoveMethod<T>(ref: DatabaseReference) {\n  return function remove(item?: FirebaseOperation): any {\n    if(!item) { return ref.remove(); }\n    return checkOperationCases(item, {\n      stringCase: () => ref.child(<string>item).remove(),\n      firebaseCase: () => (<DatabaseReference>item).remove(),\n      snapshotCase: () => (<DatabaseSnapshot<T>>item).ref.remove()\n    });\n  }\n}\n","import { DatabaseQuery, AngularFireList, ChildEvent } from '../interfaces';\nimport { snapshotChanges } from './snapshot-changes';\nimport { stateChanges } from './state-changes';\nimport { auditTrail } from './audit-trail';\nimport { createDataOperationMethod } from './data-operation';\nimport { createRemoveMethod } from './remove';\nimport { AngularFireDatabase } from '../database';\nimport { map } from 'rxjs/operators';\n\nexport function createListReference<T=any>(query: DatabaseQuery, afDatabase: AngularFireDatabase): AngularFireList<T> {\n  const outsideAngularScheduler = afDatabase.schedulers.outsideAngular;\n  return {\n    query,\n    update: createDataOperationMethod<Partial<T>>(query.ref, 'update'),\n    set: createDataOperationMethod<T>(query.ref, 'set'),\n    push: (data: T) => query.ref.push(data),\n    remove: createRemoveMethod(query.ref),\n    snapshotChanges(events?: ChildEvent[]) {\n      return snapshotChanges<T>(query, events, outsideAngularScheduler).pipe(afDatabase.keepUnstableUntilFirst);\n    },\n    stateChanges(events?: ChildEvent[]) {\n      return stateChanges<T>(query, events, outsideAngularScheduler).pipe(afDatabase.keepUnstableUntilFirst);\n    },\n    auditTrail(events?: ChildEvent[]) {\n      return auditTrail<T>(query, events, outsideAngularScheduler).pipe(afDatabase.keepUnstableUntilFirst);\n    },\n    valueChanges(events?: ChildEvent[]) {\n      const snapshotChanges$ = snapshotChanges<T>(query, events, outsideAngularScheduler);\n      return snapshotChanges$.pipe(\n        map(actions => actions.map(a => a.payload.val() as T)),\n        afDatabase.keepUnstableUntilFirst\n      );\n    }\n  }\n}\n","import { Observable, SchedulerLike } from 'rxjs';\nimport { fromRef } from '../observable/fromRef';\nimport { DatabaseQuery, SnapshotAction } from '../interfaces';\n\nexport function createObjectSnapshotChanges<T>(query: DatabaseQuery, scheduler?: SchedulerLike) {\n  return function snapshotChanges(): Observable<SnapshotAction<T>> {\n    return fromRef(query, 'value', 'on', scheduler);\n  }\n}\n","import { map } from 'rxjs/operators';\nimport { DatabaseQuery, AngularFireObject } from '../interfaces';\nimport { createObjectSnapshotChanges } from './snapshot-changes';\nimport { AngularFireDatabase } from '../database';\n\nexport function createObjectReference<T=any>(query: DatabaseQuery, afDatabase: AngularFireDatabase): AngularFireObject<T> {\n  return {\n    query,\n    snapshotChanges<T>() {\n      return createObjectSnapshotChanges<T>(query, afDatabase.schedulers.outsideAngular)().pipe(\n        afDatabase.keepUnstableUntilFirst!\n      );\n    },\n    update(data: Partial<T>) { return query.ref.update(data as any) as Promise<void>; },\n    set(data: T) { return query.ref.set(data) as Promise<void>; },\n    remove() { return query.ref.remove() as Promise<void>; },\n    valueChanges<T>() {\n      const snapshotChanges$ = createObjectSnapshotChanges(query, afDatabase.schedulers.outsideAngular)();\n      return snapshotChanges$.pipe(\n        afDatabase.keepUnstableUntilFirst,\n        map(action => action.payload.exists() ? action.payload.val() as T : null)\n      )\n    },\n  }\n}\n","import { Injectable, Inject, Optional, NgZone, PLATFORM_ID, InjectionToken } from '@angular/core';\nimport { DatabaseQuery, PathReference, QueryFn, AngularFireList, AngularFireObject } from './interfaces';\nimport { getRef } from './utils';\nimport { createListReference } from './list/create-reference';\nimport { createObjectReference } from './object/create-reference';\nimport { FirebaseOptions, FirebaseAppConfig, FIREBASE_OPTIONS, FIREBASE_APP_NAME, ɵfirebaseAppFactory, ɵkeepUnstableUntilFirstFactory, ɵAngularFireSchedulers } from '@angular/fire';\nimport { Observable } from 'rxjs';\nimport { database } from 'firebase/app';\nimport 'firebase/database';\n\nexport const URL = new InjectionToken<string>('angularfire2.realtimeDatabaseURL')\n\n@Injectable({\n  providedIn: 'any'\n})\nexport class AngularFireDatabase {\n  public readonly database: database.Database;\n\n  public readonly schedulers: ɵAngularFireSchedulers;\n  public readonly keepUnstableUntilFirst: <T>(obs$: Observable<T>) => Observable<T>;\n\n  constructor(\n    @Inject(FIREBASE_OPTIONS) options:FirebaseOptions,\n    @Optional() @Inject(FIREBASE_APP_NAME) nameOrConfig:string|FirebaseAppConfig|null|undefined,\n    @Optional() @Inject(URL) databaseURL:string|null,\n    @Inject(PLATFORM_ID) platformId: Object,\n    zone: NgZone\n  ) {\n    this.schedulers = new ɵAngularFireSchedulers(zone);\n    this.keepUnstableUntilFirst = ɵkeepUnstableUntilFirstFactory(this.schedulers, platformId);\n\n    this.database = zone.runOutsideAngular(() => {\n      const app = ɵfirebaseAppFactory(options, zone, nameOrConfig);\n      return app.database(databaseURL || undefined);\n    });\n  }\n\n  list<T>(pathOrRef: PathReference, queryFn?: QueryFn): AngularFireList<T> {\n    const ref = getRef(this.database, pathOrRef);\n    let query: DatabaseQuery = ref;\n    if(queryFn) {\n      query = queryFn(ref);\n    }\n    return createListReference<T>(query, this);\n  }\n\n  object<T>(pathOrRef: PathReference): AngularFireObject<T>  {\n    const ref = getRef(this.database, pathOrRef);\n    return createObjectReference<T>(ref, this);\n  }\n\n  createPushId() {\n    return this.database.ref().push().key;\n  }\n\n}\n\nexport {\n  PathReference,\n  DatabaseSnapshot,\n  ChildEvent,\n  ListenEvent,\n  QueryFn,\n  AngularFireList,\n  AngularFireObject,\n  AngularFireAction,\n  Action,\n  SnapshotAction\n} from './interfaces';\n","import { NgModule } from '@angular/core';\nimport { AngularFireDatabase } from './database';\n\n@NgModule({\n  providers: [ AngularFireDatabase ]\n})\nexport class AngularFireDatabaseModule { }\n"]},"metadata":{},"sourceType":"module"}